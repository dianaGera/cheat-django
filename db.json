[{"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2021-11-09T12:39:31.211Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "HTML", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2021-11-09T12:39:42.245Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "CSS", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2021-11-09T12:39:56.858Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "Django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2021-11-09T12:52:10.553Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Start Django Project", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2021-11-09T16:08:02.007Z", "user": 1, "content_type": 7, "object_id": "4", "object_repr": "Python", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2021-11-09T16:08:29.177Z", "user": 1, "content_type": 7, "object_id": "5", "object_repr": "GIT", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2021-11-09T16:08:41.056Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "OOP", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2021-11-09T16:17:25.904Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2021-12-02T09:18:31.039Z", "user": 1, "content_type": 9, "object_id": "1", "object_repr": "tart Django Projec", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2021-12-02T09:18:35.723Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "tart Django Projec", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\", \"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2021-12-02T09:20:20.438Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "URL-связи", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2021-12-02T09:20:28.372Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "URL-связи", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2021-12-02T09:22:17.645Z", "user": 1, "content_type": 8, "object_id": "3", "object_repr": "Список вложенных маршрутов", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2021-12-02T09:22:35.598Z", "user": 1, "content_type": 9, "object_id": "2", "object_repr": "URL-связи", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2021-12-02T09:22:47.579Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "URL-связи", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2021-12-02T09:22:52.327Z", "user": 1, "content_type": 8, "object_id": "3", "object_repr": "Список вложенных маршрутов", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2021-12-02T09:23:49.975Z", "user": 1, "content_type": 9, "object_id": "3", "object_repr": "Models", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2021-12-02T09:24:03.796Z", "user": 1, "content_type": 9, "object_id": "3", "object_repr": "Модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2021-12-02T09:24:10.145Z", "user": 1, "content_type": 8, "object_id": "4", "object_repr": "Модели", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2021-12-02T09:25:05.853Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2021-12-02T09:25:30.595Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Миграции", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2021-12-02T09:26:11.326Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Создание связей между моделями", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2021-12-02T09:26:28.084Z", "user": 1, "content_type": 8, "object_id": "7", "object_repr": "Миграции", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2021-12-02T09:27:14.752Z", "user": 1, "content_type": 8, "object_id": "8", "object_repr": "Регистрация модели в админке", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 25, "fields": {"action_time": "2021-12-02T09:27:27.607Z", "user": 1, "content_type": 9, "object_id": "4", "object_repr": "Админка", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 26, "fields": {"action_time": "2021-12-02T09:27:46.756Z", "user": 1, "content_type": 9, "object_id": "4", "object_repr": "Админка", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 27, "fields": {"action_time": "2021-12-02T09:27:56.338Z", "user": 1, "content_type": 8, "object_id": "9", "object_repr": "Админка", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 28, "fields": {"action_time": "2021-12-02T09:33:07.815Z", "user": 1, "content_type": 9, "object_id": "5", "object_repr": "Views & Templates", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 29, "fields": {"action_time": "2021-12-02T09:33:10.442Z", "user": 1, "content_type": 8, "object_id": "10", "object_repr": "Функции представления", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 30, "fields": {"action_time": "2021-12-02T09:33:44.879Z", "user": 1, "content_type": 8, "object_id": "11", "object_repr": "Создание шаблона (Jinja2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 31, "fields": {"action_time": "2021-12-02T09:34:09.855Z", "user": 1, "content_type": 8, "object_id": "12", "object_repr": "Наследование шаблонов", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 32, "fields": {"action_time": "2021-12-02T09:34:29.452Z", "user": 1, "content_type": 8, "object_id": "13", "object_repr": "Фильтры", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 33, "fields": {"action_time": "2021-12-02T09:35:39.349Z", "user": 1, "content_type": 8, "object_id": "14", "object_repr": "tatic", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 34, "fields": {"action_time": "2021-12-02T09:36:24.981Z", "user": 1, "content_type": 8, "object_id": "15", "object_repr": "Формирование URL-адресов в шаблонах", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 35, "fields": {"action_time": "2021-12-02T09:36:49.390Z", "user": 1, "content_type": 8, "object_id": "16", "object_repr": "Использование слагов в URL-адресах", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 36, "fields": {"action_time": "2021-12-02T09:36:58.541Z", "user": 1, "content_type": 8, "object_id": "17", "object_repr": "Использование слагов в URL-адресах", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 37, "fields": {"action_time": "2021-12-02T09:37:16.487Z", "user": 1, "content_type": 8, "object_id": "14", "object_repr": "tatic", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 38, "fields": {"action_time": "2021-12-02T09:37:28.483Z", "user": 1, "content_type": 8, "object_id": "11", "object_repr": "Создание шаблона (Jinja2", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 39, "fields": {"action_time": "2021-12-02T09:37:57.580Z", "user": 1, "content_type": 8, "object_id": "18", "object_repr": "Пользовательские теги шаблонов", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 40, "fields": {"action_time": "2021-12-02T09:39:21.063Z", "user": 1, "content_type": 8, "object_id": "17", "object_repr": "Пользовательские теги шаблонов", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 41, "fields": {"action_time": "2021-12-02T09:40:19.292Z", "user": 1, "content_type": 9, "object_id": "6", "object_repr": "Формы", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 42, "fields": {"action_time": "2021-12-02T09:40:27.054Z", "user": 1, "content_type": 8, "object_id": "18", "object_repr": "Формы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 43, "fields": {"action_time": "2021-12-02T09:40:56.062Z", "user": 1, "content_type": 8, "object_id": "19", "object_repr": "Аргументы для полей формы", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 44, "fields": {"action_time": "2021-12-02T09:41:52.032Z", "user": 1, "content_type": 8, "object_id": "20", "object_repr": "Стилизация формы", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 45, "fields": {"action_time": "2021-12-02T09:42:18.440Z", "user": 1, "content_type": 8, "object_id": "21", "object_repr": "Формы связанные с моделью", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 46, "fields": {"action_time": "2021-12-02T09:42:36.102Z", "user": 1, "content_type": 8, "object_id": "22", "object_repr": "Кастомные валидаторы", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 47, "fields": {"action_time": "2021-12-02T09:43:40.080Z", "user": 1, "content_type": 9, "object_id": "7", "object_repr": "Контролеры класса CBVs", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 48, "fields": {"action_time": "2021-12-02T09:44:15.608Z", "user": 1, "content_type": 8, "object_id": "23", "object_repr": "ListView", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 49, "fields": {"action_time": "2021-12-02T09:44:36.227Z", "user": 1, "content_type": 8, "object_id": "24", "object_repr": "DetailView", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 50, "fields": {"action_time": "2021-12-02T09:44:52.926Z", "user": 1, "content_type": 8, "object_id": "24", "object_repr": "DetailView", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 51, "fields": {"action_time": "2021-12-02T09:45:10.886Z", "user": 1, "content_type": 8, "object_id": "25", "object_repr": "CreateView", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 52, "fields": {"action_time": "2021-12-02T09:45:29.883Z", "user": 1, "content_type": 8, "object_id": "26", "object_repr": "Миксины", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 53, "fields": {"action_time": "2021-12-02T09:46:15.892Z", "user": 1, "content_type": 8, "object_id": "27", "object_repr": "MySQL", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 54, "fields": {"action_time": "2021-12-02T09:47:01.215Z", "user": 1, "content_type": 8, "object_id": "28", "object_repr": "hell", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 55, "fields": {"action_time": "2021-12-02T09:47:33.555Z", "user": 1, "content_type": 9, "object_id": "8", "object_repr": "ORM", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 56, "fields": {"action_time": "2021-12-02T09:47:36.155Z", "user": 1, "content_type": 8, "object_id": "29", "object_repr": "ORM", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 57, "fields": {"action_time": "2021-12-02T09:47:54.140Z", "user": 1, "content_type": 8, "object_id": "29", "object_repr": "ORM (Object-Relational Mapping", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 58, "fields": {"action_time": "2021-12-02T09:48:16.262Z", "user": 1, "content_type": 8, "object_id": "30", "object_repr": "Базовые методы ОРМ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 59, "fields": {"action_time": "2021-12-02T09:48:40.078Z", "user": 1, "content_type": 8, "object_id": "31", "object_repr": "Операторы фильтрации", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 60, "fields": {"action_time": "2021-12-02T09:49:02.893Z", "user": 1, "content_type": 8, "object_id": "32", "object_repr": "Логическое <b>and, or, not</b> в запросах, класс <b>Q</b>", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 61, "fields": {"action_time": "2021-12-02T09:49:24.011Z", "user": 1, "content_type": 8, "object_id": "33", "object_repr": "Агрегатные функции", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 62, "fields": {"action_time": "2021-12-02T09:49:56.037Z", "user": 1, "content_type": 8, "object_id": "34", "object_repr": "Класс <b>F</b>", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 63, "fields": {"action_time": "2021-12-02T09:50:57.531Z", "user": 1, "content_type": 8, "object_id": "34", "object_repr": "Класс F, функции СУБД и Raw SQL", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 64, "fields": {"action_time": "2021-12-02T09:51:20.147Z", "user": 1, "content_type": 8, "object_id": "35", "object_repr": "Django DEBUG Toolbar", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 65, "fields": {"action_time": "2021-12-02T09:51:41.862Z", "user": 1, "content_type": 8, "object_id": "36", "object_repr": "Постраничная навигация (pagination", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 66, "fields": {"action_time": "2021-12-02T09:52:23.688Z", "user": 1, "content_type": 9, "object_id": "9", "object_repr": "Регистрация и Авторизация", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 67, "fields": {"action_time": "2021-12-02T09:52:26.010Z", "user": 1, "content_type": 8, "object_id": "37", "object_repr": "Регистрация и Авторизация", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 68, "fields": {"action_time": "2021-12-02T09:53:02.766Z", "user": 1, "content_type": 8, "object_id": "38", "object_repr": "lash-сообщения", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 69, "fields": {"action_time": "2021-12-02T09:53:23.833Z", "user": 1, "content_type": 8, "object_id": "39", "object_repr": "Кастомизация формы регистрации", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 70, "fields": {"action_time": "2021-12-02T09:54:03.568Z", "user": 1, "content_type": 8, "object_id": "40", "object_repr": "Авторизация", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 71, "fields": {"action_time": "2021-12-02T09:54:23.152Z", "user": 1, "content_type": 8, "object_id": "37", "object_repr": "Регистрация", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 72, "fields": {"action_time": "2021-12-02T09:54:48.167Z", "user": 1, "content_type": 8, "object_id": "28", "object_repr": "hell", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 73, "fields": {"action_time": "2021-12-02T09:54:53.408Z", "user": 1, "content_type": 8, "object_id": "38", "object_repr": "lash-сообщения", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 74, "fields": {"action_time": "2021-12-02T09:55:36.977Z", "user": 1, "content_type": 8, "object_id": "41", "object_repr": "Отправка писем на Email", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 75, "fields": {"action_time": "2021-12-02T09:55:56.753Z", "user": 1, "content_type": 8, "object_id": "42", "object_repr": "Капча", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 76, "fields": {"action_time": "2021-12-02T09:56:18.596Z", "user": 1, "content_type": 8, "object_id": "43", "object_repr": "Визуальный редактор CKEditor", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 77, "fields": {"action_time": "2021-12-02T09:56:43.508Z", "user": 1, "content_type": 8, "object_id": "44", "object_repr": "Система кеширование Django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 78, "fields": {"action_time": "2021-12-02T09:57:22.748Z", "user": 1, "content_type": 8, "object_id": "45", "object_repr": "Тонкая настройка (кастомизация) админки", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 79, "fields": {"action_time": "2021-12-02T09:57:46.757Z", "user": 1, "content_type": 8, "object_id": "46", "object_repr": "Развёртывание сайта на хостинге", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 80, "fields": {"action_time": "2021-12-02T18:36:20.836Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"Description\", \"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 81, "fields": {"action_time": "2021-12-02T18:36:33.621Z", "user": 1, "content_type": 9, "object_id": "1", "object_repr": "tart Django Projec", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 82, "fields": {"action_time": "2021-12-02T18:36:44.879Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "URL-связи", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 83, "fields": {"action_time": "2021-12-02T19:32:06.429Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 84, "fields": {"action_time": "2021-12-02T19:43:08.454Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 85, "fields": {"action_time": "2021-12-02T19:57:11.936Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 86, "fields": {"action_time": "2021-12-02T20:27:27.240Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 87, "fields": {"action_time": "2021-12-02T20:37:47.060Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 88, "fields": {"action_time": "2021-12-02T20:41:36.764Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 89, "fields": {"action_time": "2021-12-02T20:47:59.068Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 90, "fields": {"action_time": "2021-12-02T20:49:19.361Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 91, "fields": {"action_time": "2021-12-02T20:51:00.299Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 92, "fields": {"action_time": "2021-12-03T08:31:12.302Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 93, "fields": {"action_time": "2021-12-03T08:31:49.573Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 94, "fields": {"action_time": "2021-12-03T08:47:29.649Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "URL-связи", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 95, "fields": {"action_time": "2021-12-03T08:48:37.131Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "URL-связи", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 96, "fields": {"action_time": "2021-12-03T08:49:29.728Z", "user": 1, "content_type": 8, "object_id": "3", "object_repr": "Список вложенных маршрутов", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 97, "fields": {"action_time": "2021-12-03T09:08:40.369Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 98, "fields": {"action_time": "2021-12-03T09:18:35.359Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 99, "fields": {"action_time": "2021-12-03T09:21:15.799Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 100, "fields": {"action_time": "2021-12-03T09:51:37.924Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 101, "fields": {"action_time": "2021-12-03T09:53:46.050Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 102, "fields": {"action_time": "2021-12-03T09:58:32.669Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 103, "fields": {"action_time": "2021-12-03T09:59:03.621Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 104, "fields": {"action_time": "2021-12-03T10:00:29.776Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 105, "fields": {"action_time": "2021-12-03T10:02:39.773Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 106, "fields": {"action_time": "2021-12-03T10:03:50.491Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 107, "fields": {"action_time": "2021-12-03T10:04:40.061Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 108, "fields": {"action_time": "2021-12-03T10:06:31.293Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 109, "fields": {"action_time": "2021-12-03T10:06:58.508Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 110, "fields": {"action_time": "2021-12-03T10:07:48.895Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 111, "fields": {"action_time": "2021-12-03T10:08:10.286Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 112, "fields": {"action_time": "2021-12-03T10:10:14.371Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 113, "fields": {"action_time": "2021-12-03T10:11:09.503Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 114, "fields": {"action_time": "2021-12-03T10:11:57.359Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 115, "fields": {"action_time": "2021-12-03T10:13:38.893Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 116, "fields": {"action_time": "2021-12-03T10:15:19.506Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 117, "fields": {"action_time": "2021-12-03T10:15:33.381Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 118, "fields": {"action_time": "2021-12-03T10:15:53.995Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 119, "fields": {"action_time": "2021-12-03T10:17:41.149Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 120, "fields": {"action_time": "2021-12-03T10:19:25.457Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 121, "fields": {"action_time": "2021-12-03T10:20:35.566Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 122, "fields": {"action_time": "2021-12-03T10:21:39.630Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 123, "fields": {"action_time": "2021-12-03T10:23:01.150Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 124, "fields": {"action_time": "2021-12-03T13:54:01.554Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 125, "fields": {"action_time": "2021-12-03T13:54:20.649Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 126, "fields": {"action_time": "2021-12-03T13:57:56.118Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Создание связей между моделями", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 127, "fields": {"action_time": "2021-12-03T13:59:19.140Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Создание связей между моделями", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 128, "fields": {"action_time": "2021-12-03T14:05:43.022Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 129, "fields": {"action_time": "2021-12-03T14:06:19.397Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 130, "fields": {"action_time": "2021-12-03T14:06:48.430Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 131, "fields": {"action_time": "2021-12-03T14:07:50.286Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 132, "fields": {"action_time": "2021-12-03T14:09:58.871Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 133, "fields": {"action_time": "2021-12-03T14:11:30.985Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Создание связей между моделями", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 134, "fields": {"action_time": "2021-12-03T14:12:15.603Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Создание связей между моделями", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 135, "fields": {"action_time": "2021-12-03T14:13:37.538Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Создание связей между моделями", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 136, "fields": {"action_time": "2021-12-03T14:15:05.532Z", "user": 1, "content_type": 8, "object_id": "7", "object_repr": "Миграции", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 137, "fields": {"action_time": "2021-12-03T14:17:59.767Z", "user": 1, "content_type": 8, "object_id": "9", "object_repr": "Админка", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 138, "fields": {"action_time": "2021-12-03T14:20:14.982Z", "user": 1, "content_type": 8, "object_id": "10", "object_repr": "Функции представления", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 139, "fields": {"action_time": "2021-12-03T14:21:38.762Z", "user": 1, "content_type": 8, "object_id": "11", "object_repr": "Создание шаблона (Jinja2", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 140, "fields": {"action_time": "2021-12-03T14:22:26.813Z", "user": 1, "content_type": 8, "object_id": "11", "object_repr": "Создание шаблона (Jinja2", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 141, "fields": {"action_time": "2021-12-03T14:22:42.297Z", "user": 1, "content_type": 8, "object_id": "9", "object_repr": "Админка", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 142, "fields": {"action_time": "2021-12-03T14:23:24.594Z", "user": 1, "content_type": 8, "object_id": "11", "object_repr": "Создание шаблона (Jinja2", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 143, "fields": {"action_time": "2021-12-03T14:24:07.424Z", "user": 1, "content_type": 8, "object_id": "10", "object_repr": "Функции представления", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 144, "fields": {"action_time": "2021-12-03T14:33:03.978Z", "user": 1, "content_type": 9, "object_id": "10", "object_repr": "Что такое Django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 145, "fields": {"action_time": "2021-12-03T14:33:17.951Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 146, "fields": {"action_time": "2021-12-03T15:33:28.064Z", "user": 1, "content_type": 9, "object_id": "10", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 147, "fields": {"action_time": "2021-12-03T15:33:46.811Z", "user": 1, "content_type": 9, "object_id": "9", "object_repr": "Регистрация и Авторизация", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 148, "fields": {"action_time": "2021-12-03T15:33:51.946Z", "user": 1, "content_type": 9, "object_id": "8", "object_repr": "ORM", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 149, "fields": {"action_time": "2021-12-03T15:35:07.824Z", "user": 1, "content_type": 9, "object_id": "7", "object_repr": "Контролеры класса CBVs", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 150, "fields": {"action_time": "2021-12-03T15:35:08.177Z", "user": 1, "content_type": 9, "object_id": "6", "object_repr": "Формы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 151, "fields": {"action_time": "2021-12-03T15:35:08.667Z", "user": 1, "content_type": 9, "object_id": "5", "object_repr": "Views & Templates", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 152, "fields": {"action_time": "2021-12-03T15:35:09.151Z", "user": 1, "content_type": 9, "object_id": "3", "object_repr": "Модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 153, "fields": {"action_time": "2021-12-03T15:35:09.422Z", "user": 1, "content_type": 9, "object_id": "2", "object_repr": "URL-связи", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 154, "fields": {"action_time": "2021-12-03T19:03:48.592Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 155, "fields": {"action_time": "2021-12-03T19:04:49.152Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 156, "fields": {"action_time": "2021-12-03T19:05:44.677Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 157, "fields": {"action_time": "2021-12-03T19:11:23.425Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "URL-связи", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 158, "fields": {"action_time": "2021-12-03T19:17:21.584Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 159, "fields": {"action_time": "2021-12-03T19:25:57.150Z", "user": 1, "content_type": 8, "object_id": "9", "object_repr": "Админка", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 160, "fields": {"action_time": "2021-12-03T19:31:33.205Z", "user": 1, "content_type": 8, "object_id": "10", "object_repr": "Функции представления", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 161, "fields": {"action_time": "2021-12-03T19:33:22.555Z", "user": 1, "content_type": 8, "object_id": "11", "object_repr": "Создание шаблона (Jinja2", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 162, "fields": {"action_time": "2021-12-03T19:34:47.115Z", "user": 1, "content_type": 8, "object_id": "12", "object_repr": "Наследование шаблонов", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 163, "fields": {"action_time": "2021-12-03T19:36:17.309Z", "user": 1, "content_type": 8, "object_id": "13", "object_repr": "Фильтры", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 164, "fields": {"action_time": "2021-12-03T19:36:56.040Z", "user": 1, "content_type": 8, "object_id": "13", "object_repr": "Фильтры", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 165, "fields": {"action_time": "2021-12-03T19:40:34.546Z", "user": 1, "content_type": 8, "object_id": "14", "object_repr": "tatic", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 166, "fields": {"action_time": "2021-12-03T19:47:35.428Z", "user": 1, "content_type": 8, "object_id": "15", "object_repr": "Формирование URL-адресов в шаблонах", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 167, "fields": {"action_time": "2021-12-03T19:50:15.233Z", "user": 1, "content_type": 8, "object_id": "16", "object_repr": "Использование слагов в URL-адресах", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 168, "fields": {"action_time": "2021-12-03T19:52:54.312Z", "user": 1, "content_type": 8, "object_id": "17", "object_repr": "Пользовательские теги шаблонов", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 169, "fields": {"action_time": "2021-12-03T19:54:52.433Z", "user": 1, "content_type": 8, "object_id": "18", "object_repr": "Формы", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 170, "fields": {"action_time": "2021-12-03T19:55:42Z", "user": 1, "content_type": 8, "object_id": "20", "object_repr": "Стилизация формы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 171, "fields": {"action_time": "2021-12-03T19:58:14.217Z", "user": 1, "content_type": 8, "object_id": "21", "object_repr": "Формы связанные с моделью", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 172, "fields": {"action_time": "2021-12-03T19:59:32.701Z", "user": 1, "content_type": 8, "object_id": "23", "object_repr": "Контролеры класса CBVs", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 173, "fields": {"action_time": "2021-12-03T20:00:21.737Z", "user": 1, "content_type": 8, "object_id": "23", "object_repr": "Контролеры класса CBVs, ListView", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 174, "fields": {"action_time": "2021-12-03T20:14:37.666Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 175, "fields": {"action_time": "2021-12-03T20:14:50.046Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "URL-связи", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 176, "fields": {"action_time": "2021-12-03T20:15:03.301Z", "user": 1, "content_type": 8, "object_id": "3", "object_repr": "Список вложенных маршрутов", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 177, "fields": {"action_time": "2021-12-04T09:19:55.378Z", "user": 1, "content_type": 9, "object_id": "10", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 178, "fields": {"action_time": "2021-12-04T09:20:01.829Z", "user": 1, "content_type": 9, "object_id": "9", "object_repr": "Регистрация и Авторизация", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 179, "fields": {"action_time": "2021-12-04T09:20:06.893Z", "user": 1, "content_type": 9, "object_id": "8", "object_repr": "ORM", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 180, "fields": {"action_time": "2021-12-04T09:20:11.835Z", "user": 1, "content_type": 9, "object_id": "7", "object_repr": "Контролеры класса CBVs", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 181, "fields": {"action_time": "2021-12-04T09:20:17.801Z", "user": 1, "content_type": 9, "object_id": "6", "object_repr": "Формы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 182, "fields": {"action_time": "2021-12-04T09:20:23.395Z", "user": 1, "content_type": 9, "object_id": "5", "object_repr": "Views & Templates", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 183, "fields": {"action_time": "2021-12-04T09:20:28.128Z", "user": 1, "content_type": 9, "object_id": "3", "object_repr": "Модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 184, "fields": {"action_time": "2021-12-04T09:20:33.830Z", "user": 1, "content_type": 9, "object_id": "2", "object_repr": "URL-связи", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 185, "fields": {"action_time": "2021-12-04T09:41:28.209Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "OOP", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 186, "fields": {"action_time": "2021-12-04T09:41:33.564Z", "user": 1, "content_type": 7, "object_id": "5", "object_repr": "IT", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 187, "fields": {"action_time": "2021-12-04T09:41:38.995Z", "user": 1, "content_type": 7, "object_id": "4", "object_repr": "Python", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 188, "fields": {"action_time": "2021-12-04T09:41:44.430Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 189, "fields": {"action_time": "2021-12-04T09:41:48.747Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "CSS", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 190, "fields": {"action_time": "2021-12-04T09:41:52.805Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "HTML", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 191, "fields": {"action_time": "2021-12-04T09:43:28.102Z", "user": 1, "content_type": 8, "object_id": "4", "object_repr": "Модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 192, "fields": {"action_time": "2021-12-04T09:43:36.778Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Типы полей модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 193, "fields": {"action_time": "2021-12-04T09:43:46.180Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Создание связей между моделями", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 194, "fields": {"action_time": "2021-12-04T09:44:13.870Z", "user": 1, "content_type": 8, "object_id": "7", "object_repr": "Миграции", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 195, "fields": {"action_time": "2021-12-04T09:44:27.726Z", "user": 1, "content_type": 8, "object_id": "8", "object_repr": "Регистрация модели в админке", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 196, "fields": {"action_time": "2021-12-04T09:44:55.321Z", "user": 1, "content_type": 8, "object_id": "9", "object_repr": "Админка", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 197, "fields": {"action_time": "2021-12-04T09:47:39.779Z", "user": 1, "content_type": 8, "object_id": "10", "object_repr": "Функции представления", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 198, "fields": {"action_time": "2021-12-04T09:47:54.109Z", "user": 1, "content_type": 8, "object_id": "11", "object_repr": "Создание шаблона (Jinja2", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 199, "fields": {"action_time": "2021-12-04T09:48:03.574Z", "user": 1, "content_type": 8, "object_id": "12", "object_repr": "Наследование шаблонов", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 200, "fields": {"action_time": "2021-12-04T09:48:11.869Z", "user": 1, "content_type": 8, "object_id": "13", "object_repr": "Фильтры", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 201, "fields": {"action_time": "2021-12-04T09:48:20.549Z", "user": 1, "content_type": 8, "object_id": "14", "object_repr": "tatic", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 202, "fields": {"action_time": "2021-12-04T09:48:29.728Z", "user": 1, "content_type": 8, "object_id": "15", "object_repr": "Формирование URL-адресов в шаблонах", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 203, "fields": {"action_time": "2021-12-04T09:48:38.291Z", "user": 1, "content_type": 8, "object_id": "16", "object_repr": "Использование слагов в URL-адресах", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 204, "fields": {"action_time": "2021-12-04T09:48:47.487Z", "user": 1, "content_type": 8, "object_id": "17", "object_repr": "Пользовательские теги шаблонов", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 205, "fields": {"action_time": "2021-12-04T09:49:20.793Z", "user": 1, "content_type": 8, "object_id": "24", "object_repr": "DetailView", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 206, "fields": {"action_time": "2021-12-04T09:49:24.225Z", "user": 1, "content_type": 8, "object_id": "23", "object_repr": "Контролеры класса CBVs, ListView", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 207, "fields": {"action_time": "2021-12-04T09:49:27.903Z", "user": 1, "content_type": 8, "object_id": "22", "object_repr": "Кастомные валидаторы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 208, "fields": {"action_time": "2021-12-04T09:49:31.228Z", "user": 1, "content_type": 8, "object_id": "21", "object_repr": "Формы связанные с моделью", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 209, "fields": {"action_time": "2021-12-04T09:49:34.799Z", "user": 1, "content_type": 8, "object_id": "20", "object_repr": "Стилизация формы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 210, "fields": {"action_time": "2021-12-04T09:49:37.274Z", "user": 1, "content_type": 8, "object_id": "19", "object_repr": "Аргументы для полей формы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 211, "fields": {"action_time": "2021-12-04T09:49:40.350Z", "user": 1, "content_type": 8, "object_id": "18", "object_repr": "Формы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 212, "fields": {"action_time": "2021-12-04T09:49:43.313Z", "user": 1, "content_type": 8, "object_id": "25", "object_repr": "CreateView", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 213, "fields": {"action_time": "2021-12-04T09:50:15.549Z", "user": 1, "content_type": 8, "object_id": "37", "object_repr": "Регистрация", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 214, "fields": {"action_time": "2021-12-04T09:50:18.865Z", "user": 1, "content_type": 8, "object_id": "36", "object_repr": "Постраничная навигация (pagination", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 215, "fields": {"action_time": "2021-12-04T09:50:22.434Z", "user": 1, "content_type": 8, "object_id": "35", "object_repr": "Django DEBUG Toolbar", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 216, "fields": {"action_time": "2021-12-04T09:50:26.020Z", "user": 1, "content_type": 8, "object_id": "34", "object_repr": "Класс F, функции СУБД и Raw SQL", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 217, "fields": {"action_time": "2021-12-04T09:50:28.428Z", "user": 1, "content_type": 8, "object_id": "33", "object_repr": "Агрегатные функции", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 218, "fields": {"action_time": "2021-12-04T09:50:44.685Z", "user": 1, "content_type": 8, "object_id": "32", "object_repr": "Логическое and, or, not в запросах, класс Q", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 219, "fields": {"action_time": "2021-12-04T09:50:48.015Z", "user": 1, "content_type": 8, "object_id": "31", "object_repr": "Операторы фильтрации", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 220, "fields": {"action_time": "2021-12-04T09:50:51.511Z", "user": 1, "content_type": 8, "object_id": "30", "object_repr": "Базовые методы ОРМ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 221, "fields": {"action_time": "2021-12-04T09:50:54.942Z", "user": 1, "content_type": 8, "object_id": "29", "object_repr": "ORM (Object-Relational Mapping", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 222, "fields": {"action_time": "2021-12-04T09:50:58.112Z", "user": 1, "content_type": 8, "object_id": "28", "object_repr": "hell", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 223, "fields": {"action_time": "2021-12-04T09:51:02.363Z", "user": 1, "content_type": 8, "object_id": "27", "object_repr": "MySQL", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 224, "fields": {"action_time": "2021-12-04T09:51:05.811Z", "user": 1, "content_type": 8, "object_id": "26", "object_repr": "Миксины", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 225, "fields": {"action_time": "2021-12-04T09:51:35.583Z", "user": 1, "content_type": 8, "object_id": "45", "object_repr": "Тонкая настройка (кастомизация) админки", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 226, "fields": {"action_time": "2021-12-04T09:51:38.881Z", "user": 1, "content_type": 8, "object_id": "44", "object_repr": "Система кеширование Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 227, "fields": {"action_time": "2021-12-04T09:51:42.416Z", "user": 1, "content_type": 8, "object_id": "43", "object_repr": "Визуальный редактор CKEditor", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 228, "fields": {"action_time": "2021-12-04T09:51:44.320Z", "user": 1, "content_type": 8, "object_id": "42", "object_repr": "Капча", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 229, "fields": {"action_time": "2021-12-04T09:51:46.913Z", "user": 1, "content_type": 8, "object_id": "41", "object_repr": "Отправка писем на Email", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 230, "fields": {"action_time": "2021-12-04T09:51:50.159Z", "user": 1, "content_type": 8, "object_id": "40", "object_repr": "Авторизация", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 231, "fields": {"action_time": "2021-12-04T09:51:53.808Z", "user": 1, "content_type": 8, "object_id": "39", "object_repr": "Кастомизация формы регистрации", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 232, "fields": {"action_time": "2021-12-04T09:51:57.191Z", "user": 1, "content_type": 8, "object_id": "38", "object_repr": "lash-сообщения", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 233, "fields": {"action_time": "2021-12-04T09:52:00.599Z", "user": 1, "content_type": 8, "object_id": "46", "object_repr": "Развёртывание сайта на хостинге", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 234, "fields": {"action_time": "2021-12-04T12:12:01.809Z", "user": 1, "content_type": 9, "object_id": "11", "object_repr": "Админка", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 235, "fields": {"action_time": "2021-12-04T12:12:11.742Z", "user": 1, "content_type": 8, "object_id": "9", "object_repr": "Админка", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 236, "fields": {"action_time": "2021-12-04T12:14:06.324Z", "user": 1, "content_type": 9, "object_id": "11", "object_repr": "Админка", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 237, "fields": {"action_time": "2021-12-04T12:19:44.212Z", "user": 1, "content_type": 9, "object_id": "12", "object_repr": "QL", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 238, "fields": {"action_time": "2021-12-04T12:19:55.520Z", "user": 1, "content_type": 9, "object_id": "13", "object_repr": "hell", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 239, "fields": {"action_time": "2021-12-04T12:20:10.566Z", "user": 1, "content_type": 9, "object_id": "14", "object_repr": "Django DEBUG Toolbar", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 240, "fields": {"action_time": "2021-12-04T12:20:34.685Z", "user": 1, "content_type": 9, "object_id": "15", "object_repr": "Постраничная навигация (pagination", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 241, "fields": {"action_time": "2021-12-04T12:20:48.650Z", "user": 1, "content_type": 9, "object_id": "16", "object_repr": "Отправка писем на Email", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 242, "fields": {"action_time": "2021-12-04T12:20:57.682Z", "user": 1, "content_type": 9, "object_id": "17", "object_repr": "Капча", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 243, "fields": {"action_time": "2021-12-04T12:21:09.892Z", "user": 1, "content_type": 9, "object_id": "18", "object_repr": "Визуальный редактор CKEditor", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 244, "fields": {"action_time": "2021-12-04T12:21:21.359Z", "user": 1, "content_type": 9, "object_id": "19", "object_repr": "Система кеширование Django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 245, "fields": {"action_time": "2021-12-04T12:21:31.534Z", "user": 1, "content_type": 9, "object_id": "20", "object_repr": "Тонкая настройка (кастомизация) админки", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 246, "fields": {"action_time": "2021-12-04T12:21:40.183Z", "user": 1, "content_type": 9, "object_id": "21", "object_repr": "Развёртывание сайта на хостинге", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 247, "fields": {"action_time": "2021-12-04T12:21:44.972Z", "user": 1, "content_type": 8, "object_id": "27", "object_repr": "MySQL", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 248, "fields": {"action_time": "2021-12-04T12:21:45.391Z", "user": 1, "content_type": 8, "object_id": "28", "object_repr": "hell", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 249, "fields": {"action_time": "2021-12-04T12:21:46.120Z", "user": 1, "content_type": 8, "object_id": "35", "object_repr": "Django DEBUG Toolbar", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 250, "fields": {"action_time": "2021-12-04T12:21:46.698Z", "user": 1, "content_type": 8, "object_id": "36", "object_repr": "Постраничная навигация (pagination", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 251, "fields": {"action_time": "2021-12-04T12:21:47.479Z", "user": 1, "content_type": 8, "object_id": "41", "object_repr": "Отправка писем на Email", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 252, "fields": {"action_time": "2021-12-04T12:21:48.204Z", "user": 1, "content_type": 8, "object_id": "42", "object_repr": "Капча", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 253, "fields": {"action_time": "2021-12-04T12:21:48.778Z", "user": 1, "content_type": 8, "object_id": "43", "object_repr": "Визуальный редактор CKEditor", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 254, "fields": {"action_time": "2021-12-04T12:21:49.292Z", "user": 1, "content_type": 8, "object_id": "44", "object_repr": "Система кеширование Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 255, "fields": {"action_time": "2021-12-04T12:21:49.767Z", "user": 1, "content_type": 8, "object_id": "45", "object_repr": "Тонкая настройка (кастомизация) админки", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 256, "fields": {"action_time": "2021-12-04T12:21:50.603Z", "user": 1, "content_type": 8, "object_id": "46", "object_repr": "Развёртывание сайта на хостинге", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 257, "fields": {"action_time": "2021-12-04T12:33:10.018Z", "user": 1, "content_type": 9, "object_id": "10", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 258, "fields": {"action_time": "2021-12-04T12:33:13.728Z", "user": 1, "content_type": 9, "object_id": "2", "object_repr": "URL-связи", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 259, "fields": {"action_time": "2021-12-04T12:33:17.383Z", "user": 1, "content_type": 9, "object_id": "3", "object_repr": "Модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 260, "fields": {"action_time": "2021-12-04T12:33:20.777Z", "user": 1, "content_type": 9, "object_id": "11", "object_repr": "Админка", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 261, "fields": {"action_time": "2021-12-04T12:33:24.175Z", "user": 1, "content_type": 9, "object_id": "5", "object_repr": "Views & Templates", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 262, "fields": {"action_time": "2021-12-04T12:33:27.504Z", "user": 1, "content_type": 9, "object_id": "6", "object_repr": "Формы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 263, "fields": {"action_time": "2021-12-04T12:33:31.617Z", "user": 1, "content_type": 9, "object_id": "7", "object_repr": "Контролеры класса CBVs", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 264, "fields": {"action_time": "2021-12-04T12:33:37.373Z", "user": 1, "content_type": 9, "object_id": "12", "object_repr": "QL", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 265, "fields": {"action_time": "2021-12-04T12:33:45.318Z", "user": 1, "content_type": 9, "object_id": "13", "object_repr": "hell", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 266, "fields": {"action_time": "2021-12-04T12:33:50.657Z", "user": 1, "content_type": 9, "object_id": "8", "object_repr": "ORM", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 267, "fields": {"action_time": "2021-12-04T12:33:55.133Z", "user": 1, "content_type": 9, "object_id": "14", "object_repr": "Django DEBUG Toolbar", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 268, "fields": {"action_time": "2021-12-04T12:34:04.349Z", "user": 1, "content_type": 9, "object_id": "15", "object_repr": "Постраничная навигация (pagination", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 269, "fields": {"action_time": "2021-12-04T12:34:08.077Z", "user": 1, "content_type": 9, "object_id": "9", "object_repr": "Регистрация и Авторизация", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 270, "fields": {"action_time": "2021-12-04T12:34:13.554Z", "user": 1, "content_type": 9, "object_id": "16", "object_repr": "Отправка писем на Email", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 271, "fields": {"action_time": "2021-12-04T12:34:16.977Z", "user": 1, "content_type": 9, "object_id": "17", "object_repr": "Капча", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 272, "fields": {"action_time": "2021-12-04T12:34:20.488Z", "user": 1, "content_type": 9, "object_id": "18", "object_repr": "Визуальный редактор CKEditor", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 273, "fields": {"action_time": "2021-12-04T12:34:24.177Z", "user": 1, "content_type": 9, "object_id": "19", "object_repr": "Система кеширование Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 274, "fields": {"action_time": "2021-12-04T12:34:28.742Z", "user": 1, "content_type": 9, "object_id": "20", "object_repr": "Тонкая настройка (кастомизация) админки", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 275, "fields": {"action_time": "2021-12-04T12:34:32.948Z", "user": 1, "content_type": 9, "object_id": "21", "object_repr": "Развёртывание сайта на хостинге", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 276, "fields": {"action_time": "2021-12-04T13:55:23.909Z", "user": 1, "content_type": 8, "object_id": "23", "object_repr": "Контролеры класса CBVs, ListView", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 277, "fields": {"action_time": "2021-12-04T13:59:34.262Z", "user": 1, "content_type": 8, "object_id": "25", "object_repr": "CreateView", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 278, "fields": {"action_time": "2021-12-04T14:01:19.698Z", "user": 1, "content_type": 8, "object_id": "27", "object_repr": "MySQL", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 279, "fields": {"action_time": "2021-12-04T14:05:14.434Z", "user": 1, "content_type": 8, "object_id": "28", "object_repr": "hell", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 280, "fields": {"action_time": "2021-12-04T14:06:08.676Z", "user": 1, "content_type": 8, "object_id": "28", "object_repr": "hell", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 281, "fields": {"action_time": "2021-12-04T14:17:34.393Z", "user": 1, "content_type": 8, "object_id": "29", "object_repr": "ORM (Object-Relational Mapping", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 282, "fields": {"action_time": "2021-12-04T14:20:16.313Z", "user": 1, "content_type": 8, "object_id": "30", "object_repr": "Базовые методы ОРМ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 283, "fields": {"action_time": "2021-12-04T14:20:54.118Z", "user": 1, "content_type": 8, "object_id": "30", "object_repr": "Базовые методы ОРМ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 284, "fields": {"action_time": "2021-12-04T14:21:45.215Z", "user": 1, "content_type": 8, "object_id": "30", "object_repr": "Базовые методы ОРМ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 285, "fields": {"action_time": "2021-12-04T14:23:06.446Z", "user": 1, "content_type": 8, "object_id": "30", "object_repr": "Базовые методы ОРМ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 286, "fields": {"action_time": "2021-12-04T14:24:57.999Z", "user": 1, "content_type": 8, "object_id": "30", "object_repr": "Базовые методы ОРМ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 287, "fields": {"action_time": "2021-12-04T14:26:52.530Z", "user": 1, "content_type": 8, "object_id": "30", "object_repr": "Базовые методы ОРМ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 288, "fields": {"action_time": "2021-12-04T14:29:09.177Z", "user": 1, "content_type": 8, "object_id": "30", "object_repr": "Базовые методы ОРМ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 289, "fields": {"action_time": "2021-12-04T14:30:04.595Z", "user": 1, "content_type": 8, "object_id": "30", "object_repr": "Базовые методы ОРМ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 290, "fields": {"action_time": "2021-12-04T14:35:26.771Z", "user": 1, "content_type": 8, "object_id": "30", "object_repr": "Базовые методы ОРМ", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 291, "fields": {"action_time": "2021-12-04T14:37:10.381Z", "user": 1, "content_type": 8, "object_id": "31", "object_repr": "Операторы фильтрации", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 292, "fields": {"action_time": "2021-12-04T14:37:34.628Z", "user": 1, "content_type": 8, "object_id": "31", "object_repr": "Операторы фильтрации", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 293, "fields": {"action_time": "2021-12-04T14:44:36.231Z", "user": 1, "content_type": 8, "object_id": "31", "object_repr": "Операторы фильтрации", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 294, "fields": {"action_time": "2021-12-04T14:46:10.270Z", "user": 1, "content_type": 8, "object_id": "32", "object_repr": "Логическое and, or, not в запросах, класс Q", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 295, "fields": {"action_time": "2021-12-04T14:47:29.609Z", "user": 1, "content_type": 8, "object_id": "32", "object_repr": "Логическое and, or, not в запросах, класс Q", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 296, "fields": {"action_time": "2021-12-04T14:53:26.623Z", "user": 1, "content_type": 8, "object_id": "33", "object_repr": "Агрегатные функции", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 297, "fields": {"action_time": "2021-12-04T14:54:03.351Z", "user": 1, "content_type": 8, "object_id": "33", "object_repr": "Агрегатные функции", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 298, "fields": {"action_time": "2021-12-04T14:54:28.684Z", "user": 1, "content_type": 8, "object_id": "33", "object_repr": "Агрегатные функции", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 299, "fields": {"action_time": "2021-12-04T14:58:15.026Z", "user": 1, "content_type": 8, "object_id": "33", "object_repr": "Агрегатные функции", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 300, "fields": {"action_time": "2021-12-04T15:01:09.884Z", "user": 1, "content_type": 8, "object_id": "33", "object_repr": "Агрегатные функции", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 301, "fields": {"action_time": "2021-12-04T15:02:21.846Z", "user": 1, "content_type": 8, "object_id": "33", "object_repr": "Агрегатные функции", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 302, "fields": {"action_time": "2021-12-04T15:03:02.701Z", "user": 1, "content_type": 8, "object_id": "33", "object_repr": "Агрегатные функции", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 303, "fields": {"action_time": "2021-12-04T15:03:27.283Z", "user": 1, "content_type": 8, "object_id": "33", "object_repr": "Агрегатные функции", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 304, "fields": {"action_time": "2021-12-04T15:04:32.265Z", "user": 1, "content_type": 8, "object_id": "34", "object_repr": "Класс F, функции СУБД и Raw SQL", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 305, "fields": {"action_time": "2021-12-04T15:04:52.442Z", "user": 1, "content_type": 8, "object_id": "34", "object_repr": "Класс F, функции СУБД и Raw SQL", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 306, "fields": {"action_time": "2021-12-04T15:05:48.994Z", "user": 1, "content_type": 8, "object_id": "34", "object_repr": "Класс F, функции СУБД и Raw SQL", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 307, "fields": {"action_time": "2021-12-04T15:07:59.072Z", "user": 1, "content_type": 8, "object_id": "34", "object_repr": "Класс F, функции СУБД и Raw SQL", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 308, "fields": {"action_time": "2021-12-04T16:21:37.802Z", "user": 1, "content_type": 8, "object_id": "30", "object_repr": "Базовые методы ОРМ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 309, "fields": {"action_time": "2021-12-04T16:28:22.146Z", "user": 1, "content_type": 8, "object_id": "30", "object_repr": "Базовые методы ОРМ", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 310, "fields": {"action_time": "2021-12-04T19:15:09.494Z", "user": 1, "content_type": 8, "object_id": "24", "object_repr": "DetailView", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 311, "fields": {"action_time": "2021-12-04T21:29:08.711Z", "user": 1, "content_type": 8, "object_id": "24", "object_repr": "DetailView", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 312, "fields": {"action_time": "2021-12-05T12:45:23.602Z", "user": 1, "content_type": 9, "object_id": "22", "object_repr": "Другое", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 313, "fields": {"action_time": "2021-12-05T12:46:23.899Z", "user": 1, "content_type": 8, "object_id": "48", "object_repr": "aaa1", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 314, "fields": {"action_time": "2021-12-05T12:48:22.522Z", "user": 1, "content_type": 8, "object_id": "47", "object_repr": "", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\", \"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 315, "fields": {"action_time": "2021-12-05T12:48:23.098Z", "user": 1, "content_type": 8, "object_id": "48", "object_repr": "aaa1", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\", \"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 316, "fields": {"action_time": "2021-12-05T12:48:23.635Z", "user": 1, "content_type": 8, "object_id": "49", "object_repr": "jkjkj", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\", \"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 317, "fields": {"action_time": "2021-12-05T12:48:24.037Z", "user": 1, "content_type": 8, "object_id": "50", "object_repr": "jkjkjfg", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 318, "fields": {"action_time": "2021-12-05T12:48:24.366Z", "user": 1, "content_type": 8, "object_id": "51", "object_repr": "", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\", \"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 319, "fields": {"action_time": "2021-12-05T12:48:24.683Z", "user": 1, "content_type": 8, "object_id": "52", "object_repr": "", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\", \"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 320, "fields": {"action_time": "2021-12-05T13:11:55.338Z", "user": 1, "content_type": 9, "object_id": "18", "object_repr": "Визуальный редактор CKEditor", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 321, "fields": {"action_time": "2021-12-05T13:11:55.680Z", "user": 1, "content_type": 9, "object_id": "19", "object_repr": "Система кеширование Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 322, "fields": {"action_time": "2021-12-05T13:11:55.964Z", "user": 1, "content_type": 9, "object_id": "20", "object_repr": "Тонкая настройка (кастомизация) админки", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 323, "fields": {"action_time": "2021-12-05T13:11:56.262Z", "user": 1, "content_type": 9, "object_id": "21", "object_repr": "Развёртывание сайта на хостинге", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 324, "fields": {"action_time": "2021-12-05T13:12:53.215Z", "user": 1, "content_type": 9, "object_id": "22", "object_repr": "Другое", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 325, "fields": {"action_time": "2021-12-05T13:12:53.487Z", "user": 1, "content_type": 9, "object_id": "10", "object_repr": "Что такое Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 326, "fields": {"action_time": "2021-12-05T13:12:53.758Z", "user": 1, "content_type": 9, "object_id": "2", "object_repr": "URL-связи", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 327, "fields": {"action_time": "2021-12-05T13:12:54.074Z", "user": 1, "content_type": 9, "object_id": "3", "object_repr": "Модели", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 328, "fields": {"action_time": "2021-12-05T13:12:54.358Z", "user": 1, "content_type": 9, "object_id": "11", "object_repr": "Админка", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 329, "fields": {"action_time": "2021-12-05T13:12:54.642Z", "user": 1, "content_type": 9, "object_id": "5", "object_repr": "Views & Templates", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 330, "fields": {"action_time": "2021-12-05T13:12:54.912Z", "user": 1, "content_type": 9, "object_id": "6", "object_repr": "Формы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 331, "fields": {"action_time": "2021-12-05T13:12:55.195Z", "user": 1, "content_type": 9, "object_id": "7", "object_repr": "Контролеры класса CBVs", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 332, "fields": {"action_time": "2021-12-05T13:12:55.688Z", "user": 1, "content_type": 9, "object_id": "12", "object_repr": "QL", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 333, "fields": {"action_time": "2021-12-05T13:12:56.125Z", "user": 1, "content_type": 9, "object_id": "13", "object_repr": "hell", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 334, "fields": {"action_time": "2021-12-05T13:12:56.606Z", "user": 1, "content_type": 9, "object_id": "8", "object_repr": "ORM", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 335, "fields": {"action_time": "2021-12-05T13:12:57.143Z", "user": 1, "content_type": 9, "object_id": "14", "object_repr": "Django DEBUG Toolbar", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 336, "fields": {"action_time": "2021-12-05T13:12:57.597Z", "user": 1, "content_type": 9, "object_id": "15", "object_repr": "Постраничная навигация (pagination", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 337, "fields": {"action_time": "2021-12-05T13:12:57.881Z", "user": 1, "content_type": 9, "object_id": "9", "object_repr": "Регистрация и Авторизация", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 338, "fields": {"action_time": "2021-12-05T13:12:58.163Z", "user": 1, "content_type": 9, "object_id": "16", "object_repr": "Отправка писем на Email", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 339, "fields": {"action_time": "2021-12-05T13:12:58.434Z", "user": 1, "content_type": 9, "object_id": "17", "object_repr": "Капча", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 340, "fields": {"action_time": "2021-12-05T13:19:02.495Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "Другое", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 341, "fields": {"action_time": "2021-12-05T13:19:08.619Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "Другое", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 342, "fields": {"action_time": "2021-12-05T13:19:20.699Z", "user": 1, "content_type": 9, "object_id": "22", "object_repr": "Другое", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 343, "fields": {"action_time": "2021-12-05T13:26:34.176Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "Другое", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Image\"]}}]"}}, {"model": "admin.logentry", "pk": 344, "fields": {"action_time": "2021-12-05T13:40:56.872Z", "user": 1, "content_type": 8, "object_id": "53", "object_repr": "", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"URL-slug\"]}}]"}}, {"model": "admin.logentry", "pk": 345, "fields": {"action_time": "2021-12-05T13:45:14.745Z", "user": 1, "content_type": 9, "object_id": "23", "object_repr": "Другое (HTML", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 346, "fields": {"action_time": "2021-12-05T13:45:55.305Z", "user": 1, "content_type": 8, "object_id": "47", "object_repr": "", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 347, "fields": {"action_time": "2021-12-05T13:46:15.163Z", "user": 1, "content_type": 8, "object_id": "51", "object_repr": "", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 348, "fields": {"action_time": "2021-12-05T13:47:13.950Z", "user": 1, "content_type": 9, "object_id": "23", "object_repr": "Другое (HTML", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 349, "fields": {"action_time": "2021-12-05T16:16:37.760Z", "user": 1, "content_type": 8, "object_id": "36", "object_repr": "Постраничная навигация (pagination", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 350, "fields": {"action_time": "2021-12-05T16:18:10.026Z", "user": 1, "content_type": 8, "object_id": "36", "object_repr": "Постраничная навигация (pagination", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 351, "fields": {"action_time": "2021-12-05T16:21:48.692Z", "user": 1, "content_type": 8, "object_id": "36", "object_repr": "Постраничная навигация (pagination", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 352, "fields": {"action_time": "2021-12-05T16:27:07.768Z", "user": 1, "content_type": 8, "object_id": "36", "object_repr": "Постраничная навигация (pagination", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 353, "fields": {"action_time": "2021-12-05T20:27:36.783Z", "user": 1, "content_type": 8, "object_id": "36", "object_repr": "Постраничная навигация (pagination", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 354, "fields": {"action_time": "2021-12-05T20:29:31.717Z", "user": 1, "content_type": 8, "object_id": "36", "object_repr": "Постраничная навигация (pagination", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 355, "fields": {"action_time": "2021-12-05T20:29:45.963Z", "user": 1, "content_type": 8, "object_id": "36", "object_repr": "Постраничная навигация (pagination", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 356, "fields": {"action_time": "2021-12-06T09:53:21.267Z", "user": 1, "content_type": 8, "object_id": "37", "object_repr": "Регистрация", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 357, "fields": {"action_time": "2021-12-06T09:56:25.693Z", "user": 1, "content_type": 8, "object_id": "37", "object_repr": "Регистрация", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 358, "fields": {"action_time": "2021-12-06T11:52:05.122Z", "user": 1, "content_type": 8, "object_id": "38", "object_repr": "lash-сообщения", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 359, "fields": {"action_time": "2021-12-06T12:10:30.686Z", "user": 1, "content_type": 8, "object_id": "37", "object_repr": "Регистрация", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 360, "fields": {"action_time": "2021-12-06T12:10:50.297Z", "user": 1, "content_type": 8, "object_id": "37", "object_repr": "Регистрация", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 361, "fields": {"action_time": "2021-12-06T12:29:55.446Z", "user": 1, "content_type": 8, "object_id": "39", "object_repr": "Кастомизация формы регистрации", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 362, "fields": {"action_time": "2021-12-06T12:31:25.044Z", "user": 1, "content_type": 8, "object_id": "38", "object_repr": "lash-сообщения", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 363, "fields": {"action_time": "2021-12-06T14:56:05.844Z", "user": 1, "content_type": 8, "object_id": "38", "object_repr": "lash-сообщения", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 364, "fields": {"action_time": "2021-12-06T14:56:53.910Z", "user": 1, "content_type": 8, "object_id": "39", "object_repr": "Кастомизация формы регистрации", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 365, "fields": {"action_time": "2021-12-06T18:17:06.426Z", "user": 1, "content_type": 8, "object_id": "40", "object_repr": "Авторизация", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 366, "fields": {"action_time": "2021-12-06T18:23:04.178Z", "user": 1, "content_type": 3, "object_id": "1", "object_repr": "admin", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 367, "fields": {"action_time": "2021-12-06T18:23:18.036Z", "user": 1, "content_type": 4, "object_id": "1", "object_repr": "dian", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Groups\"]}}]"}}, {"model": "admin.logentry", "pk": 368, "fields": {"action_time": "2021-12-07T16:38:49.406Z", "user": 1, "content_type": 8, "object_id": "41", "object_repr": "Отправка писем на Email", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 369, "fields": {"action_time": "2021-12-07T16:49:31.371Z", "user": 1, "content_type": 8, "object_id": "41", "object_repr": "Отправка писем на Email", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 370, "fields": {"action_time": "2021-12-07T17:54:04.326Z", "user": 1, "content_type": 8, "object_id": "41", "object_repr": "Отправка писем на Email", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 371, "fields": {"action_time": "2021-12-07T17:59:10.511Z", "user": 1, "content_type": 8, "object_id": "42", "object_repr": "Капча", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 372, "fields": {"action_time": "2021-12-07T18:55:12.552Z", "user": 1, "content_type": 8, "object_id": "42", "object_repr": "Капча", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 373, "fields": {"action_time": "2021-12-07T19:04:44.077Z", "user": 1, "content_type": 8, "object_id": "43", "object_repr": "Визуальный редактор CKEditor", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 374, "fields": {"action_time": "2021-12-07T20:21:24.171Z", "user": 1, "content_type": 8, "object_id": "44", "object_repr": "Система кеширование Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 375, "fields": {"action_time": "2021-12-07T20:22:33.115Z", "user": 1, "content_type": 8, "object_id": "44", "object_repr": "Система кеширование Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 376, "fields": {"action_time": "2021-12-07T20:30:03.305Z", "user": 1, "content_type": 8, "object_id": "54", "object_repr": "ffffffffff", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Category\"]}}]"}}, {"model": "admin.logentry", "pk": 377, "fields": {"action_time": "2021-12-07T20:36:34.037Z", "user": 1, "content_type": 8, "object_id": "54", "object_repr": "ffffffffff", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 378, "fields": {"action_time": "2021-12-08T08:10:57.664Z", "user": 1, "content_type": 9, "object_id": "24", "object_repr": "HTML синтаксис", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 379, "fields": {"action_time": "2021-12-08T08:11:52.301Z", "user": 1, "content_type": 8, "object_id": "47", "object_repr": "HTML синтаксис", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 380, "fields": {"action_time": "2021-12-08T08:13:53.261Z", "user": 1, "content_type": 9, "object_id": "25", "object_repr": "Теги HTML", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 381, "fields": {"action_time": "2021-12-08T08:13:55.412Z", "user": 1, "content_type": 8, "object_id": "48", "object_repr": "Базовые теги", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 382, "fields": {"action_time": "2021-12-08T08:15:41.379Z", "user": 1, "content_type": 8, "object_id": "49", "object_repr": "HTML формы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"Category\", \"Subcategory\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 383, "fields": {"action_time": "2021-12-08T08:16:27.208Z", "user": 1, "content_type": 8, "object_id": "47", "object_repr": "HTML синтаксис", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 384, "fields": {"action_time": "2021-12-08T08:16:27.795Z", "user": 1, "content_type": 8, "object_id": "48", "object_repr": "Базовые теги", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Category\", \"Subcategory\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 385, "fields": {"action_time": "2021-12-08T08:16:34.895Z", "user": 1, "content_type": 8, "object_id": "47", "object_repr": "HTML синтаксис", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 386, "fields": {"action_time": "2021-12-08T08:16:35.466Z", "user": 1, "content_type": 8, "object_id": "48", "object_repr": "Базовые теги", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Category\", \"Subcategory\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 387, "fields": {"action_time": "2021-12-08T08:31:19.397Z", "user": 1, "content_type": 8, "object_id": "50", "object_repr": "CSS синтаксис", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"Category\", \"Subcategory\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 388, "fields": {"action_time": "2021-12-08T08:32:05.252Z", "user": 1, "content_type": 9, "object_id": "25", "object_repr": "CSS синтаксис", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\", \"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 389, "fields": {"action_time": "2021-12-08T08:33:57.439Z", "user": 1, "content_type": 8, "object_id": "51", "object_repr": "Псевдо-классы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"Category\", \"Subcategory\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 390, "fields": {"action_time": "2021-12-08T08:39:52.789Z", "user": 1, "content_type": 8, "object_id": "51", "object_repr": "Псевдо-классы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 391, "fields": {"action_time": "2021-12-08T08:44:06.772Z", "user": 1, "content_type": 8, "object_id": "52", "object_repr": "Блоки", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"Category\", \"Subcategory\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 392, "fields": {"action_time": "2021-12-08T08:47:22.636Z", "user": 1, "content_type": 8, "object_id": "51", "object_repr": "Псевдо-классы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 393, "fields": {"action_time": "2021-12-08T08:47:25.603Z", "user": 1, "content_type": 8, "object_id": "53", "object_repr": "Псевдо-классы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"Category\", \"Subcategory\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 394, "fields": {"action_time": "2021-12-08T08:48:44.409Z", "user": 1, "content_type": 8, "object_id": "51", "object_repr": "Работа с текстом", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 395, "fields": {"action_time": "2021-12-08T08:49:25.475Z", "user": 1, "content_type": 8, "object_id": "52", "object_repr": "Блоки", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 396, "fields": {"action_time": "2021-12-08T08:49:34.504Z", "user": 1, "content_type": 8, "object_id": "52", "object_repr": "Блоки", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 397, "fields": {"action_time": "2021-12-08T08:50:33.952Z", "user": 1, "content_type": 8, "object_id": "54", "object_repr": "Обнуление", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"Description\", \"HTML Content\", \"Category\", \"Subcategory\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 398, "fields": {"action_time": "2021-12-08T09:04:32.309Z", "user": 1, "content_type": 8, "object_id": "47", "object_repr": "HTML синтаксис", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 399, "fields": {"action_time": "2021-12-08T09:04:32.842Z", "user": 1, "content_type": 8, "object_id": "48", "object_repr": "Базовые теги", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 400, "fields": {"action_time": "2021-12-08T09:04:33.396Z", "user": 1, "content_type": 8, "object_id": "49", "object_repr": "HTML формы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 401, "fields": {"action_time": "2021-12-08T09:04:33.900Z", "user": 1, "content_type": 8, "object_id": "50", "object_repr": "CSS синтаксис", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 402, "fields": {"action_time": "2021-12-08T09:04:34.251Z", "user": 1, "content_type": 8, "object_id": "51", "object_repr": "Работа с текстом", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 403, "fields": {"action_time": "2021-12-08T09:04:34.753Z", "user": 1, "content_type": 8, "object_id": "52", "object_repr": "Блоки", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 404, "fields": {"action_time": "2021-12-08T09:04:35.103Z", "user": 1, "content_type": 8, "object_id": "53", "object_repr": "Псевдо-классы", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 405, "fields": {"action_time": "2021-12-08T09:04:35.443Z", "user": 1, "content_type": 8, "object_id": "54", "object_repr": "Обнуление", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 406, "fields": {"action_time": "2021-12-08T09:04:35.793Z", "user": 1, "content_type": 8, "object_id": "55", "object_repr": "dddddd", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 407, "fields": {"action_time": "2021-12-09T08:47:18.144Z", "user": 1, "content_type": 8, "object_id": "46", "object_repr": "Развёртывание сайта на хостинге", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 408, "fields": {"action_time": "2021-12-09T08:48:12.093Z", "user": 1, "content_type": 8, "object_id": "46", "object_repr": "Развёртывание сайта на хостинге", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 409, "fields": {"action_time": "2021-12-09T09:06:34.979Z", "user": 1, "content_type": 8, "object_id": "46", "object_repr": "Развёртывание сайта на хостинге", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 410, "fields": {"action_time": "2021-12-09T09:41:35.139Z", "user": 1, "content_type": 8, "object_id": "46", "object_repr": "Развёртывание сайта на хостинге", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 411, "fields": {"action_time": "2021-12-09T10:27:58.213Z", "user": 1, "content_type": 8, "object_id": "46", "object_repr": "Развёртывание сайта на хостинге", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 412, "fields": {"action_time": "2021-12-11T14:46:21.865Z", "user": 1, "content_type": 9, "object_id": "10", "object_repr": "What is Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 413, "fields": {"action_time": "2021-12-11T14:46:50.590Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "What is Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 414, "fields": {"action_time": "2021-12-11T14:48:33.686Z", "user": 1, "content_type": 9, "object_id": "2", "object_repr": "URL links", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 415, "fields": {"action_time": "2021-12-11T14:48:45.154Z", "user": 1, "content_type": 9, "object_id": "2", "object_repr": "URL-links", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 416, "fields": {"action_time": "2021-12-11T14:48:49.121Z", "user": 1, "content_type": 10, "object_id": "2", "object_repr": "URL links", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 417, "fields": {"action_time": "2021-12-11T14:50:51.018Z", "user": 1, "content_type": 10, "object_id": "3", "object_repr": "List of nested routes", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 418, "fields": {"action_time": "2021-12-11T14:52:17.388Z", "user": 1, "content_type": 9, "object_id": "3", "object_repr": "Models", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 419, "fields": {"action_time": "2021-12-11T14:52:24.438Z", "user": 1, "content_type": 10, "object_id": "4", "object_repr": "Models", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 420, "fields": {"action_time": "2021-12-11T14:52:40.298Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Model field types", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 421, "fields": {"action_time": "2021-12-11T14:53:09.957Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Model field types", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 422, "fields": {"action_time": "2021-12-11T14:53:45.584Z", "user": 1, "content_type": 10, "object_id": "6", "object_repr": "Creating links between models", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 423, "fields": {"action_time": "2021-12-11T14:54:16.032Z", "user": 1, "content_type": 10, "object_id": "7", "object_repr": "Migrations", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 424, "fields": {"action_time": "2021-12-11T14:54:53.856Z", "user": 1, "content_type": 10, "object_id": "8", "object_repr": "Registering a model in the admin panel", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 425, "fields": {"action_time": "2021-12-11T14:57:53.423Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Model type fields", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 426, "fields": {"action_time": "2021-12-11T14:58:45.928Z", "user": 1, "content_type": 10, "object_id": "6", "object_repr": "Creating links between models", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 427, "fields": {"action_time": "2021-12-11T14:59:16.746Z", "user": 1, "content_type": 10, "object_id": "6", "object_repr": "Creating links between models", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 428, "fields": {"action_time": "2021-12-11T14:59:47.991Z", "user": 1, "content_type": 10, "object_id": "6", "object_repr": "Creating links between models", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 429, "fields": {"action_time": "2021-12-11T15:01:23.030Z", "user": 1, "content_type": 10, "object_id": "9", "object_repr": "Admin panel", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 430, "fields": {"action_time": "2021-12-11T15:02:42.869Z", "user": 1, "content_type": 10, "object_id": "10", "object_repr": "View functions", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 431, "fields": {"action_time": "2021-12-11T15:03:08.290Z", "user": 1, "content_type": 10, "object_id": "10", "object_repr": "View functions", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 432, "fields": {"action_time": "2021-12-11T15:04:08.491Z", "user": 1, "content_type": 10, "object_id": "11", "object_repr": "Templates (Jinja2)", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 433, "fields": {"action_time": "2021-12-11T15:05:01.574Z", "user": 1, "content_type": 10, "object_id": "12", "object_repr": "Template inheritance", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 434, "fields": {"action_time": "2021-12-11T15:05:34.406Z", "user": 1, "content_type": 10, "object_id": "13", "object_repr": "Filters", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 435, "fields": {"action_time": "2021-12-11T15:06:11.270Z", "user": 1, "content_type": 10, "object_id": "14", "object_repr": "Static", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 436, "fields": {"action_time": "2021-12-11T15:06:52.207Z", "user": 1, "content_type": 10, "object_id": "15", "object_repr": "Shaping URLs in templates", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 437, "fields": {"action_time": "2021-12-11T15:07:35.798Z", "user": 1, "content_type": 10, "object_id": "16", "object_repr": "Slug", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 438, "fields": {"action_time": "2021-12-11T15:08:08.675Z", "user": 1, "content_type": 10, "object_id": "17", "object_repr": "Custom template tags", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 439, "fields": {"action_time": "2021-12-11T15:09:23.561Z", "user": 1, "content_type": 10, "object_id": "14", "object_repr": "Static", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 440, "fields": {"action_time": "2021-12-11T15:09:27.016Z", "user": 1, "content_type": 10, "object_id": "14", "object_repr": "Static", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 441, "fields": {"action_time": "2021-12-11T15:10:37.103Z", "user": 1, "content_type": 10, "object_id": "15", "object_repr": "Shaping URLs in templates", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 442, "fields": {"action_time": "2021-12-11T15:11:43.950Z", "user": 1, "content_type": 10, "object_id": "16", "object_repr": "Slug", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 443, "fields": {"action_time": "2021-12-11T15:12:38.067Z", "user": 1, "content_type": 10, "object_id": "16", "object_repr": "Slug", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 444, "fields": {"action_time": "2021-12-11T15:13:03.665Z", "user": 1, "content_type": 10, "object_id": "7", "object_repr": "Migrations", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 445, "fields": {"action_time": "2021-12-11T15:13:22.464Z", "user": 1, "content_type": 10, "object_id": "8", "object_repr": "Registering a model in the admin panel", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 446, "fields": {"action_time": "2021-12-11T21:46:26.231Z", "user": 1, "content_type": 10, "object_id": "18", "object_repr": "Forms", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 447, "fields": {"action_time": "2021-12-11T21:47:16.188Z", "user": 1, "content_type": 10, "object_id": "19", "object_repr": "Arguments for form fields", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 448, "fields": {"action_time": "2021-12-11T21:47:52.610Z", "user": 1, "content_type": 10, "object_id": "20", "object_repr": "Styling the form", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 449, "fields": {"action_time": "2021-12-11T21:48:25.104Z", "user": 1, "content_type": 10, "object_id": "21", "object_repr": "Model-related forms", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 450, "fields": {"action_time": "2021-12-11T21:48:49.701Z", "user": 1, "content_type": 10, "object_id": "22", "object_repr": "Custom validators", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"HTML Content\", \"URL-name\"]}}]"}}, {"model": "admin.logentry", "pk": 451, "fields": {"action_time": "2021-12-11T21:51:44.149Z", "user": 1, "content_type": 10, "object_id": "4", "object_repr": "Models", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 452, "fields": {"action_time": "2021-12-11T21:53:45.895Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Model type fields", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 453, "fields": {"action_time": "2021-12-11T21:54:14.365Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Model type fields", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 454, "fields": {"action_time": "2021-12-11T21:54:59.219Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Model type fields", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 455, "fields": {"action_time": "2021-12-11T21:57:09.420Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Model type fields", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 456, "fields": {"action_time": "2021-12-11T21:57:30.020Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Model type fields", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 457, "fields": {"action_time": "2021-12-11T21:58:02.830Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Model type fields", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 458, "fields": {"action_time": "2021-12-11T21:58:18.240Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Model type fields", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 459, "fields": {"action_time": "2021-12-11T21:59:22.216Z", "user": 1, "content_type": 10, "object_id": "4", "object_repr": "Models", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 460, "fields": {"action_time": "2021-12-11T21:59:40.615Z", "user": 1, "content_type": 10, "object_id": "4", "object_repr": "Models", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 461, "fields": {"action_time": "2021-12-11T22:00:07.003Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Model type fields", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 462, "fields": {"action_time": "2021-12-11T22:00:43.103Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Model type fields", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 463, "fields": {"action_time": "2021-12-11T22:02:39.759Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Model type fields", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 464, "fields": {"action_time": "2021-12-11T22:03:07.804Z", "user": 1, "content_type": 10, "object_id": "18", "object_repr": "Forms", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 465, "fields": {"action_time": "2021-12-11T22:03:27.650Z", "user": 1, "content_type": 10, "object_id": "18", "object_repr": "Forms", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 466, "fields": {"action_time": "2021-12-11T22:04:01.511Z", "user": 1, "content_type": 10, "object_id": "18", "object_repr": "Forms", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 467, "fields": {"action_time": "2021-12-11T22:04:36.563Z", "user": 1, "content_type": 10, "object_id": "18", "object_repr": "Forms", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 468, "fields": {"action_time": "2021-12-11T22:05:25.912Z", "user": 1, "content_type": 10, "object_id": "18", "object_repr": "Forms", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 469, "fields": {"action_time": "2021-12-11T22:05:48.624Z", "user": 1, "content_type": 10, "object_id": "18", "object_repr": "Forms", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 470, "fields": {"action_time": "2021-12-11T22:06:49.616Z", "user": 1, "content_type": 10, "object_id": "21", "object_repr": "Model-related forms", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 471, "fields": {"action_time": "2021-12-12T08:57:39.903Z", "user": 1, "content_type": 10, "object_id": "22", "object_repr": "Custom validators", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\", \"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 472, "fields": {"action_time": "2021-12-12T09:35:46.137Z", "user": 1, "content_type": 10, "object_id": "22", "object_repr": "Custom validators", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 473, "fields": {"action_time": "2021-12-12T11:22:21.332Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "What is Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 474, "fields": {"action_time": "2021-12-12T11:23:03.996Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "What is Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 475, "fields": {"action_time": "2021-12-12T11:32:52.606Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "What is Django", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 476, "fields": {"action_time": "2021-12-12T13:05:10.974Z", "user": 1, "content_type": 10, "object_id": "18", "object_repr": "Forms", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 477, "fields": {"action_time": "2021-12-12T13:06:32.733Z", "user": 1, "content_type": 10, "object_id": "18", "object_repr": "Forms", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 478, "fields": {"action_time": "2021-12-12T13:06:57.249Z", "user": 1, "content_type": 10, "object_id": "18", "object_repr": "Forms", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 479, "fields": {"action_time": "2021-12-12T13:08:25.925Z", "user": 1, "content_type": 10, "object_id": "20", "object_repr": "Styling the form", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"HTML Content\"]}}]"}}, {"model": "admin.logentry", "pk": 480, "fields": {"action_time": "2021-12-12T13:42:39.810Z", "user": 1, "content_type": 10, "object_id": "56", "object_repr": "aaa", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 481, "fields": {"action_time": "2021-12-12T13:52:35.044Z", "user": 1, "content_type": 9, "object_id": "10", "object_repr": "What is Django", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 482, "fields": {"action_time": "2021-12-12T13:52:56.688Z", "user": 1, "content_type": 10, "object_id": "56", "object_repr": "aaa", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 483, "fields": {"action_time": "2021-12-12T13:53:42.280Z", "user": 1, "content_type": 9, "object_id": "22", "object_repr": "Другое", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"}}, {"model": "admin.logentry", "pk": 484, "fields": {"action_time": "2021-12-12T13:54:44.080Z", "user": 1, "content_type": 9, "object_id": "22", "object_repr": "User's post", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 485, "fields": {"action_time": "2021-12-12T14:02:51.755Z", "user": 1, "content_type": 10, "object_id": "57", "object_repr": "ww", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 486, "fields": {"action_time": "2021-12-12T14:03:08.740Z", "user": 1, "content_type": 10, "object_id": "57", "object_repr": "ww", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 487, "fields": {"action_time": "2021-12-12T14:04:13.123Z", "user": 1, "content_type": 10, "object_id": "20", "object_repr": "Styling the form", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 488, "fields": {"action_time": "2021-12-12T17:18:26.532Z", "user": 1, "content_type": 9, "object_id": "23", "object_repr": "What is Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\", \"Slug\", \"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 489, "fields": {"action_time": "2021-12-12T17:18:34.148Z", "user": 1, "content_type": 9, "object_id": "22", "object_repr": "User's post", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 490, "fields": {"action_time": "2021-12-12T17:18:38.696Z", "user": 1, "content_type": 9, "object_id": "23", "object_repr": "What is Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 491, "fields": {"action_time": "2021-12-12T18:16:54.388Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "What is Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Author\"]}}]"}}, {"model": "admin.logentry", "pk": 492, "fields": {"action_time": "2021-12-12T18:21:57.606Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "What is Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Subcategory\"]}}]"}}, {"model": "admin.logentry", "pk": 493, "fields": {"action_time": "2021-12-12T18:40:33.601Z", "user": 1, "content_type": 10, "object_id": "55", "object_repr": "Test 1", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\", \"Category\", \"Subcategory\", \"URL-name\", \"Author\"]}}]"}}, {"model": "admin.logentry", "pk": 494, "fields": {"action_time": "2021-12-12T18:40:44.606Z", "user": 1, "content_type": 10, "object_id": "57", "object_repr": "ww", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 495, "fields": {"action_time": "2021-12-12T18:40:46.221Z", "user": 1, "content_type": 10, "object_id": "58", "object_repr": "sss", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 496, "fields": {"action_time": "2021-12-12T18:40:53.790Z", "user": 1, "content_type": 10, "object_id": "60", "object_repr": "dd", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 497, "fields": {"action_time": "2021-12-12T18:40:55.021Z", "user": 1, "content_type": 10, "object_id": "59", "object_repr": "dddd", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 498, "fields": {"action_time": "2021-12-12T18:43:58.498Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "What is Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Author\"]}}]"}}, {"model": "admin.logentry", "pk": 499, "fields": {"action_time": "2021-12-12T18:43:58.501Z", "user": 1, "content_type": 10, "object_id": "55", "object_repr": "Test 1", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Author\", \"Publish\"]}}]"}}, {"model": "admin.logentry", "pk": 500, "fields": {"action_time": "2021-12-12T18:47:59.521Z", "user": 1, "content_type": 10, "object_id": "55", "object_repr": "Test 1", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Author\"]}}]"}}, {"model": "auth.group", "pk": 1, "fields": {"name": "admin", "permissions": []}}, {"model": "auth.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$260000$OI3wPXKFhbK4KCXm4oNu3f$N519MJaJFn/o2AgIIeRhKcTA9GJC9XgY6EXbvKrnM4I=", "last_login": "2021-12-13T07:21:16.334Z", "is_superuser": true, "username": "diana", "first_name": "", "last_name": "", "email": "dianamatkava@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2021-11-09T12:19:26Z", "groups": [1], "user_permissions": []}}, {"model": "auth.user", "pk": 2, "fields": {"password": "pbkdf2_sha256$260000$YLxtmkEPERJ4CPlDKddmBs$mwMjST3QXeV8NoMPfVKyWtklRfuJXxiFwkngYp/XXhQ=", "last_login": "2021-12-12T17:47:35.357Z", "is_superuser": false, "username": "user1", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T09:54:36.824Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 3, "fields": {"password": "pbkdf2_sha256$260000$Lxta1Dd8b6YUg3nTQ92Aoq$PBNZaDrgoeQ6pv3szqg1GKQfpbwJTPvYuG96bGEamhg=", "last_login": "2021-12-06T17:33:44.918Z", "is_superuser": false, "username": "user2", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T09:59:48.218Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 4, "fields": {"password": "pbkdf2_sha256$260000$zr2Nnmx86OSut1wzgphpNb$fCGkbHOvmZzG5d4QUJbrszGAtmbhL7yPjHYUtdLKWDw=", "last_login": null, "is_superuser": false, "username": "user3", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T10:26:44.621Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 5, "fields": {"password": "pbkdf2_sha256$260000$fjCrZbsOwNTpFbzozcy8uJ$CuHvGRnaR2vKDRfwvM4tESnBCmrUTk+zWK1BrkXFqrk=", "last_login": null, "is_superuser": false, "username": "user4", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T10:27:56.915Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 6, "fields": {"password": "pbkdf2_sha256$260000$dhLXbvudxq68ZGer9QQYbp$3PwDT1IgF9p7HJLc6RQLhuvQrlM7j76n4fo03wMbWfo=", "last_login": null, "is_superuser": false, "username": "user5", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T10:49:19.381Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 7, "fields": {"password": "pbkdf2_sha256$260000$7Hoduum3bK2QLI7dLgtKTF$vcr8hmCKBWwzC5IKL9JkrKP4ip5MQ9+75dGrav3ShxU=", "last_login": null, "is_superuser": false, "username": "user6", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T10:52:31.194Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 8, "fields": {"password": "pbkdf2_sha256$260000$h33sbzyxs39Vh2NdhWsfjn$HLueBsIiLMqCx/MkcLiYsh1cM5kSSQDppgWNz5Yc58E=", "last_login": null, "is_superuser": false, "username": "user7", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T10:54:09.953Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 9, "fields": {"password": "pbkdf2_sha256$260000$2GD4TaN6i7CPtdTE20OsiW$U522+bWpS+/781hW6bX2/9Y2C7Vmlrhc7vxLuWJYb04=", "last_login": null, "is_superuser": false, "username": "user8", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T11:08:05.246Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 10, "fields": {"password": "pbkdf2_sha256$260000$BXx7FnXA3tjlM047Mmlx4v$GhpUBCgCdW5AkofnfQWYSQWwK0fW/7bVE56g7APmkHA=", "last_login": null, "is_superuser": false, "username": "user9", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T11:09:33.711Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 11, "fields": {"password": "pbkdf2_sha256$260000$pTaFxjecKBrhBWYoYljrqC$yBC3k/dxDWa2uOlIwyiHPNFbp5tTqJIunIpkT0WN1ZU=", "last_login": null, "is_superuser": false, "username": "user10", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T11:10:24.655Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 12, "fields": {"password": "pbkdf2_sha256$260000$MV6JpkPpTBVk9gyp6uigxi$hRIywoKugKXLxZKfBGPoVfSDknRQQuZxr8Xnq5Pai34=", "last_login": null, "is_superuser": false, "username": "user11", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T11:49:44.946Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 13, "fields": {"password": "pbkdf2_sha256$260000$PgsPpQrbP3VupfqSHixqJi$5rlNNeLB8HCA41UYqjTHZAgtc0aEg0nWPjOyDHUoRi0=", "last_login": null, "is_superuser": false, "username": "user13", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T11:51:03.067Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 14, "fields": {"password": "pbkdf2_sha256$260000$7jOev5ChN2QHDpsvgUIGGy$prXm//N5WbSnKEuqw+RJ6gjhjn9syMUpbGqxzAWQtGs=", "last_login": null, "is_superuser": false, "username": "user15", "first_name": "", "last_name": "", "email": "user15@mail.ru", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T12:22:15.213Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 15, "fields": {"password": "pbkdf2_sha256$260000$dKiV4w1hVWNYdKHRbCNNPL$bqXAR2/XeNA2sWBxxfpniuudflVuhnOpHNNPjsIFiRA=", "last_login": null, "is_superuser": false, "username": "user16", "first_name": "", "last_name": "", "email": "user16@mail.com", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T12:27:54.446Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 16, "fields": {"password": "pbkdf2_sha256$260000$cBH3aIkPC2y1PEdYtlA0JV$njKwR3u5+O4s7lS9WJY5Gs7OLVJCeBVX2QkMkpq5K5w=", "last_login": null, "is_superuser": false, "username": "user18", "first_name": "", "last_name": "", "email": "user18@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T18:07:26.414Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 17, "fields": {"password": "pbkdf2_sha256$260000$hF1Z2KNy7efWHI3lkgXDbq$9Spu3PqNPMoPN3JdlQP9pi2fUL9Eklg/OmHs8S3aFA4=", "last_login": null, "is_superuser": false, "username": "user19", "first_name": "", "last_name": "", "email": "user18@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T18:12:18.029Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 18, "fields": {"password": "pbkdf2_sha256$260000$f6rPRy1UrXY74iyCjTOLuj$1pdW3twLtmYulNRRFrHDSADG0U14lABXo6xgHCqVs8Y=", "last_login": null, "is_superuser": false, "username": "user21", "first_name": "", "last_name": "", "email": "user18@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2021-12-06T18:14:23.499Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 19, "fields": {"password": "pbkdf2_sha256$260000$K0am3aypruYioddPbSWHvP$NsMdiQqkNLUY9yxTouNs+B9cEjnbFiyNrqmRwG+ogzM=", "last_login": "2021-12-08T21:15:16.054Z", "is_superuser": false, "username": "user20", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-08T21:15:15.048Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 20, "fields": {"password": "pbkdf2_sha256$260000$vmU0GRPkrWqETg0QD9AkkM$RDeCtQt2BPYuJf1ocIgSr0MSxKazkFkpM/hqz8urFLA=", "last_login": "2021-12-08T21:16:39.745Z", "is_superuser": false, "username": "user22", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-08T21:16:39.109Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 21, "fields": {"password": "pbkdf2_sha256$260000$1RaiUZn2y7JOf52nS5wktp$9UFGkXjyGnEBwBpYun62f1KSs2wiF8DkhDWPHZEBEyg=", "last_login": "2021-12-08T21:21:15.392Z", "is_superuser": false, "username": "user23", "first_name": "", "last_name": "", "email": "user23@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2021-12-08T21:21:14.958Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 22, "fields": {"password": "pbkdf2_sha256$260000$sK9A6zeS6HFiYT9yfhHRhU$99+ZBAIBkcAQZdSxWpdSWG057sgjzSIymtzLWaewHOI=", "last_login": "2021-12-08T21:22:02.755Z", "is_superuser": false, "username": "user25", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2021-12-08T21:22:02.334Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 23, "fields": {"password": "pbkdf2_sha256$260000$UeIk0JFjs3RFWEmfExy97S$x5nuq3fCRopK0edrcA3WQx3HyWy1Deaoq9LoLvQZIgU=", "last_login": "2021-12-09T07:01:07.627Z", "is_superuser": false, "username": "user26", "first_name": "", "last_name": "", "email": "user26@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2021-12-09T07:01:06.809Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 24, "fields": {"password": "pbkdf2_sha256$260000$uPh0aHcwSMWV9ZFTCFK3ou$GR8hV3fNhbvvW9x8oYSLX7z2CpGt2Ccr25HfGG6V2HA=", "last_login": "2021-12-10T09:57:00.738Z", "is_superuser": false, "username": "user27", "first_name": "", "last_name": "", "email": "user27@mail.ru", "is_staff": false, "is_active": true, "date_joined": "2021-12-10T09:57:00.471Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 25, "fields": {"password": "pbkdf2_sha256$260000$0geGQlB4yuHCw4GAHgEDW1$NWRYOkXzvVnPaaNnsfQLbJ2ntrt2yPN/GnYpLWqTwko=", "last_login": "2021-12-12T10:16:39.728Z", "is_superuser": false, "username": "miranda", "first_name": "", "last_name": "", "email": "scodemiro@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2021-12-12T10:16:39.474Z", "groups": [], "user_permissions": []}}, {"model": "sessions.session", "pk": "04l1q3o1vy1o9depg173mii94spusu2x", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGqAwu3XsGMgyjVA1NSrsy3l2bdKHb_977L5VoXWpau8xpLOqkQB1-t0z8kLaBcqd2mzRPbZnHrDdF77Try1Tked7dv4NKvX5rhGzjgAHEQ_AQmb03DoNBEk9cJBCYK3K02dtAgwNTmARNxqMLLqr3B71sNw8:1mt3xc:IX9YC4USvm9oYNR3YD2tGcpaaldbpMehBAOXZBoVwF8", "expire_date": "2021-12-17T08:30:28.423Z"}}, {"model": "sessions.session", "pk": "18gvj6exj4d9ngatvyd4cice36v3chth", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGqAwu3XsGMgyjVA1NSrsy3l2bdKHb_977L5VoXWpau8xpLOqkQB1-t0z8kLaBcqd2mzRPbZnHrDdF77Try1Tked7dv4NKvX5rhGzjgAHEQ_AQmb03DoNBEk9cJBCYK3K02dtAgwNTmARNxqMLLqr3B71sNw8:1mvDUj:wpFXRJgmQACEvYwjcSgo29YZKc-85kJPCo9xygqwVVg", "expire_date": "2021-12-23T07:05:33.159Z"}}, {"model": "sessions.session", "pk": "3w22iwctkv3n38j6pkllduqarbscae1i", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hA6hQIu3fcMZIYBWzWQlHZlvLtt0oVu_3vvv0XAbZ3C1tISZhZXAUZcfkfC-EzlIPzAcq8y1rIuM8lDkSdtcqycXrfT_TuYsE173YPxhj2brLRnna0ml4xzRDlGbbUCIBwU70IeEliNg7Vdn8hjhk6B-HwBCRI4Ew:1mwLuJ:Jd_RnR4JIwZw7ZcESWHErwLoxAMWoWUqq13PC2XRC1c", "expire_date": "2021-12-26T10:16:39.783Z"}}, {"model": "sessions.session", "pk": "489869r9nomfkmclrnqijv2h9ioggpjj", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hCgDh1duvcMZBgGqRpISrsy3l2bdKHb_977LxVoXUpYu8xhSuqsrDr8bpH4IXUD6U711jS3usxT1Juid9r1tSV5Xnb376BQL9_aCAt7FIQ0mijsHCADk0OxAmIyeXHeWsgDpOzACY7eD4hgE5_oqN4f_QE4Dg:1mvces:PiKPNIGJ7vgKRE0zE4yYscuu33E7iHJ8pDPKi9gs5bs", "expire_date": "2021-12-24T09:57:42.461Z"}}, {"model": "sessions.session", "pk": "5bqf76fzdc580z2ng9xpe0klfpvsd6nf", "fields": {"session_data": "e30:1mv4M3:2AUifkZ-uBe2666moS0ikhxuo1oeC_OkutzchqOehCU", "expire_date": "2021-12-22T21:19:59.859Z"}}, {"model": "sessions.session", "pk": "5mozs21bzfo5852744y0fxpk5illjoky", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hCgDh1duvcMZBgGqRpISrsy3l2bdKHb_977LxVoXUpYu8xhSuqsrDr8bpH4IXUD6U711jS3usxT1Juid9r1tSV5Xnb376BQL9_aCAt7FIQ0mijsHCADk0OxAmIyeXHeWsgDpOzACY7eD4hgE5_oqN4f_QE4Dg:1mvh8z:UGA64GZKiVulq9Q3mbZWQ5JAD-M_M2UyZl-ZPbj0myw", "expire_date": "2021-12-24T14:45:05.909Z"}}, {"model": "sessions.session", "pk": "7q9dfokwi2dcbg9shodwktbst7rbbn13", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGqAwu3XsGMgyjVA1NSrsy3l2bdKHb_977L5VoXWpau8xpLOqkQB1-t0z8kLaBcqd2mzRPbZnHrDdF77Try1Tked7dv4NKvX5rhGzjgAHEQ_AQmb03DoNBEk9cJBCYK3K02dtAgwNTmARNxqMLLqr3B71sNw8:1mqjge:SEftd6zOh4eoK0xsNbRvWi1gVOUB_t3hIZZOS49-HAU", "expire_date": "2021-12-10T22:27:20.829Z"}}, {"model": "sessions.session", "pk": "9mi6lpssvmh4vmfs9o6mt94s9drx1tej", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGqAwu3XsGMgyjVA1NSrsy3l2bdKHb_977L5VoXWpau8xpLOqkQB1-t0z8kLaBcqd2mzRPbZnHrDdF77Try1Tked7dv4NKvX5rhGzjgAHEQ_AQmb03DoNBEk9cJBCYK3K02dtAgwNTmARNxqMLLqr3B71sNw8:1msrxG:3U_V7wG7onQyurxfBuyh-gaiK4MU7OeVfZynqotAwv0", "expire_date": "2021-12-16T19:41:18.594Z"}}, {"model": "sessions.session", "pk": "acr5t5qxk1akvkkxms0t925hdt03dtz4", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGqAwu3XsGMgyjVA1NSrsy3l2bdKHb_977L5VoXWpau8xpLOqkQB1-t0z8kLaBcqd2mzRPbZnHrDdF77Try1Tked7dv4NKvX5rhGzjgAHEQ_AQmb03DoNBEk9cJBCYK3K02dtAgwNTmARNxqMLLqr3B71sNw8:1msrnO:kgERH_A8MTowDxhXyTtqvrFP1ShrRduaB-9o77SDUMo", "expire_date": "2021-12-16T19:31:06.054Z"}}, {"model": "sessions.session", "pk": "e0pyga8bmwif1ud0vfx5bex0sk05smb1", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGqAwu3XsGMgyjVA1NSrsy3l2bdKHb_977L5VoXWpau8xpLOqkQB1-t0z8kLaBcqd2mzRPbZnHrDdF77Try1Tked7dv4NKvX5rhGzjgAHEQ_AQmb03DoNBEk9cJBCYK3K02dtAgwNTmARNxqMLLqr3B71sNw8:1mus1u:7ZsbrpqWKdUYai9hvoWHA_xPTsoWzhuiw1T_cC4eLjI", "expire_date": "2021-12-22T08:10:22.789Z"}}, {"model": "sessions.session", "pk": "ecicxhfw4p4kx9lei0s856gkrx4mgsku", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGqAwu3XsGMgyjVA1NSrsy3l2bdKHb_977L5VoXWpau8xpLOqkQB1-t0z8kLaBcqd2mzRPbZnHrDdF77Try1Tked7dv4NKvX5rhGzjgAHEQ_AQmb03DoNBEk9cJBCYK3K02dtAgwNTmARNxqMLLqr3B71sNw8:1mus4E:4z4gcIKy-Ig817Lr_oX7-x5LSim4U0YG6ukcSwRNyZ8", "expire_date": "2021-12-22T08:12:46.899Z"}}, {"model": "sessions.session", "pk": "fvxl5cfscc7ol8agibovm506lvoh8niq", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGqAwu3XsGMgyjVA1NSrsy3l2bdKHb_977L5VoXWpau8xpLOqkQB1-t0z8kLaBcqd2mzRPbZnHrDdF77Try1Tked7dv4NKvX5rhGzjgAHEQ_AQmb03DoNBEk9cJBCYK3K02dtAgwNTmARNxqMLLqr3B71sNw8:1muftx:aACTbAtkL2zAh57xRDiMYyTf5TmNoyj0LoVc7pQHOko", "expire_date": "2021-12-21T19:13:21.027Z"}}, {"model": "sessions.session", "pk": "gbzhmn9l0c04835rd60ecrihi00crbhr", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGqAwu3XsGMgyjVA1NSrsy3l2bdKHb_977L5VoXWpau8xpLOqkQB1-t0z8kLaBcqd2mzRPbZnHrDdF77Try1Tked7dv4NKvX5rhGzjgAHEQ_AQmb03DoNBEk9cJBCYK3K02dtAgwNTmARNxqMLLqr3B71sNw8:1msqvr:LCVA0p09n__JyshznP8DWGeTqDFUmoWWVYQJElNzO-U", "expire_date": "2021-12-16T18:35:47.310Z"}}, {"model": "sessions.session", "pk": "mg10lscg2hnhm0c0gbgjj19kmc5g0j13", "fields": {"session_data": "e30:1mv369:j_qv30vhsIn2GDqrI1lfKbeDKhfLein4xLyB9aU7w4M", "expire_date": "2021-12-22T19:59:29.451Z"}}, {"model": "sessions.session", "pk": "oey6xv0k8bom5edstkgxutwzj9ftebti", "fields": {"session_data": "e30:1mv4HT:0ADIXgl5GbfewjO6V0HQ0kJ4hGfu0qtH9Ut0_NllUNw", "expire_date": "2021-12-22T21:15:15.581Z"}}, {"model": "sessions.session", "pk": "sv2qjua5nimzsup6weqrq1djslgru54b", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGqAwu3XsGMgyjVA1NSrsy3l2bdKHb_977L5VoXWpau8xpLOqkQB1-t0z8kLaBcqd2mzRPbZnHrDdF77Try1Tked7dv4NKvX5rhGzjgAHEQ_AQmb03DoNBEk9cJBCYK3K02dtAgwNTmARNxqMLLqr3B71sNw8:1mt4X6:34E_wXzg_gLGsKN2foxmqDH9atscfZqvZm-r3lkVL9E", "expire_date": "2021-12-17T09:07:08.945Z"}}, {"model": "sessions.session", "pk": "ug4g3d24hvenvrckxpz7g6gab3shugat", "fields": {"session_data": "MjEyZTZhNWUxYzQ0M2M2MmVlMzYyNzVlODcyNTUzM2UzZjA5NjVjZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZjNjZDg1OTgxNTRjMmNmNGY3NDdlOTAxNjg0YjhlNTUwMDg2ODU1In0=", "expire_date": "2021-11-23T12:19:37.488Z"}}, {"model": "sessions.session", "pk": "vgx2sd31o3n21l64xhevw53ic0fvb4x5", "fields": {"session_data": "e30:1mv35I:yRvpC5FLiI6oVHKTT28FE3uK-NBHaqTxjF5Qlh8WYRs", "expire_date": "2021-12-22T19:58:36.325Z"}}, {"model": "sessions.session", "pk": "vw4etagd2optge8rneqb23zhhoa9a8hm", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hCgDh1duvcMZBgGqRpISrsy3l2bdKHb_977LxVoXUpYu8xhSuqsrDr8bpH4IXUD6U711jS3usxT1Juid9r1tSV5Xnb376BQL9_aCAt7FIQ0mijsHCADk0OxAmIyeXHeWsgDpOzACY7eD4hgE5_oqN4f_QE4Dg:1mvjcA:TB2xhVHv_l4LVfFTrgKykvKrMCoR3xrjIwH5dmASt9Y", "expire_date": "2021-12-24T17:23:22.585Z"}}, {"model": "sessions.session", "pk": "wa01ncn9bmnyreesg6i9oastlsywzq1k", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGqAwu3XsGMgyjVA1NSrsy3l2bdKHb_977L5VoXWpau8xpLOqkQB1-t0z8kLaBcqd2mzRPbZnHrDdF77Try1Tked7dv4NKvX5rhGzjgAHEQ_AQmb03DoNBEk9cJBCYK3K02dtAgwNTmARNxqMLLqr3B71sNw8:1mt4U6:YIjHW_-S0CTrX47P3B0Cj9phpZRcg-2Q7a88jdEDYFE", "expire_date": "2021-12-17T09:04:02.553Z"}}, {"model": "captcha.captchastore", "pk": 36, "fields": {"challenge": "CXIB", "response": "cxi", "hashkey": "577fbb8c270768dc9de1457435e982901356ad58", "expiration": "2021-12-08T20:02:10.732Z"}}, {"model": "captcha.captchastore", "pk": 37, "fields": {"challenge": "VHSS", "response": "vhss", "hashkey": "8ffbf20126dbf20dc2f26c89ba44bf2af6ccf602", "expiration": "2021-12-09T06:54:44.468Z"}}, {"model": "captcha.captchastore", "pk": 38, "fields": {"challenge": "NKAK", "response": "nkak", "hashkey": "25f5ef2820880ac608e9da5125f67cd571f36b41", "expiration": "2021-12-10T11:04:46.512Z"}}, {"model": "captcha.captchastore", "pk": 39, "fields": {"challenge": "JVAT", "response": "jvat", "hashkey": "876f317f1f6bee72ae961a371b54cf1266ebc896", "expiration": "2021-12-12T12:59:50.203Z"}}, {"model": "captcha.captchastore", "pk": 40, "fields": {"challenge": "TGSO", "response": "tgso", "hashkey": "58fa2ec1ec5cc7025286bbbca2625a3e1e76e96f", "expiration": "2021-12-12T14:00:22.570Z"}}, {"model": "captcha.captchastore", "pk": 41, "fields": {"challenge": "IQIS", "response": "iqis", "hashkey": "92958091439e9e64e69f968104e3194594a5651e", "expiration": "2021-12-12T14:09:40.287Z"}}, {"model": "captcha.captchastore", "pk": 42, "fields": {"challenge": "NHMC", "response": "nhmc", "hashkey": "29eeab1d647373945e126c69c92f42608541df6e", "expiration": "2021-12-12T14:17:21.105Z"}}, {"model": "captcha.captchastore", "pk": 43, "fields": {"challenge": "FQOC", "response": "fqoc", "hashkey": "cc5c7c2ba5819e0b02e482c9470e1d1391761368", "expiration": "2021-12-12T14:18:21.386Z"}}, {"model": "captcha.captchastore", "pk": 44, "fields": {"challenge": "WSNC", "response": "wsnc", "hashkey": "1d43f645b36ca227d669ee1ca5e2cdebc1e8d5a8", "expiration": "2021-12-12T18:58:34.564Z"}}, {"model": "captcha.captchastore", "pk": 45, "fields": {"challenge": "QLOH", "response": "qloh", "hashkey": "769faafc22e17d481d9a18735e8ff5b7d6b06185", "expiration": "2021-12-12T19:35:44.826Z"}}, {"model": "captcha.captchastore", "pk": 46, "fields": {"challenge": "PPMU", "response": "ppmu", "hashkey": "b83912b0e068a54287d88c5ec457fd35cbc9aef4", "expiration": "2021-12-12T19:50:38.371Z"}}, {"model": "captcha.captchastore", "pk": 47, "fields": {"challenge": "DIVC", "response": "divc", "hashkey": "7f3cacabcc9275bc586740216371a0a9e5e9c161", "expiration": "2021-12-12T20:55:05.709Z"}}, {"model": "captcha.captchastore", "pk": 48, "fields": {"challenge": "OEHA", "response": "oeha", "hashkey": "f9bc58c2e0c796c77cf5bd5807e0e42935cb40fc", "expiration": "2021-12-12T20:55:20.491Z"}}, {"model": "captcha.captchastore", "pk": 49, "fields": {"challenge": "QPLA", "response": "qpla", "hashkey": "df9853536695c1515cd5e48f63454161b63bb81c", "expiration": "2021-12-12T21:04:57.215Z"}}, {"model": "captcha.captchastore", "pk": 50, "fields": {"challenge": "ERQU", "response": "erqu", "hashkey": "35a48b17b997c297045d77db304203baa16f21a7", "expiration": "2021-12-12T21:05:33.767Z"}}, {"model": "captcha.captchastore", "pk": 51, "fields": {"challenge": "PEPT", "response": "pept", "hashkey": "93668ab984dcf4427224ce860c42e0f627a1affc", "expiration": "2021-12-13T06:56:41.555Z"}}, {"model": "captcha.captchastore", "pk": 52, "fields": {"challenge": "JIUP", "response": "jiup", "hashkey": "36a832a7828323b190d0cd9235f35ce6032cf7e4", "expiration": "2021-12-13T10:45:18.353Z"}}, {"model": "home.topic", "pk": 1, "fields": {"title": "What is Django", "description": "", "content": "", "html_content": "<p> <b> Django </b> is an open source framework written using the <b> Python </b> language used to write a web application. Django is the same as Ruby on Rails; React, Vue or JQuery for js. Django inherits the <b> MVC </b> (Model-View-Controller) or <b> MTV </b> (Models-Templates-Views) design pattern. <b> MVC </b> is a scheme for dividing data into three component parts where: </p>\r\n<br> <b> Models </b> is responsible for the business logic of the application, creating a table database\r\n<br> <b> View </b> is responsible for the data view patterns from the\r\n<br> <b> Controller </b> interprets user actions,\r\n<p> In Django, you can create several applications, and it is recommended to create them as independent of each other as possible, so that you can use the same application in different projects. This is one of the significant architectural differences of this framework from some others (for example Ruby on Rails). One of the basic principles of the framework is <b> DRY </b> (Don't repeat yourself) </p>\r\n<p> To work with the database, Django uses its own <b> ORM </b>, in which the model (table ) database is described by Python classes </p>\r\n\r\n<h3> Creating your first Django application </h3>\r\n<p> In order to create a Django project, it is recommended to first create a virtual environment into which all the necessary packages and libraries will be loaded, this will protect the computer from clogging and separate the project from others projects. Therefore, go to the desired directory and write: <code> user $ python3 -m venv name </code> </p>\r\n<p> Next, you need to activate the virtual environment for further use:\r\n<code> user $ source bin / activate </ code > </p>\r\n<p> Using the following command, you can see what packages, modules and applications are available in our virtual environment, since we created it just now it should be clean: <code> (venv) user $ pip list </ code> </p>\r\n<p> You can install Django using the following command: <code> (venv) user $ pip install Django </code>: </p>\r\n<p> To see all the available Django commands, just write: <code> (venv) user $ django-admin </code> </p>\r\n<p> Now let's start creating a Django project: <code> (venv) user $ django-admin startproject name </code> </p>\r\n<p> In a virtual environment a new directory is created with the name of the project, which contains the files responsible for setting up the entire project, routing, administration, etc. </p>\r\n\r\n<p> While no applications have been created, we have access to the start page that Django provides by default, which indicates a successful start. To access the page, you need to enter the project directory and start the local server with the following command: <code> (venv) user $ python3 manage.py runserver </code> </p>\r\n\r\n<p> It's time to create an application: <code> (venv) user $ python3 manage.py startapp name </code> </p>\r\n<p> By typing this command, Django creates a new folder with files that are responsible for models, view functions, administration and so on of our application </p>\r\n<p> After creating applications, you need to register it in the Django configuration file - <b> INSTALLED_APPS </b>. Although it will be enough to write only the name of the application, it is still desirable to specify the full path to the application class, the name of which can be found in the file <b> apps.py </b>. It will look like this: </p>\r\n<pre><code>\r\n---settings.py\r\n\r\nINSTALLED_APPS = [\r\n. ... ...\r\n'name.apps.ClassName',\r\n]\r\n</code></pre>", "data": "2021-11-09T12:52:10.551Z", "update_data": "2021-12-12T18:43:58.495Z", "is_published": true, "image": "", "category": 3, "subcategory": 23, "slug": "what-is-django", "author": null}}, {"model": "home.topic", "pk": 2, "fields": {"title": "URL links", "description": "", "content": "", "html_content": "<p> In the project directory there is a file <b> urls.py </b> which is responsible for routing. It initially contains the following: </p>\r\n<pre> <code>\r\nfrom django.contrib import admin\r\nfrom django.urls import path\r\n\r\nurlpatterns = [\r\npath ('admin /', admin.site.urls),\r\n]\r\n</code> </pre>\r\n<p> To create a new route to the old man from the application, you need to import functions (or classes) of the page view from the <b> views.py </b> file: <code> from path.file import def </ code > </p>\r\n<p> Where <b> path </b> is the name of the project folder, <b> file </b> is the <b> views </b> file that is responsible for displaying, and <b> def </b>\r\n<p> Next, in the <b> urlpatterns </b> variable, using the <b> path </b> function, the first parameter describes the name of the address bar (path), and the second - a link to the view function </p>\r\n<pre > <code>\r\n---urls.py\r\n\r\nurlpatterns = [\r\npath ('name /', def),\r\n]\r\n</code> </pre>\r\n<p> It means that when accessing such an address bar <b> 'name /' </b>, the browser should call the function <b> def </b> </p>", "data": "2021-12-02T09:20:20.410Z", "update_data": "2021-12-11T14:48:49.119Z", "is_published": true, "image": "", "category": 3, "subcategory": 2, "slug": "url-links", "author": null}}, {"model": "home.topic", "pk": 3, "fields": {"title": "List of nested routes", "description": "", "content": "", "html_content": "<p> As the second parameter, it is possible and recommended to use a list of nested routes </p>\r\n<p> To do this, create a file <b> urls.py </b> in the application and write the necessary paths in it. Next, in the <b> urls.py </b> file in the project directory, import the <b> include () </b> function. Now, for the second parameter of the <b> path </b> function, we will use the <b> include () </b> function and pass the path to the routes file there </p>\r\n<pre> <code>\r\n---urls.py\r\n\r\nfrom django.contrib import admin\r\nfrom django.urls import path, include\r\n\r\nurlpatterns = [\r\npath ('admin /', admin.site.urls),\r\npath ('name /', include ('path.urls'))\r\n]\r\n</ code> </pre>", "data": "2021-12-02T09:22:17.629Z", "update_data": "2021-12-11T14:50:51.016Z", "is_published": true, "image": "", "category": 3, "subcategory": 2, "slug": "list-of-nested-routes", "author": null}}, {"model": "home.topic", "pk": 4, "fields": {"title": "Models", "description": "", "content": "", "html_content": "<p> The file <b> models.py </b> contains the table parameters for creating a database. Models are described by classes, classes are described by attributes. Attributes represent corresponding fields in database tables. Below is an example of creating a model: </p>\r\n<pre> <code>\r\n---models.py\r\n\r\nfrom django.db import models\r\n\r\n# Create your models here.\r\n#All models are subclass of the django.db.models.Model class.\r\n#Each class will be transformed into database tables.\r\n\r\nclass Product (models.Model):\r\ntitle = model.CharField ('name', max_length = 150)\r\ncontent = model.TextField ('name', max_length = 50000)\r\ncreated_at = models.DateTimeField ('name', auto_now_add = True)\r\nupdated_at = models.DateTimeField (auto_now = True)\r\nphoto = models.ImageField (upload_to = 'path')\r\nis_published = modelsBoolean (default = True)\r\n\r\ndef str (self):\r\nreturn self.attribute\r\n</code> </pre>\r\n<p class = \"description\"> The <b> str </b> method is intended for string display of an object </p>", "data": "2021-12-02T09:24:10.132Z", "update_data": "2021-12-11T21:59:40.613Z", "is_published": true, "image": "", "category": 3, "subcategory": 3, "slug": "models", "author": null}}, {"model": "home.topic", "pk": 5, "fields": {"title": "Model type fields", "description": "", "content": "", "html_content": "<div class = 'container'> <code> CharField </code> - used for small text field <br>\r\n<b> Required argument </b>: <code> max_length </code> (limits the number of characters) </ div>\r\n<div class = 'container'> <code> TextField </code> - used for large text field </div>\r\n<div class = 'container'> <code> DateFiled </code> - field for storing date < / div>\r\n<div class = 'container'> <code> DateTimeField </code> - field for storing date and exact time <br>\r\n<b> Arguments </b>: <br> <code> auto_now </code> - updated automatically when the <br>\r\n<code> object is updatedauto_naw_add </code> - automatically created when creating an object </div>\r\n\r\n<div class = 'container'> <code> Boolean </code> - true / false <br>\r\n<b> Arguments </b>: <code> default </code> = True / False </div>\r\n\r\n<div class = 'container'> <code> ForeignKey </code> is a many-to-one relationship.\r\n<br> <b> Required arguments </b>: <br> <code> model </code> to link to <br>\r\n<code> on_delete </code> is a parameter that sets actions in case of deletion related object </div>\r\n\r\n<br> <div class = 'container'> <b> Additional arguments </b>:\r\n<p> <code> blank = True </code> - makes the field optional <br>\r\n<code> unique = True </code > - the field must be unique <br>\r\n<code> default = value </code> - the default value <br>\r\n<code> db_index = True </code> - sets the index for the field, making it fast to find <br>\r\n<code> verbose_name </code> - defines the constant name <br>\r\n<code> NULL = True / False </code> - sets the field value to NULL, i.e. without data </p> </div>\r\n\r\n<br> <div class = 'container'> <code> FileField </code> - allows you to upload files <br>\r\n<code> ImageField </code> - allows you to upload only photos <br>\r\n<b> Arguments </b> : <code> upload_to = 'path' </code> - indicates the path where the uploaded files will be saved </div>\r\n\r\n<p> For <b> FileField </b> and <b> ImageField </b> fields, you must additionally configure the <b> MEDIA_ROOT </b> and <b> MEDIA_URL </b> constants. To do this, add two new directives in the <b> settings.py </b> file: </p>\r\n<pre> <code>\r\n---settings.py\r\n\r\nMEDIA_ROOT = os.path.join (BASE_DIR, 'media')\r\nMEDIA_URL = '/ media /'\r\n</code> </pre>\r\n\r\n<p> Also, so that the uploaded files can be viewed on the site, you must create an appropriate route to these files. In debug mode, this is done using the <b> static </b> function from the <b> django.conf.url.static </b> module, which must be imported in the <b> urls.py </b> file in the project directory ... In the same place, we prescribe an additional condition to apply this path only in debug mode. First, let's import the <b> settings </b> file to take from there the value of the <b> DEBUG </b> constant, which is <b> True </b> in debug mode. After the <b> urlpatterns </b> directive, write the condition: </p>\r\n<pre> <code>\r\n---urls.py\r\n\r\nfrom django.conf.urls.static import static\r\nfrom django.conf import settings\r\n\r\nurlpatterns = [\r\n. ... ...\r\n]\r\nif settings.DEBUG:\r\nurlpatterns + = static (settings.MEDIA_URL, document_root = 'MEDIA_ROOT')\r\n</code> </pre>", "data": "2021-12-02T09:25:05.840Z", "update_data": "2021-12-11T22:02:39.754Z", "is_published": true, "image": "", "category": 3, "subcategory": 3, "slug": "model-type-fields", "author": null}}, {"model": "home.topic", "pk": 6, "fields": {"title": "Creating links between models", "description": "", "content": "", "html_content": "<p> Django provides the ability to create links between models. There are these types of relationships: </p>\r\n<p> <code> ForeignKey </code> - for Many to One relationships <br>\r\n<code> ManyToManyField </code> - for Many to Many relationships <br>\r\n<code> OneToOneField </code> - for One to One links </p>\r\n\r\n<p> In order to create a link, you need to add a new parameter to the list model, which will refer to the <b> id </b> category. In this case, the category model will be primary, and the list will be secondary. Conditionally it will look like this: </p>\r\n<pre> <code>\r\n---models.py\r\n\r\nclass List (models.Model):\r\ntitle = models.CharField (max_length = 100)\r\ncategory = ForeignKey ('Category', on_delete = models.PROTECT, null = True)\r\n\r\ndef __str __ (self):\r\nreturn self.title\r\n\r\nclass Category (models.Model):\r\ntitle = models.CharField (max_length = 20)\r\n\r\ndef __str __ (self):\r\nreturn self.title\r\n</code> </pre>\r\n\r\n<div class = 'container'> <p> The <code> ForeignKey </code> method accepts parameters such as: <br> <br>\r\n<code> Model </code> - link to the category model <br>\r\n<code> on_delete = models.RESTRICTION </code> - defines restrictions when deleting records from a category model </p> </div>\r\n\r\n<div class = 'container'> <p> Restrictions can be as follows: <br> <br>\r\n<code> PROTECT </code> - deleting a category removes all entries from the list <br>\r\n<code> CASCADE </code> - prohibits deleting a model if it is used in the list <br>\r\n<code> SET_NULL / SET_DEFAULT </code> - when deleting a category, sets the <b> ForeignKey </b> value to <b> null / default </b> all entries from the list <br>\r\n<code> SET () </code> - sets a custom value <br>\r\n<code> DO_NOTHING </code> - deleting a category does not cause any action </p>\r\n<p class = \"description\"> <code> null = True </code> - by default in Django all fields must be filled, and if the list is already filled, then using this method Django will apply <b> null </b> to all list items </p> </div>\r\n\r\n<p> For these settings to take effect, you need to register them with the command:\r\n<code> admin.site.register (Name, NameAdmin) </code> </p>", "data": "2021-12-02T09:25:30.582Z", "update_data": "2021-12-11T14:59:47.988Z", "is_published": true, "image": "", "category": 3, "subcategory": 3, "slug": "creating-links-between-models", "author": null}}, {"model": "home.topic", "pk": 7, "fields": {"title": "Migrations", "description": "", "content": "", "html_content": "<p> In order for the model to work, you need to create a migration. <b> Migrations </b> in Django is a way to propagate changes that have been made to models (add a field, remove a model, etc.). <code> makemigratinos </code> will display the available migrations and <code> migrate </code> will create the migration </p>\r\n<pre> <code>\r\n(env) user $ python manage.py makemigratinos\r\n(env) user $ python manage.py migrate\r\n</code> </pre>", "data": "2021-12-02T09:26:28.070Z", "update_data": "2021-12-11T15:13:03.663Z", "is_published": true, "image": "", "category": 3, "subcategory": 3, "slug": "migrations", "author": null}}, {"model": "home.topic", "pk": 8, "fields": {"title": "Registering a model in the admin panel", "description": "", "content": "", "html_content": "<p> After creating a migration, a database table is formed, in order to make edits to model objects or create new ones through the admin panel, you need to register the model. To do this, go to the <b> admin.py </b> file and import the model, then register it using the <b> register </b> function from the <b> admin.site </b> </p>\r\n<pre> <code>\r\n---admin.py\r\nfrom .models import *\r\n\r\nadmin.site.register (Class_Name)\r\n</code> </pre>", "data": "2021-12-02T09:27:14.739Z", "update_data": "2021-12-11T15:13:22.462Z", "is_published": true, "image": "", "category": 3, "subcategory": 3, "slug": "registering-a-model-in-the-admin-panel", "author": null}}, {"model": "home.topic", "pk": 9, "fields": {"title": "Admin panel", "description": "", "content": "", "html_content": "<p> To enter the admin panel and make all the necessary changes to the database objects, you need to create a <b> super user </b>. To do this, go to the terminal and write:\r\n<code> python manage.py createsuperuser </code>. Next, Django will offer to create a username and password, after that everything is ready to go to the admin panel </p>\r\n\r\n<p> The admin panel contains all registered models. Initially, they are displayed by the name of the model, in order to fix this, it is necessary to create a subclass <b> Meta </b> in our model, which will be responsible for displaying information in the admin panel. This meta-class includes many attributes, let's look at some of them: </p>\r\n<pre> <code>\r\n--- models.py\r\n\r\nclass Name (models.Model):\r\nattribut1 = value1\r\nattribut2 = value2\r\nattribut3 = value3\r\n\r\nclass Meta:\r\nverbose_name = 'Name'\r\n# responsible for the name of the model in the singular\r\n\r\nverbose_name_plural = 'Names'\r\n# is responsible for the plural name of the model\r\n\r\nordering = ['date', 'name']\r\n# sorting data in the database table\r\n</code> </pre>\r\n\r\n<p> In order to recruit a different application name (and not by the name of the directory) in the admin panel in the list of applications, go to the file <b> apps.py </b> and write: </p>\r\n<pre> <code>\r\n---apps.py\r\n\r\nclass HomeConfig (AppConfig):\r\ndefault_auto_field = 'django.db.models.BigAutoField'\r\nverbose_name = 'Home'\r\n</code> </pre>\r\n\r\n<p> In the <b> admin.py </b> file, you can configure the required table fields that will be available in the admin panel. This is done using a special editor class in which you can further customize the view of the model in the admin panel. It is usually called by the name of the model and the postfix <b> Admin </b> is added. This editor must be a subclass of <b> admin.ModelAdmin </b>. This class accepts many attributes such as: </p>\r\n<pre> <code>\r\n---admin.py\r\n\r\nclass NameAdmin (admin.ModelAdmin):\r\nlist_display = ('title', 'description', 'date', 'is_published')\r\n# accepts in the form of a list those fields that will be available in the admin panel\r\n\r\nlist_display_links = ('id', 'name')\r\n# fields to which links will be applied\r\n\r\nsearch_fields = ('name', 'content')\r\n# indicates which fields can be searched\r\n\r\nlist_editable = ('is_published',)\r\n# allows you to make changes to the object via the table in the admin panel\r\n\r\nlist_filter = ('date',)\r\n# fields by which filtering will be performed\r\n</code> </pre>", "data": "2021-12-02T09:27:56.313Z", "update_data": "2021-12-11T15:01:23.028Z", "is_published": true, "image": "", "category": 3, "subcategory": 11, "slug": "admin-panel", "author": null}}, {"model": "home.topic", "pk": 10, "fields": {"title": "View functions", "description": "", "content": "", "html_content": "<p> The <b> views.py </b> file creates functions or classes to view the page. To transfer the content from the database table to the page, you need to import the required model. Next, create a function (with the required <b> request </b> parameter) that will display the entire list of database objects. To do this, a variable is set up into which all objects are placed using the <b> objects.all () </b> method. The <b> views.py </b> file now looks like this: </p>\r\n<pre> <code>\r\n---views.py\r\n\r\nfrom django.shortcuts import render\r\nfrom .models import ClassName\r\n\r\ndef name (request):\r\nlist = ClassName.objects.all ()\r\n</code> </pre>\r\n\r\n<h3> Rendering Templates </h3>\r\n<p> The next step will walk you through creating page templates that we can render. <b> Rendering </b> is the process of populating a file (template) with data from the model </p>\r\n<p> By default, Django looks for templates in the <b> templates </b> folder in the application package. Initially, it is missing, so you need to create a new folder in the application directory with this name. It is also recommended to create another folder in it, which will duplicate the name of the application, and then you can create an html file, which is usually called by the name of the action (functions from the file <b> views.py </b>) </p>\r\n<p> Now we need to add output to the view function, in which the <b> render () </b> function will be triggered. This function takes a required parameter <b> request </b> (request object), <b> template name </b> and <b> context </b>, which is expressed by a dictionary, where the key is the name of the variable that will be available in the template, and the value will be any value, for example a list of database objects </p>\r\n<p> Now our <b> views.py </b> contains the following: </p>\r\n<pre> <code>\r\n--- views.py\r\n\r\nfrom django.shortcuts import render\r\nfrom .models import ClassName\r\n\r\ndef name (request):\r\nvalue = ClassName.objects.all ()\r\nreturn render (request, 'path / name.html', {'key': value, 'title': 'anything'})\r\n</code> </pre>", "data": "2021-12-02T09:33:10.429Z", "update_data": "2021-12-11T15:03:08.288Z", "is_published": true, "image": "", "category": 3, "subcategory": 5, "slug": "view-functions", "author": null}}, {"model": "home.topic", "pk": 11, "fields": {"title": "Templates (Jinja2)", "description": "", "content": "", "html_content": "<p> Variables from the <b> context </b> list are now available in the template; they can be inserted into standard html tags. For example, the variable <b> title </b> (which contains the title of the title) can be placed in the <b> & lth1> </b> tag, and the page will display the value of this variable with the styles inherent in this tag. In this case, the variable itself must be enclosed in two opening and closing brackets, like this:\r\n<code> {{title}} </code> </p>\r\n\r\n<p> Since the variable <b> key </b> is a list, we first need to iterate over it and for this we use special meta tags </p>\r\n<p> For each python method, be it a loop or a conditional expression, it is necessary to create an opening block and, after the content of the method, write a closing block </p>\r\n<p> An example of creating a loop that will iterate over a database list is presented below. In addition, the template can call functions from the model. Suppose we have a function <b> __str__ </b>, in order to call it in the template, it is enough to specify the model object and the name of the function </p>\r\n<pre> <code>\r\n--- template.html\r\n\r\n{% for item in key%}\r\n& lt; div>\r\n& lt; p> {{item.attribute1}} & lt; / p>\r\n& lt; p> {{item.attribute2}} & lt; / p>\r\n& lt; p> {{ item.attribute3}} & lt; / p>\r\n\r\n& lt; p> {{item.def}} & lt; / p>\r\n& lt; / div>\r\n{% endfor%}\r\n</code> </pre>\r\n\r\n<p> By default, if html tags are placed in the <b> TextField </b> field, they will be displayed simply as text, this is called tag escaping, this is done in order to protect the project from malicious scripts, themes however, this can be circumvented with the following command: </p>\r\n<pre> <code>\r\n--- template.html\r\n\r\n{% autoescape & lt; on / off>%}\r\ncontent with html tags\r\n{% endautoescape%}\r\n</code> </pre>", "data": "2021-12-02T09:33:44.864Z", "update_data": "2021-12-11T15:04:08.488Z", "is_published": true, "image": "", "category": 3, "subcategory": 5, "slug": "templates-jinja2", "author": null}}, {"model": "home.topic", "pk": 12, "fields": {"title": "Template inheritance", "description": "", "content": "", "html_content": "<p> Creating a basic site template is a good practice, it will create a common structure for all pages on the site. For this, an html file is created, in which blocks are formed, each of which will be static. This can be, for example, a block of a menu field, a vertical bar field, etc. To create such blocks, the following construction is used: </p>\r\n<pre> <code>\r\n{% block name%}\r\nblock with sidebar template\r\n{% endblock name%}\r\n</code> </pre>\r\n\r\n<p> Now, in the page template, you need to specify the base html file that will be inherited. Now the page template will have all the blocks from the base template, the blocks can be extended, changed or canceled </p>\r\n<pre> <code>\r\n{% extends 'base.html'%}\r\n\r\n{% block (name from base.html)%}\r\ncontent\r\n{% endblock%}\r\n</code> </pre>", "data": "2021-12-02T09:34:09.844Z", "update_data": "2021-12-11T15:05:01.572Z", "is_published": true, "image": "", "category": 3, "subcategory": 5, "slug": "template-inheritance", "author": null}}, {"model": "home.topic", "pk": 13, "fields": {"title": "Filters", "description": "", "content": "", "html_content": "<p> Built-in filters are used to change the order or format of the output of information (model object) when displayed to the end user. Built-in filters are described after the - <b> | </b> </p>\r\n\r\n<p> Create a filter to display the date in a suitable format <code> {{item.date | date: 'Ymd H: m'}} </code> </p>\r\n\r\n<p> Filter for sorting objects by creation date (from the most recent) using the <b> order_by </b> method (which takes as a parameter an attribute responsible for displaying the date and a minus sign before the attribute) <code> name.objects. order_by ('- date') </code> </p>\r\n\r\n<p> Filter showing how much time has passed from date_1 to date_2 <code> {{date_1 | timesince: date_2}} </code> </p>\r\n\r\n<p> By default, the <b> TextField </b> field is displayed in solid text, without any indentation, to fix this we use the <b> linebreaks </b> <code> {{item.text | linebreaks}} </code> </p>\r\n\r\n<p> Another useful filter that allows you to display a fixed number of words on the page <code> {{item.text | linebreaks | trunkcatewords: num}} </code> </p>", "data": "2021-12-02T09:34:29.440Z", "update_data": "2021-12-11T15:05:34.404Z", "is_published": true, "image": "", "category": 3, "subcategory": 5, "slug": "filters", "author": null}}, {"model": "home.topic", "pk": 14, "fields": {"title": "Static", "description": "", "content": "", "html_content": "<p> Adding statistics files allows you to apply cascading <b> CSS </b> style sheets and <b> JS </b> scripts to templates. An important note is that when in debug mode, Django looks for stat files in the <b> static </b> directory inside the application, <b> BUT </b> in live mode, Django looks for them in the root directory of the project. To do this, before launching the project on a real server, run the following command: <code> python manage.py collectstatic </code> </p>\r\n<p> This command will collect all statistical files in one <b> static </b> folder in the root project. In the future, the real server will collect statics from this folder. </p>\r\n\r\n<p> For all this functionality to work, you need to define the following three constants: <br>\r\n<br> <b> STATIC_URL </b> - URL prefix for static files. Thanks to this setting, Django looks for statics in the application directory and therefore this functionality works by default\r\n<br> <b> STATIC_ROOT </b> - the path to the shared static folder used by the real web server\r\n<br> <b> STATIC_DIRS </b> - a list of additional paths to static files used for collection and for debug mode\r\n<p> In the settings file it will look like this: </p>\r\n<pre> <code>\r\nSTATIC_URL = '/ static /'\r\nSTATIC_ROOT = os.path.join (BASE_DIR, 'static'\r\n</pre> </code>\r\n\r\n<p> Next, a directory called <b> static </b> is created in the application directory, in which, like the <b> template </b> directory, a folder with the name of the application is created, and then, for each type of statistical files, additional folders with specified types (such as css, js, images) </p>\r\n<p> To apply a static file <b> CSS </b> to a template, you just need to load the statics with the command <b> load static </b>. Next, in the <b> head </b> tag, connections to the statistical file are written, indicating that this file is static and the path to the file is indicated </p>\r\n<pre> <code>\r\n--- template.html\r\n\r\n{% load static%}\r\n. ... ...\r\n& lt; link rel = \"stylesheet\" href = \"{% static 'app / css / style.css'%}\">\r\n</code> </pre>", "data": "2021-12-02T09:35:39.338Z", "update_data": "2021-12-11T15:09:27.014Z", "is_published": true, "image": "", "category": 3, "subcategory": 5, "slug": "static", "author": null}}, {"model": "home.topic", "pk": 15, "fields": {"title": "Shaping URLs in templates", "description": "", "content": "", "html_content": "<p> In order to display all objects from the secondary model that belong to one or another object of the primary model (for example, categories) at a specific address, for example http: / primary_model / num (where the number expresses the number <b> id </b> primary model) you need to create a new path in <b> urls.py </b> and a page display function in <b> views.py </b> </p>\r\n<p> In <b> urls. py </b> add the path to the <b> id </b> of the primary model (category), for this you can use such a dynamic parameter as <b> & lt; int: category_id> </b> and the second parameter is the function of displaying this category </p>\r\n<pre> <code>\r\n---urls.py\r\n\r\nurlpatterns = [\r\n. ... ...\r\npath ('category / & lt; int: category_id> /', my_def)\r\n]\r\n</code> </pre>\r\n\r\n<p> Next, in the <b> views.py </b> file, a function is created that will accept the <b> request </b> and <b> category_id </b> parameter. Using this function, we get objects belonging to the selected primary model, so we turn to the <b> objects </b> record manager and filter the output only for specific objects using the <b> filter () </b> method, which will add to <b > sql </b> -query condition (filter), in this case we will use a filter by <b> id </b>. We retrieve the current category using the <b> get </b> </p>\r\n<pre> <code>\r\ndef my_def (request, category_id)\r\nfunction : list = List.objects.filter (category_id = category_id)\r\ncategory = Category.objects. get (pk = category_id)\r\n</pre> </code>\r\n\r\n<p> Now it remains to create a page template with displaying objects by category, in the list of categories in the <b> a href </b> tag, it is enough to specify <b> 'category / {{item.pk}}' </b> and this link will display all objects of the selected category </p>\r\n\r\n<p> There is an even more reliable way to form a link on a page in Django, for this, use the special tag <code> {% url '& lt; URL-address or path name>' [link parameters]%} </code> </p>\r\n\r\n<p> For this, a special model method is created, which will point to a specific model object and generate the desired link option. To create such functionality in the <b> models.py </b> file, we import the <b> reverse </b> function from the <b> django.url </b> module, which will take the name <b> URL as the first parameter </b> route, the second parameter will be the dictionary <b> kwargs = {} </b> </p>\r\n<pre> <code>\r\n--- (models.py):\r\nfrom django.urls import reverse\r\n\r\nMy_Model class (models.Model):\r\n. ... ...\r\n\r\ndef get_absolute_url (self):\r\nreturn reverse ('url_name', kwargs = {'name_id': self.pk})\r\n</code> </pre>\r\n<p> Now let's compare two ways to create links, the first is via the <b> URL tag </b> and the second through the <b> get_absolute_url function </b> </p>\r\n<pre> <code>\r\n& lt; a href = '{% url' url_name 'item.pk%}'\r\n\r\n& lt; a href = '{{item.get_absolute_url}}'\r\n</code> </pre>\r\n\r\n<p> <code> get_object_or_404 (Class, pk = item_id) </code> is another useful function that returns a 404 error if the page is not found </p>", "data": "2021-12-02T09:36:24.969Z", "update_data": "2021-12-11T15:10:37.101Z", "is_published": true, "image": "", "category": 3, "subcategory": 5, "slug": "shaping-urls-in-templates", "author": null}}, {"model": "home.topic", "pk": 16, "fields": {"title": "Slug", "description": "", "content": "", "html_content": "<p> <b> Slug </b> is a unique <b> URL </b> -address fragment associated with a specific post. In Django, slugs are defined in the database model in the <b> SlugField </b> field, into which we pass the maximum length parameter, an indication of the uniqueness of the slug, and we can add <b> db_index </b>, which will allow search engines to search for the page faster </p>\r\n<the pre> <below code>\r\n---models.py\r\nclass My_Model (models.Model):\r\n. ... ...\r\nslug = models.SlugField ('Slug', max_length = 225, unique = True, db_index = True)\r\n</code> </pre>\r\n<p> In order for the slug to be created automatically, you need to go to the <b> admin.py </b> file and define the <b> prepopulated_fields </b> parameter in the admin panel settings, which will take the list as a parameter , CDB key will indicate the field that will autocomplete and option - the field on which it will be filled </p>\r\n<pre> <code>\r\n---admin.py\r\nclass My_ModelAdmin (admin.ModelAdmin):\r\n. ... ...\r\nprepopulated_fields = {'slug': ('name',)}\r\n</code> </pre>\r\n<p> Now, in order for the page to be searched for by slug, it is necessary in the file <b> urls.py </b> use dynamic parameter <b> 'address / & lt; slug: my_slug /' </b>. Next, let's slightly modify the view function from the previous example </p>\r\n<pre> <code>\r\n---views.py\r\n\r\ndef category_view (request, my_slug):\r\nlist = List.objects.filter (slug = my_slug)\r\nor\r\nlist = get_object_or_404 (List, slug = my_slug)\r\n</code> </pre>\r\n<p> We also modify the function <b> get_absolute_url </b> </p>\r\n<pre> <code>\r\n---models.py\r\n\r\ndef get_absolute_url (self):\r\nreturn reverse ('url_name', kwargs = {'my_slug': self.slug})\r\n</code> </pre>", "data": "2021-12-02T09:36:49.379Z", "update_data": "2021-12-11T15:12:38.065Z", "is_published": true, "image": "", "category": 3, "subcategory": 5, "slug": "slug", "author": null}}, {"model": "home.topic", "pk": 17, "fields": {"title": "Custom template tags", "description": "", "content": "", "html_content": "<p> Custom template tags are used to avoid duplicating any repetitive methods. To create a generic tag view function, you first need to create a folder in the application directory called <b> templatetags </b> and create a <b> __init__.py </b> file in it to tell Django that this is a module (package ). Next, let's create another file <b> my_name.py </b> in which we will designate tags </p>\r\n<p> In order to create a tag, you need to import the <b> template </b> module and register the tag </ p>\r\n<pre> <code>\r\n---my_tag.py\r\nfrom django import template\r\n\r\nfrom project.models import Model_Name\r\n\r\nregister = template.Library ()\r\n</code> </pre>\r\n\r\n<h4> Simple tag </h4>\r\n<p> A simple custom tag is created using the <code> @ register.simple_tag () </code> decorator into which you can pass parameters, for example ('name' = my_name). Next, a function is created that will return the required tag: </p>\r\n<pre> <code>\r\ndef get_tag ():\r\nreturn Model_Name.objects.all ()\r\n</code> </pre>\r\n<p> Now, in the template, we must call the file with tags: <code> {% load my_tag%} </code>. And then, if necessary, use the function, call it using the command <code> {% get_tag as name%} </code> </p>\r\n\r\n<h4> Inclusion tag </h4>\r\n<p> <b> Inline tags </b> allows you to display not only data, but also render data in the template. To create such a tag, you must register it as <code> @ register.inclusion_tag (path / template.html) </code> </p>\r\n<pre> <code>\r\n---my_tag.py\r\n\r\n@ register.inclusion_tag (path / template.html)\r\ndef show_template ():\r\nlist = List.objects.all ()\r\nreturn {'list': list}\r\n</code> </pre>\r\n<p> Now we can refer to the whole template just one line of code <code> {% show_template%} </code> </p>", "data": "2021-12-02T09:36:58.530Z", "update_data": "2021-12-11T15:08:08.673Z", "is_published": true, "image": "", "category": 3, "subcategory": 5, "slug": "custom-template-tags", "author": null}}, {"model": "home.topic", "pk": 18, "fields": {"title": "Forms", "description": "", "content": "", "html_content": "<p> HTML forms are a set of widgets that can be used on a page, they are designed to collect information from the user and then send it to the server. Forms can be related (add an article by model template, registration form) and not related to database tables (post, comment, search). </p>\r\n<p> To create an HTML form in Django, you need to create a form template, a path to the template, a display function, and the actual form. The form will be described in the <b> form.py </b> file and must be located in the application directory. In this file, you need to import the <b> forms </b> module, as well as all the necessary database models. Next, you need to create a class that should inherit from the class <b> forms.Form </b> (a form not associated with a model) or <b> forms.ModelForm </b> (a form associated with a model). </p>\r\n<pre> <code>\r\n---forms.py\r\nfrom django import form\r\nfrom path.models import Model\r\n</code> </pre>\r\n\r\n<h3> Creating a form not associated with the model </h3>\r\n<p> Let's create a form of the <b> forms.Form </b> type which we will manually link to the existing model. To create a form that is not related to the model in the created class, we will describe the form fields as they are described in the model, but with minor differences, for example, to create forms, they use classes of built-in fields, this is the familiar <b> CharField </b>, <b> BooleanField </b>, but not represented here for example <b> TextField </b>, and to create a dropdown list you can use <b> ChoiceField </b>, which will use the <b> select </b> widget, if the drop-down list is associated with a model, then you can use the <b> ModelChoiceField </b> attribute with the required <b> queryset </b> parameter\r\n\r\n<pre><code>\r\nclass NewForm (forms.Form):\r\ntitle = forms.Charfield (max_length = 100, label = 'Title')\r\nslug = forms.SlugField (max_length = 255)\r\ncontent = forms.CharField ()\r\nis_published = forms.BooleanField (required = False , initial = True)\r\ncategory = forms.ModelChoiceField (queryset = Category.objects.al (empty_label = 'nothing selected'))\r\n</code> </pre>\r\n\r\n<p> Now, in order to see what happened, you need to create a template and a view function, where you will also need to write a <b> condition </b>, in which if the request method is <b> POST </b>, then the server accepts data from the form. In order to receive data from the form, you need to refer to the <b> request </b> object and take the <b> POST </b> from it. Next, we write a condition for the presence of variation errors, if the form is valid, then the form should have a property such as <b> cleaned_data </b>, into which the data in the form of a dictionary falls. You can save the form to the database using the <b> create </b> function, into which we will transfer the generated dictionary with the form. In order for the function to unpack the form itself by keys and values ​​and add everything you need to the database, you need to add the characters <b> ** </b> before the dictionary. Using the <b> redirect </b> function from the <b> shortcuts </b> module, you can send a link to the page to which the redirect will be performed after creating the form </p>\r\n<p> The second condition will sound like this - if the data transfer method is <b> GET </b> then an empty form is generated </p>\r\n<pre> <code>\r\n---views.py\r\n\r\ndef form (request):\r\nif request.method == 'POST'\r\nform = NewForm (request.POST)\r\nif form.is_valid ():\r\npost = Model.objects.create (** form.cleaned_data)\r\nreturn redirect (post)\r\nelse :\r\nform = NewForm ()\r\nreturn render (request, 'path.html', {'form': form})\r\n</code> </pre>\r\n\r\n<p> Now in the template, all you need to do is call the form and Django will independently render everything and display the result, you just need to add the <b> form </b> tag, which will take the <b> action </b> attribute as a parameter (it points to then, to which <b> URL </b> -address you need to refer to process the form when the data will be sent to the server), and it is necessary to register the <b> method </b> of data transfer <b> POST </b>. Next, you will need to create a <b> submit </b> button. In the wrapper of the <b> form </b> tag, it will be enough to call the command <b> form.as_p </b>, which will wrap each form field in the <b> p </b> </p>\r\n<p> tag In addition , before calling the form, you must specify a parameter such as <b> csrf_token </b>, without which the default form will not work. This token is added to the form to protect it from <b> csrf </b> attacks and tampering </p>\r\n<pre> <code>\r\n--- form.html\r\n\r\n& lt; form action = '{% url' path '%} method =' POST'>\r\n{% csrf_token%}\r\n{{form.as_p}}\r\n&lt;button type =' submit '> Submit &lt;/ button>\r\n&lt;/form>\r\n</code> </pre>", "data": "2021-12-02T09:37:57.567Z", "update_data": "2021-12-12T13:06:57.244Z", "is_published": true, "image": "", "category": 3, "subcategory": 6, "slug": "forms", "author": null}}, {"model": "home.topic", "pk": 19, "fields": {"title": "Arguments for form fields", "description": "", "content": "", "html_content": "<p> Arguments for form fields are used to further customize the form. For example, by default, all form fields are required, and checkboxes are unchecked, and special arguments are used to fix this: </p>\r\n<pre> <code>\r\nlabel = 'Name' - names the title of the form field\r\nrequired = False- makes the field optional\r\ninitial = 'text' / True - initial value of the field\r\nempty_label = 'text' / None - used to edit an empty line in the drop-down list\r\n</code> </pre>\r\n\r\n<h3> Widgets </h3>\r\n<p> Widgets can be added to each field in the model, they define the type of the field, for example, you can reassign the widget for the <b> CharField </b> field to <b> Textarea () </b> and / or give the form the style <b> CSS </b> </p>\r\n<pre> <code>\r\nwidget = forms.TextInput (attrs = {'class': 'style'})\r\nwidget = forms.Textarea (attrs = { 'class': 'style', 'rows': 5})\r\nwidget = forms.Select (attrs = {'class': 'style'})\r\n</code> </pre>", "data": "2021-12-02T09:40:56.051Z", "update_data": "2021-12-11T21:47:16.186Z", "is_published": true, "image": "", "category": 3, "subcategory": 6, "slug": "arguments-for-form-fields", "author": null}}, {"model": "home.topic", "pk": 20, "fields": {"title": "Styling the form", "description": "", "content": "", "html_content": "<p> To style the form, you will have to face the need for independent rendering, that is, writing all the tags manually. In this case, the <b> form </b> tag is written as in the previous example, the <b> label </b> tag is also added, in which the <b> for </b> attribute takes the parameter of the form model field with the addition construct <b> id_for_label </b> which transfers the <b> id </b> fields of the model. A form field can be displayed with the <b> form.attribute </b> command, and styles are added by assigning different widgets to the model. Then, with <b> form.attribute.errors </b>, variation errors will be displayed, and non-form related errors are output through a directive such as <b> form.non_field.errors </b> </p>\r\n<p class = “description”> <b> form.attribute.errors </b> renders with <b> errorlist </b> class, which can be styled in <b> CSS </b> </p>\r\n<pre> <code>\r\n--- form.html\r\n\r\n{{form.non_field.errors}}\r\n&lt;div class = 'style'>\r\n&lt;label for = '{{form.attribute.id_for_label}}'> Title: / or / {{{form.attribut.label}} &lt;/label>\r\n{{form.attribute}}\r\n& lt; div class = 'style'>\r\n{{form.attribute.errors}}\r\n&lt;/div>\r\n&lt;/div>\r\n</code> </pre>\r\n\r\n<h4> Styling a form using a loop </h4>\r\n<p> To create a form using a loop, you need to iterate over each form field in a loop, the <b> label </b> tag can be displayed in the same way, or you can use the special attribute < b> label_tag </b> which will generate the <b> label </b> tag. Further, the form itself and variation errors are prescribed. Now the code looks shorter, it is convenient if there is a need to display all fields by the same type: </p>\r\n<pre> <code>\r\n--- form.html\r\n\r\n{{form.non_field.errors}}\r\n{{for field in form}}\r\n&lt;div class = 'style'>\r\n{{field.label_tag}}}\r\n{{field}}\r\n&lt;div class = 'style'>\r\n{{ field.errors}}\r\n&lt;/div>\r\n&lt;/div>\r\n</code> </pre>", "data": "2021-12-02T09:41:52.020Z", "update_data": "2021-12-12T14:04:13.121Z", "is_published": true, "image": "", "category": 3, "subcategory": 6, "slug": "styling-the-form", "author": null}}, {"model": "home.topic", "pk": 21, "fields": {"title": "Model-related forms", "description": "", "content": "", "html_content": "<p> To create such a form, you need to create a class that should inherit from the <b> forms.ModelForm </b> class, create another class inside the class, and name it <b> Meta </b>, which will contain set attributes that will be responsible for which model the form will be associated with and what fields it will have. In the <b> meta </b> -class, you can also reassign widgets, this is done through the <b> widgets </b> attribute, in which, in the form of a dictionary, form fields are selected as a key, and a widget type as a value </p>\r\n<p> To add arguments, you need to add the constructor <b> __init__ </b> to the created class, in which the constructor <b> super () .__ init __ (* args, ** kwargs) </b> from models <b> ModelForm </b> </p>\r\n\r\n<pre><code>\r\nclass NewForm (forms.ModelForm):\r\nclass Meta ():\r\nmodel = Model\r\nfields = ['title', 'content' ...] / '__all__'\r\nwidgets = {\r\n'title': forms.TextInput (attrs = {'class ':' style '})\r\n' title ': forms.Textarea (attrs = {' class ':' style ',' rows ': 5})\r\n' title ': forms.Select (attrs = {' class ':' style '})\r\n}\r\n\r\ndef __init __ (self, * args, ** kwargs):\r\nsuper () .__ init __ (* args, ** kwargs)\r\nself.fields ['attribut']. empty_label = 'text'\r\n</code> </pre>\r\n\r\n<p> To save data from a bound form, you need to slightly change the submission function at the place where the validity condition is written, if the form has passed validation, then it is enough to turn to the <b> save </b> method to save the form </ p >\r\n<pre> <code>\r\n---views.py\r\n\r\ndef form (request):\r\nif request.method == 'POST'\r\nform = NewForm (request.POST, request.FILES)\r\nif form.is_valid ():\r\npost = form.save ()\r\nreturn redirect (post)\r\nelse:\r\nform = NewForm ()\r\nreturn render (request, 'path.html', {'form': form})\r\n</code> </pre>\r\n\r\n<p> In order for the form to receive images from the user, when creating an instance of the form, pass the list of files that were transferred to the server from the form as the second argument. To do this, we turn to the <b> request </b> object and take the <b> FILES </b> collection (the way of using it is presented above). Now in the <b> form </b> tag it is necessary to describe the attribute <b> enctype </b> </p>\r\n<pre> <code>\r\n--- form.html\r\n& lt; form action = 'path' method = 'post 'enctype =' multipert / form-data '>\r\n</code> </pre>", "data": "2021-12-02T09:42:18.428Z", "update_data": "2021-12-11T22:06:49.614Z", "is_published": true, "image": "", "category": 3, "subcategory": 6, "slug": "model-related-forms", "author": null}}, {"model": "home.topic", "pk": 22, "fields": {"title": "Custom validators", "description": "", "content": "", "html_content": "<p> A custom validator can be added to any form field, a validator is nothing more than a form class method named like <b> clean_data </b>. The custom validator will be processed after passing the default validators </p>\r\n<p> Let's create a validator that checks if the heading starts with a number. So, in the <b> NewForm </b> class, add a function whose name is customary to start with <b> clean </b> and then, through an underscore, indicate the field that will vary. This function takes a <b> self </b> parameter. Next, we create a variable that will substitute the <b> self </b> parameter and call the <b> cleaned_data </b> function and access the required key. Next, a condition is required in which we write the regular expression of the <b> match </b> method from the <b> re </b> module, this method looks for something at the beginning of the line for the field, and if a digit was found, then the validator must will raise an exception <b> ValidationError </b>, in which you can write the error text as a parameter,\r\n\r\n<pre><code>\r\n---forms.py\r\n\r\nNewForm class (forms.ModelForm / the Form):\r\n\r\ndef clean_field (self):\r\nfield = self.cleaned_data ['field']\r\nif re.match (r '\\ d', 'field'):\r\nraise ValidationError ('text')\r\n\r\nreturn field\r\n</code> </pre>", "data": "2021-12-02T09:42:36.089Z", "update_data": "2021-12-12T09:35:46.135Z", "is_published": true, "image": "", "category": 3, "subcategory": 6, "slug": "custom-validators", "author": null}}, {"model": "home.topic", "pk": 23, "fields": {"title": "Контролеры класса CBVs, ListView", "description": "", "content": "", "html_content": "<p>Представление - это вызываемый объект, который принимает запрос и возвращает ответ. Это может быть больше, чем просто функция, и Django предоставляет пример некоторых классов, которые можно использовать как представления. Они позволяют структурировать представления и повторно использовать код, используя наследование и миксины.</p>\r\n\r\n<h3>ListView</h3>\r\n<p>Мы уже знакомы с тем как писать функции преставления. Теперь же попробуем написать контроллеры класса. Для начала импортируем класс <b>ListView</b> из модуля <b>django.views.generic</b>, что бы наследовать список. Теперь создадим класс, который будет являться подклассом <b>ListView</b>. Данный класс предназначен для работы со списками, в нём будут переопределяться некоторые аттрибуты, которые он наследует. Первое, что необходимо переопределить, это аттрибут <b>model</b> в который передаётся модель, она будет записана в объект по умолчанию <b>object_list</b></p>\r\n<p class='description'>Создав контролер класса Django автоматически создаёт для него путь к шаблону и переменную <b>object_list</b> в которой храниться список объектов модели. Для того, что бы установить свой шаблон по умолчанию, необходимо переопределить атрибут <b>template_name</b>, а что бы установить имя переменной по умолчанию - <b>context_object_name</b>. Атрибут <b>extra_context</b> используется для хранения статичных данных. Атрибут <b>allow_empty</b> со значением <b>False</b> будет отображать <b>404</b> ошибку в случае, если страница не найдена</p>\r\n<pre><code>\r\n    ---views.py\r\n    from django.view.generic.list import ListView\r\n\r\n    class NewClass(ListView):\r\n        model = Model\r\n        template_name = 'path/file.html'\r\n        context_object_name = 'my_name'\r\n        extra_context = {'title': 'text'}\r\n        allow_empty = True/False\r\n</code></pre>\r\n\r\n<p>Для того, что бы передать динамический массив или список необходимо создать функцию, которая будет генерировать как динамический, так и статический контекст, который можно будет передавать в шаблон. Функция эта называется <b>get_context_data</b> и принимает набор стандартных параметров. Первым делом необходимо определить переменную <b>context</b> и передать ей контекст, который уже сформирован в классе, для этого мы обратимся к базовому классу <b>ListView</b> - <b>super</b> и вызовем функцию <b>get_context_data</b>, которая будет принимать словарь <b>**kwargs</b> и дальше будем дополнять <b>context</b> необходимыми параметрами</p>\r\n<pre><code>\r\n    def get_context_data(self, *, object_list=None, **kwargs):\r\n        context = super().get_context_data(**kwargs)\r\n        context['title'] = 'text'\r\n        # where <b>title</b> contains a string\r\n\r\n        context['menu'] = menu      \r\n        # where <b>menu</b> contains a list of items\r\n        return context\r\n</code></pre>\r\n\r\n<p>Для того, что бы фильтровать объекты можно воспользоваться функцией <b>get_queryset</b> и в ней возвращать отфильтрованный список</p>\r\n<pre><code>\r\n    def get_queryset(self):\r\n        return Model.objects.filter(cat_id=self.kwargs['category_attribute'/'pk'], model_attribut=value)\r\n    or\r\n        return Model.objects.filter(cat__slug.kwargs[my_slug])\r\n</code></pre>\r\n<p class='description'>Строка <b>cat_id=self.kwargs['category_attribute']</b> означает, что берётся значение <b>cat_id</b> из адресной строки и фильтруется по этому параметру, иначе говоря выбираются только те объекты модели, которые имеют нужную категорию</p>\r\n<p>Теперь, для того, что бы обратиться к этому контролеру класса, в файле <b>urls.py</b> необходимо заменить функцию представления на название класса, а так же вызвать функцию <b>as_view()</b> - <code>path('path/', NewClass.as_view(), name='name')</code>></p>", "data": "2021-12-02T09:44:15.596Z", "update_data": "2021-12-04T13:55:23.902Z", "is_published": true, "image": "", "category": 3, "subcategory": 7, "slug": "kontrolery-klassa-cbvs-listview", "author": null}}, {"model": "home.topic", "pk": 24, "fields": {"title": "DetailView", "description": "", "content": "", "html_content": "<p>Этот класс используется для более детального отображения содержимого объекта базы данных. Описывать его можно, как и предыдущий класс. При создании маршрута к определенному объекту модели необходимо учитывать, что в качестве параметра идентификатора должно использоваться свойство <b>pk</b> или <b>slug</b></p>\r\n<p>Один из способов обратиться к <b>pk</b> и/или <b>slug</b> это переопределить следующие атрибуты:</p>\r\n<pre><code>\r\n    class NewClass(DetailView):\r\n        model = Model\r\n        pk_url_kwarg = 'my_id'\r\n        slug_url_kwarg = 'my_slug'\r\n</code></pre>\r\n<p>Второй способ, это передать к маршруту свойство <b>pk</b></p>\r\n<pre><code>\r\n    ---urls.py\r\n    path('address/&lt;int:pk>')\r\n</code></pre>\r\n<p class='description'>В данном классе список объектов по умолчанию храниться в переменной <b>object</b>, которую можно переопределить с помощью аттрибута <b>context_objects_name</b></p>", "data": "2021-12-02T09:44:36.216Z", "update_data": "2021-12-04T21:29:08.628Z", "is_published": true, "image": "", "category": 3, "subcategory": 7, "slug": "detailview", "author": null}}, {"model": "home.topic", "pk": 25, "fields": {"title": "CreateView", "description": "", "content": "", "html_content": "<p>Данный класс предназначен для работы с формами. Для того, что бы вызвать модель формы необходимо переопределить переменную <b>form_class</b>. Этого вполне достаточно, что бы форма работала. Единственное, на что следует обратить внимание, так это на наличие функции <b>get_absolute_url</b> в модели. Именно благодаря этой функции, после создания объекта, пользователь будет перенаправляться к этому объекту. В случае если перенаправление должно происходить на другую страницу, можно определить атрибут <b>success_url</b>, что позволит указать адрес для функции <b>reverse_lazy</b></p>\r\n<p class=\"description\">Функция <b>reverse_lazy</b> создает маршрут отложенно и подходит под этот случай, так как функция <b>reverse</b> сразу строит маршрут в момент создания объекта, но это сделать невозможно, так как маршруты в этот момент еще не определены самим Django</p>\r\n<pre><code>\r\n    class NewClass(CreateView):\r\n        form_class = FormModel\r\n        success_url = reverse_lazy('address_name')\r\n</code></pre>", "data": "2021-12-02T09:45:10.875Z", "update_data": "2021-12-04T13:59:34.256Z", "is_published": true, "image": "", "category": 3, "subcategory": 7, "slug": "createview", "author": null}}, {"model": "home.topic", "pk": 26, "fields": {"title": "Миксины", "description": "", "content": "", "html_content": "<p>Миксины это возможность наследовать классы для избежания дублирования кода. В Django миксины создаются в директории приложения в файле, который принято называть <b>utils.py</b>. В нём создаются классы, устанавливаются параметры и затем, после импортирования миксина, они будут доступны для наследования. Кроме того, с помощью миксинов можно передавать данные в функцию <b>get_context_data</b>. Для этого в миксине потребуется создать функцию, которая будет содержать базовые параметры для всех функций <b>get_context_data</b></p>\r\n<p>В этом методе в первой строчке сформируем словарь из тех именованных параметров, которые будут переданы после вызова функции, далее можем передать в переменные все необходимые списки из БД, динамические и статичные данные. Так же можем записать условное выражение в котором, если мы определяем какой-либо именованный параметр, то описываем его</p>\r\n<pre><code>\r\n    ---utils.py\r\n\r\n    list = [\r\n        {'name': name},\r\n        {'name': name},\r\n    ]\r\n\r\n    class MyMixin():\r\n        attribute = value\r\n        def get_user_context(self, **kwargs):\r\n            context = kwargs\r\n            model = Model.objects.annotate(Count('model'))\r\n            context['list'] = list\r\n            context['model'] = model\r\n            if 'attribut' not in context:\r\n                context['attribut'] = 0\r\n            return context\r\n</code></pre>\r\n\r\n<p>Далее в файле <b>views.py</b> импортируем созданный миксин и наследуем его в нашем классе представления первым параметром. Для передачи данных из метода <b>def get_user_context</b> необходимо после определения переменной <b>context</b> (в которой уже содержится контекст) добавляем функцию из миксина, в которую можно передать параметры, которые станут словарём. Далее эта функция должна возвращать общий словарь из <b>context</b> и <b>my_def</b></p>\r\n<pre><code>\r\n    ---views.py\r\n    from app.utils import MyMixin\r\n\r\n\r\n    class View(MyMixin, ListView)\r\n        # в этом классе присутствует свойство <b>attribute</b> из класса <b>MyMixin</b>\r\n\r\n        def get_context_data(self, *, object_list=None, **kwargs):\r\n            context = super().get_context_data(**kwargs)\r\n            my_def = self.get_user_context(kay='value')\r\n            return dict(list(context.items()) + list(my_def.items()))\r\n</code></pre>", "data": "2021-12-02T09:45:29.871Z", "update_data": "2021-12-04T09:51:05.789Z", "is_published": true, "image": "", "category": 3, "subcategory": 7, "slug": "miksiny", "author": null}}, {"model": "home.topic", "pk": 27, "fields": {"title": "MySQL", "description": "", "content": "", "html_content": "<p>База данных представляет собой набор упорядоченных данных в виде таблицы. СУБД или система управления базами данными это инструмент управления, упорядочивания баз данных с помощью программных и лингвистических средств общего или специального назначения. <b>MySQL</b> представляет собой одну из многих систем управления БД. <b>SQL</b> или <b>Structured Query Language</b> это язык структурированных запросов, предназначенный для работы с БД, данный язык универсален, его поддерживает множество СУБД</p>\r\n\r\n<h3>MtSQL install</h3>\r\n<p>Для работы с этой базой данных потребуется установить сервер <b>MySQL</b>, можно зайти на официальный сайт <b>MySQL</b> и скачать его отдельно, или же, воспользоваться готовым локальным сервером, в состав которого уже входит <b>MySQL</b>, например <b>Open Server</b> (который отлично подходит под Windows) или <b>XAMPP</b> (подходит под другие операционные системы)</p>\r\n\r\n\r\n<h3>Установка XAMPP</h3>\r\n<p>Что бы установить <b>XAMPP</b> необходимо перейти на главную страницу <a href=\"https://www.apachefriends.org/index.html\">XAMPP</a> выбрать установку под необходимое ПО и затем в терминале выполнить следующие команды:</p>\r\n<pre><code>\r\n    user$ sudo chmod +x xampp-linux-x64-8.0.12-0-installer.run\r\n    user$ sudo ./xampp-linux-x64-8.0.12-0-installer.run\r\n</code></pre>\r\n<p>После чего запуститься установщик <b>XAMPP</b>. После загрузки необходимо перейти в окно инсталлятора, во вкладку <b>Manage Servers</b> и запустить все сервера. После чего будет открыт доступ к сайту администрирования баз данных <a href=\"http://localhost/phpmyadmin/index.php\">phpMyAdmin</a></p>\r\n<p>Дальше, для работы с <b>MySQL</b> нам потребуется <b>mysqlclient</b>, специальный драйвер, который может связываться с базой данных</p>\r\n\r\n\r\n<h3>Настройка MySQL в Django</h3>\r\n<pre><code>\r\n    ---settings.py\r\n\r\n    DATABASES = {\r\n        'default': {\r\n            'ENGINE': 'django.db.backends.mysql',\r\n            'NAME': 'DB_name',\r\n            'USER': 'root(default value)',\r\n            'PASSWORD': '',\r\n            'HOST': 'localhost',\r\n        }\r\n    }\r\n</code></pre>", "data": "2021-12-02T09:46:15.880Z", "update_data": "2021-12-04T14:01:19.692Z", "is_published": true, "image": "", "category": 3, "subcategory": 12, "slug": "mysql", "author": null}}, {"model": "home.topic", "pk": 28, "fields": {"title": "Shell", "description": "", "content": "", "html_content": "<p><b>Shell</b> это интерактивная оболочка, командный интерпретатор, который обеспечивает интерфейс взаимодействия между пользователем и ядром операционной системы, в то же время и своеобразный язык программирования, в котором присутствуют такие конструкции, как операторы условного ветвления, циклы, переменные и многое другое.</p>\r\n<p>Запустить интерактивную оболочку можно командой: <code>python manage.py shell</code></p>\r\n\r\n\r\n\r\n<h3>Создание объектов модели через Shell</h3>\r\n<p>Для того, что бы начать работу с моделями необходимо их импортировать: <code>from path.models import className</code></p>\r\n\r\n\r\n<p>Существует несколько методов добавления объектов в базу данных:</p>\r\n<pre><code>\r\nname = ClassName(attribute1='string', attribut2='integer', attribut3='Boolean')\r\nname.save()\r\n#или\r\nname.ClassName.objects.create(attribute1='string', attribut2='integer', attribut3='Boolean')\r\n#эта команда сразу создаёт и сохраняет объект\r\n</code></pre>\r\n\r\n<h3>Полезные команды</h3>\r\n<p>После сохранения объекта генерируется id объекта, которое можно посмотреть командой: <code>name.id</code></p>\r\n\r\n\r\n<p>Обращаясь к аттрибуту можно посмотреть его содержимое, например:</p>\r\n<pre><code>\r\n    name.attribut1\r\n    ---'string'\r\n    name.attribut2\r\n    ---'integer'\r\n</code></pre>\r\n\r\n<p>Чтобы редактировать значение необходимо прописать:</p>\r\n<pre><code>\r\n    name.attribut1 = 'new value'\r\n    name.save()\r\n</code></pre>\r\n\r\n<p>Что бы просмотреть все обьекты базы данных можно воспользоваться командой: <code>name.objects.all()</code></p>\r\n\r\n\r\n<p>Что бы вывести отсортированный список объектов используется метод <b>order_by</b>, которой принимает в качестве параметра необходимый атрибут в порядке которого будет выводиться список - <code>name.objects.order_by(id)</code></p>\r\n\r\n\r\n<p>Что бы вывести объект по значению поля <b>id</b> используется метод <b>get</b>: <code>className.objects.get(id=value)</code></p>", "data": "2021-12-02T09:47:01.201Z", "update_data": "2021-12-04T14:06:08.670Z", "is_published": true, "image": "", "category": 3, "subcategory": 13, "slug": "shell", "author": null}}, {"model": "home.topic", "pk": 29, "fields": {"title": "ORM (Object-Relational Mapping)", "description": "", "content": "", "html_content": "<p><b>ОРМ</b> это технология программирования, которая связывает базы данных с концепциями объектно-ориентированных языков программирования, создавая «виртуальную объектную базу данных»</p>\r\n<p>В учебных целях пользоваться <b>ОРМ</b> можно через интерпретатор <b>shell</b>, для того, что бы начать работать с базой данных, необходимо импортировать модели</p>\r\n<p>Что бы посмотреть, как Django формирует запросы, необходимо из модуля <b>django.db</b> импортировать <b>connection</b>, что бы отчистить все запросы используем функцию <b>reset_queries</b></p>\r\n<pre><code>\r\n    from django.db import connection, reset_queries\r\n    connection.queries\r\n    reset_queries()\r\n</code></pre>", "data": "2021-12-02T09:47:36.144Z", "update_data": "2021-12-04T14:17:34.388Z", "is_published": true, "image": "", "category": 3, "subcategory": 8, "slug": "orm-object-relational-mapping", "author": null}}, {"model": "home.topic", "pk": 30, "fields": {"title": "Базовые методы ОРМ", "description": "", "content": "", "html_content": "<pre><code>\r\n    user$ python manage.py shell\r\n\r\n>>> from app.models import Model\r\n\r\n\r\n>>> Model.objects.all()                         \r\n# вывод всех объектов модели\r\n\r\n>>> Model.objects.all()[:num]              \r\n# срез объектов модели\r\n\r\n>>> Model.objects.all().reverse()        \r\n# вывод всех объектов модели в обратном порядке\r\n\r\n>>> Model.objects.order_by('attribute')          \r\n# вывод списка в указанном порядке\r\n\r\n>>> Model.objects.get(pk=value/title='title')   \r\n# вывод объекта по значению ключа\r\n</code></pre>\r\n<pre><code>\r\n>>> variable = _                                \r\n# присвоение переменной последнего результата выборки\r\n\r\n>>> variable.attribute                           \r\n# отобразит значение по ключу <b>attribute</b>\r\n\r\n>>> variable.category.pk                        \r\n# отобразит <b>id</b> значения по ключу \r\n\r\n>>> primary_obj = Category.objects.get(pk=num)  \r\n>>> primary_obj.model_set.all() \r\n# получить все обьекты из вторичной модели, которые связаны \r\n# с объектом первичной модели\r\n!перед аттрибутом <b>_set</b> название модели записывается в \r\n нижнем регистре\r\n\r\n                                                             \r\n>>> S_Model.objects.filter(p_model__attribute='value')   \r\n# получить все обьекты вторичной модели, которые связаны с \r\nпервичной по определенному аттрибуту\r\n\r\n>>> primary_obj.model_set.exists()              \r\n# есть ли обьекты в списке, вернёт True/False\r\n</code></pre>\r\n<pre><code>\r\n>>> Model.objects.count()                       \r\n# выведет количество объектов  \r\n\r\n>>> Model.objects.first()                       \r\n# вывод первого объекта списка\r\n\r\n>>> Model.objects.last()                        \r\n# вывод последнего объекта списка\r\n\r\n>>> Model.objects.earliest('date'/'update')     \r\n# вывод объекта списка по самой ранней дате\r\n\r\n>>> Model.objects.latest('date'/'update')       \r\n# вывод объекта списка по самой поздней дате\r\n</code></pre>\r\n<p class='description'>Порядок вывода объектов с помощью функции <b>all</b> по умолчанию произвольный, но его можно настроить в мета-описании модели в аттрибуте <b>ordering</b></p>\r\n<p class=\"description\">Благодаря функции <b>__str__</b>, прописанной в модели, при обращении к связанной модели по её аттрибуту будет отображаться не идентификационный номер объекта, а её строковое представление</p>\r\n<p class=\"description\">Аттрибут <b>_set</b> можно переназначить, достаточно в поле <b>ForeignKey</b> дописать параметр <b>related_name='name'</b>, и теперь вместо<b>model_set</b> можно использовать <b>name</b> в качестве функции вывода связанных объектов из вторичной модели</p>", "data": "2021-12-02T09:48:16.250Z", "update_data": "2021-12-04T16:28:22.140Z", "is_published": true, "image": "", "category": 3, "subcategory": 8, "slug": "bazovye-metody-orm", "author": null}}, {"model": "home.topic", "pk": 31, "fields": {"title": "Операторы фильтрации", "description": "", "content": "", "html_content": "<pre><code>\r\n    &LT;--- <b>gt</b> вывести все объекты если id > num --->\r\n    >>> Model.objects.filter(pk__gt=num)   \r\n\r\n    &LT;--- <b>gte</b> вывести все объекты если id >= num--->\r\n    >>> Model.objects.filter(pk__gte=num)  \r\n\r\n    &LT;--- <b>lt</b> вывести все объекты если id &lt; num--->\r\n    >>> Model.objects.filter(pk__lt=num)        \r\n\r\n    &LT;--- <b>lte</b> вывести все объекты если id &lt;= num-->\r\n    >>> Model.objects.filter(pk__lte=num)   \r\n \r\n    &LT;--- <b>in</b> вывести объекты находящиеся в диапазоне --->\r\n    >>> Model.objects.filter(pk__in[num, num, num])     \r\n\r\n    &LT;--- <b>contains</b> вывести все объекты которые содержат --->\r\n    >>> Model.objects.filter(title__contains='Title')       \r\n\r\n    &LT;--- <b>icontains</b> (case-insensitive) вывести все объекты которые содержат --->\r\n    >>> Model.objects.filter(title__icontains='title')      \r\n    \r\n\r\n    >>> P_Model.objects.filter(s_model__title__contains='title').distinct()\r\n    # выведет все объекты первичной модели у которой связанные объекты содержат указанный фильтр\r\n</code></pre>\r\n<p class='description'>SQLite не поддерживает регистрозависимый поиск, поэтому фильтр <b>contains</b> будет отрабатывать без учета регистра</p>", "data": "2021-12-02T09:48:40.067Z", "update_data": "2021-12-04T14:44:36.225Z", "is_published": true, "image": "", "category": 3, "subcategory": 8, "slug": "operatory-filtracii", "author": null}}, {"model": "home.topic", "pk": 32, "fields": {"title": "Логическое and, or, not в запросах, класс Q", "description": "", "content": "", "html_content": "<p>Для создания запросов с логическими выражениями <b>and, or, not</b> необходимо импортировать класс <b>Q</b>:</p>\r\n<pre><code>\r\nfrom django.db.models import Q\r\n| -- or  ,   & -- and  ,   ~ -- not\r\n\r\n# вывод списка, который будет находиться в указанном диапазоне\r\n#<b>или</b> который будет содержать указанную строку\r\n>>> Model.objects.filter(Q(pk__in=[num, num]) | Q(title__contains='str'))\r\n\r\n# вывод списка, который будет находиться в указанном диапазоне\r\n#<b>и не</b> будет содержать указанную строку\r\n>>> Model.objects.filter(Q(pk__in=[num, num]) & ~ Q(title__contains='str'))\r\n</code></pre>", "data": "2021-12-02T09:49:02.882Z", "update_data": "2021-12-04T14:47:29.603Z", "is_published": true, "image": "", "category": 3, "subcategory": 8, "slug": "logicheskoe-and-or-not-v-zaprosah-klass-q", "author": null}}, {"model": "home.topic", "pk": 33, "fields": {"title": "Агрегатные функции", "description": "", "content": "", "html_content": "<p>Для того, что бы начать работать с агрегатными функциями, для демонстрации создадим поле в модели, которое будет отвечать за просмотры статьи (объекта). Следовательно, добавим к модели поле типа <b>integer</b>: <code>views = models.IntegerField(default=0)</code></p>\r\n\r\n<p>Теперь импортируем агрегатные функции из модуля <b>django.db.models</b></p>\r\n<pre><code>\r\nfrom django.db.models import aggregate, annotate\r\n\r\n>>> Model.objects.aggregate(Min('views'))           \r\n# отобразит максимальное значение поля views\r\nВывод: {'views__min': num}\r\n\r\n>>> Model.objects.aggregate(Max('views'))           \r\n# отобразит минимальное значение поля views\r\nВывод: {'views__max': num}\r\n\r\n>>> Model.objects.aggregate(my_name=Max('views')) \r\n{'my_name': num}\r\n>>> Model.objects.aggregate(my_name=Max('views') - Min('views')) \r\n{'my_name': num}\r\n</code></pre>\r\n<pre><code>\r\n>>> Model.objects.aggregate(Sum('views'))           \r\n# отобразит сумму значений поля views\r\nВывод: {'views__sum': num}\r\n\r\n>>> Model.objects.aggregate(Avg('views'))           \r\n# отобразит среднее значение поля views\r\nВывод: {'views__avg': num}\r\n\r\n>>> Model.objects.aggregate(Count('views'))         \r\n# отобразит количество значений поля views\r\nВывод: {'views__count': num}\r\n\r\n</code></pre>\r\n<pre><code>\r\n>>> list = P_Model.objects.annotate(Count('S_model'))      \r\n        for i in list:                                          \r\n            print(i.title, i.s_model__count)   \r\n\r\n                          #или\r\n\r\n>>> list = P_Model.objects.annotate(my_name=Count('S_model'))   \r\n        for i in list:                                 \r\n            print(i.title, i.my_name)   \r\n# отобразит количество объектов вторичной модели, которые связаны с первичной        \r\n\r\nModel.objects.values('attribut1', attribut2)        \r\n# получить объект с указанными аттрибутами\r\n\r\nModel.objects.values('attribut1__title')            \r\n# получить объект из связанной модели\r\n</code></pre>", "data": "2021-12-02T09:49:23.999Z", "update_data": "2021-12-04T15:03:27.276Z", "is_published": true, "image": "", "category": 3, "subcategory": 8, "slug": "agregatnye-funkcii", "author": null}}, {"model": "home.topic", "pk": 34, "fields": {"title": "Класс F, функции СУБД и Raw SQL", "description": "", "content": "", "html_content": "<p>Класс <b>F</b> рекомендуется использовать в тех случаях, когда необходимо изменить значение аттрибута</p>\r\n<pre><code>\r\n    # <b class='red'>как делать не рекомендуется</b>\r\n    object = Model.object.get(pk=num)\r\n    object.attribute += value          \r\n    object.save()\r\n\r\n\r\n    <b class='green'># рекомендуемая форма записи</b>\r\n    from django.db.models import F\r\n    object = Model.object.get(pk=num)  \r\n    object.attribute = F('attribute') + value\r\n    object.save()\r\n\r\n    Model.objects.filter(attribute1__icontains=F('attribute2'))\r\n</code></pre>\r\n\r\n<h3>Функции СУБД</h3>\r\n<p>СУБД поддерживают большой набор функций, используя функции СУБД вычисления переносятся со стороны языка программирования (Python) на сторону СУБД. Это рекомендуемая практика. В Django есть множество функций, которые являются обертками над функциями, которые будет выполнять СУБД. Для того, что бы начать работать с функциями СУБД необходимо из модуля <b>django.db.models.function</b> импортировать нужную функцию</p>\r\n\r\n<h3>Raw SQl</h3>\r\n<p><b>Raw SQL</b> это запросы написанные языком SQL</p>\r\n<pre><code>\r\n    Model.objects.raw('SELECT * FROM appname_modelname')        \r\n    # вывод всех объектов модели\r\n\r\n    Model.objects.raw(\"SELECT * FROM appname_modelname WHERE attribute = %s\", ['value'])\r\n    # найти объект, в котором указанный атрибут равен указанному значению\r\n</code></pre>", "data": "2021-12-02T09:49:56.026Z", "update_data": "2021-12-04T15:07:59.065Z", "is_published": true, "image": "", "category": 3, "subcategory": 8, "slug": "klass-f-funkcii-subd-i-raw-sql", "author": null}}, {"model": "home.topic", "pk": 35, "fields": {"title": "Django DEBUG Toolbar", "description": "", "content": "", "html_content": "<p>Пакет <b>Debug Toolbar</b> позволит отслеживать корректность работы приложения и определять насколько код приложения является оптимальным. Установить этот пакет можно воспользовавшись руководством установки с официального сайта <a href=\"https://django-debug-toolbar.readthedocs.io/en/latest/installation.html\">Debug Toolbar</a></p>\r\n<p>Теперь в пакете конфигурации проекта, в директиве <b>INSTALLED_APPS</b> необходимо его подключить <b>debug_toolbar</b>, в директиву <b>MIDDLEWARE</b> - <b>debug_toolbar.middleware.DebugToolbarMiddleware</b>, а так же в список <b>ip</b> адресов <b>INTERNAL_IPS</b> указать свой адрес или локальный адрес <b>'127.0.0.1'</b></p>\r\n<p>Теперь, в файле <b>urls</b> необходимо добавить условие, при котором, если мы находимся в режиме отладки, то создаться еще один путь:</p>\r\n<pre><code>\r\n    if settings.DEBUG:\r\n        import debug_toolbar\r\n        urlpatterns = [\r\n            path('__debug__/', include(debug_toolbar.urls)),\r\n        ] + urlpatterns\r\n</code></pre>\r\n<p>После установки этой утилиты на странице появиться панель в которой будет указана различная вкладочная информация, здесь нас в частности будет интересовать поле <b>SQL</b>-запросов. Если открыть эту вкладку, можно посмотреть, какие <b>SQL</b>-запросы вызывает приложение, первые два запроса вызываются в том случае если мы авторизованы. Желательно, что бы приложение не вызывало слишком много дублирующих однотипных запросов, так как это нагружает сервер</p>\r\n\r\n\r\n<h3>Метод select_related и prefetch_related</h3>\r\n<p>В Django есть понятие <b>ленивых</b> (отложенные запросы, которые выполняются только в момент запроса данных, их удобно использовать когда нужно выводить какие-либо неповторяющиеся статичные данные) и <b>сжатых</b> запросов. Метод <b>select_related</b> используется в том случае, когда необходимо создать сжатый запрос SQL, что означает, что информация, которая нам нужна, будет отображаться только по необходимости</p>\r\n<p>К примеру, есть <b>SQL</b>-запрос вывода списков объектов, и нужно, что бы данные загружались сжато, для этого вызываем метод <b>select_related</b> (для связи ForeignKey) или <b>prefetch_related</b> (для связи ManyToMany) и качестве параметра указывается связанное поле</p>\r\n<pre><code>\r\n    ---views.py\r\n\r\n    def Name(request):\r\n        model = Model.objects.all().select_related('attribut_with_ForeignKey')\r\n\r\n        or\r\n\r\n    class Name(ListView):\r\n        . . .\r\n\r\n        def get_queryset(self):\r\n            return Model.objects.all().select_related('attribut_with_ForeignKey')\r\n</code></pre>", "data": "2021-12-02T09:51:20.136Z", "update_data": "2021-12-04T12:21:45.749Z", "is_published": true, "image": "", "category": 3, "subcategory": 14, "slug": "django-debug-toolbar", "author": null}}, {"model": "home.topic", "pk": 36, "fields": {"title": "Постраничная навигация (pagination)", "description": "", "content": "", "html_content": "<p>Постраничная навигация это разбитие большого <b>SQL</b>-запроса на несколько страниц. Для того что бы использовать этот функционал необходимо импортировать класс <b>Paginator</b> из модуля <b>django.core.paginator</b>. Ниже приведены простые примеры использования пагинации</p>\r\n<pre><code>\r\nfrom django.core.paginator import Paginator\r\n>>> objects = Model.objects.all()\r\n\r\n>>> p = Paginator(objects, 2)               \r\n# объект класса пагинатора, который принимает в качестве \r\nпараметра список и кол. записей, которые будут \r\nотображаться на одной странице\r\n\r\n>>> p.count                           \r\n# выведет количество записей\r\n\r\n>>> p.num_pages              \r\n# выведет количество созданных страниц    \r\n    \r\n>>> p.page_range                            \r\n--->    range(1, 3)\r\n# вернёт диапазон страниц    \r\n</pre></code>\r\n<pre><code>\r\n>>> page1 = p.page(1)/ or / p.get_page(num)       \r\n# метод <b>page</b> берёт в качестве параметра  \r\nномер страницы и создает объект\r\n\r\n>>> page1.object_list                       \r\n# отображает содержимое объекта\r\n\r\n >>> page1.number         \r\n# выведет номер страницы    \r\n\r\n>>> page2 = p.page(2)\r\n>>> page2.has_next()                        \r\n--->    False   \r\n# есть ли следующая страница\r\n\r\n>>> page2.has_previous()                    \r\n--->    True\r\n# есть ли предыдущая страница \r\n\r\n>>> page2.has_other_pages()                 \r\n--->    True\r\n# если ли какие-то еще страницы\r\n\r\n>>> page2.next_page_number()                \r\n--->    Traceback (most recent call last):\r\nEmptyPage: That page contains no results\r\n# вернуть номер следующей страницы\r\n\r\n>>> page2.previous_page_number()            \r\n--->    1\r\n# вернуть номер предыдущей страницы\r\n</code></pre>\r\n<p>Пагинацию удобно использовать в классе <b>ListView</b>, всё что необходимо будет сделать, так это добавить свойство <b>paginate_by</b> которое будет отвечать за количество выводимых объектов на одной странице. После этого в шаблоне будут доступны следующие объекты класса <b>Paginator</b> это <b>paginator</b> объект в котором будут вызываться функции связанные с диапазонами типа <b>page_range</b> и объект <b>page_obj</b> над которым можно производить операции связанные с получением объекта</p>\r\n<p>В случае, если используются функции представления, то что бы добавить пагинацию необходимо будет произвести ряд настроек:</p>\r\n<pre><code>\r\n    def view(request):\r\n        model = Model.objects.all()\r\n        paginator = Paginator(model, num)\r\n        page_number = request.GET.get('page', 1)         # получаем номер текущей страницы, если \r\n                                                           такого параметра нет, то подставиться 1\r\n        page_obj = paginator.get_page(page_number)      \r\n\r\n        return render(request, 'path/page.html', context={'page_obj': page_obj})\r\n</code></pre>\r\n\r\n<p>В шаблоне выведем содержимое страниц, а так же добавим блок пагинации, нумерации страниц</p>\r\n<pre><code>\r\n    ---basic.html\r\n\r\n    {% if page_obj.has_other_pages%}\r\n\r\n        {% for page in page_obj %}\r\n            %lt;p> {{ page }} %lt;/p>\r\n        {% endfor %}\r\n\r\n        {% if page_obj.nas_previous %}\r\n            &lt;div>&lt;a href='?page={{ page_obj.previous_page_number }}'> Previous &lt;/a>&lt;/div>\r\n        {% endif %}\r\n\r\n        {% for num in page_obj.paginator.page_range %}\r\n            {% if page_obj.paginator.number == num %}\r\n                &lt;div class='emphasis'>&lt;a href='#'> {{ num }} &lt;/a>&lt;/div>\r\n            {% elif num > page_obj.number|add:-3 and num &lt; page.obj.number|add:3 %}\r\n                &lt;div>&lt;a href='?page={{ num }}'> {{ num }} &lt;/a>&lt;/div>\r\n            {% endif %}\r\n        {% endfor %}\r\n\r\n        {% if page_obj.nas_next %}\r\n            &lt;div>&lt;a href='?page={{ page_obj.next_page_number }}'> Next &lt;/a>&lt;/div>\r\n        {% endif %}\r\n\r\n    {% endif %}\r\n</code></pre>", "data": "2021-12-02T09:51:41.849Z", "update_data": "2021-12-05T20:29:45.956Z", "is_published": true, "image": "", "category": 3, "subcategory": 15, "slug": "postranichnaya-navigaciya-pagination", "author": null}}, {"model": "home.topic", "pk": 37, "fields": {"title": "Регистрация", "description": "", "content": "", "html_content": "<p>В Django регистрация и авторизация создаётся достаточно просто, для начала создадим функцию отображения, которая будет возвращать форму регистрации <b>UserCreationForm</b> из модуля <b>django.contrib.auth.forms</b>, ссылку на страницу регистрации и путь в <b>urls.py</b>. Дальше в наших шаблонах создадим форму регистрации и авторизации</p>\r\n<p>Для функций представления :</p>\r\n<pre><code>\r\n    ---views.py\r\n\r\n    from django.contrib.auth.forms import UserCreationForm\r\n\r\n    def reg(request):\r\n        if request.method == 'POST'\r\n            form = UserCreationForm(request.POST)\r\n            if form.is_valid:\r\n                form.save()\r\n                return redirect('login')\r\n        else:\r\n            form = UserCreationForm()\r\n        return render(request, 'path/page.html', {'form': form})\r\n</code></pre>\r\n<p class=\"description\">Это простой способ создания контролерра для формы, при котором пользователь регестируется и перенаправляется к форме авторизации (она еще не создана). При этом новый пользователь уже добавлен в БД</p>\r\n\r\n<p>Для представления классов достаточно будет прописать:</p>\r\n<pre><code>\r\nclass RegUser(CreateView):\r\n    form_class = UserCreationForm\r\n    template_name = 'path/page.html'\r\n    success_url = reverse_lazy('login')\r\n</code></pre>\r\n\r\n<p class=\"description\">Аналогичная запись для класса представления</p>\r\n<p>В шаблонах добавляем ссылки на форму и прописываем форму</p>\r\n<pre><code>\r\n    ---basic.html\r\n\r\n    # ссылка на страницу регистрации и авторизации\r\n    &lt;a href='{% url 'name' %}'>Registration&lt;/a> | &lt;a href='{% url 'name' %}'>Login&lt;/a>\r\n</code></pre>\r\n<pre><code>\r\n    ---template_form.html\r\n\r\n    &lt;form method='post'>\r\n        {% csrf_token %}\r\n        {{ form.as_p }}\r\n        &lt;button type='submit'>Registration&lt;/button>\r\n    &lt;/form>\r\n</code></pre>", "data": "2021-12-02T09:52:25.996Z", "update_data": "2021-12-06T12:10:50.291Z", "is_published": true, "image": "", "category": 3, "subcategory": 9, "slug": "registraciya", "author": null}}, {"model": "home.topic", "pk": 38, "fields": {"title": "Flash-сообщения", "description": "", "content": "", "html_content": "<p>Flash-messages это короткие сообщения, которые всплывают после успешной или неуспешной отправки формы. Для создания такого сообщения, необходимо импортировать <b>messages</b> из модуля <b>django.contrib</b></p>\r\n<pre><code>\r\n    ---views.py\r\n\r\n    from django.contrib import massages\r\n\r\n    #универсальная запись\r\n    messages.add_message(request, messages.INFO, 'text')\r\n    \r\n    # другие методы:\r\n    messages.info(request, 'text')\r\n    messages.success(request, 'text')\r\n    messages.warning(request, 'text')\r\n    messages.error(request, 'text')\r\n    messages.debug(request, '%s SQL query' %count)\r\n</code></pre>\r\n\r\n<p>Пример:</p>\r\n<pre><code>\r\n---views.py\r\n\r\ndef registration(request):\r\n    if request.method == 'POST':\r\n        form = UserCreationForm(request.POST)\r\n        if form.is_valid:\r\n            form.save()\r\n            messages.success(request, 'Successful registration!')\r\n            return redirect('home')\r\n        else:\r\n            messages.error(request, 'Unsuccessful registration!')\r\n    else:\r\n        form = UserCreationForm()\r\n    return render(request, 'home/form.html', {'form': form, 'title': 'Registration'})\r\n</code></pre>\r\n\r\n<p>Далее необходимо отобразить сообщение в шаблоне (<b>basic.html</b>). Ниже представлени пример стандартной записи:</p>\r\n<pre><code>\r\n---basic.html\r\n\r\n{% if messages %}\r\n    {% for message in messages %}\r\n        {% if message.tags == 'success' %}\r\n            &lt;div class=\"success\" role=\"alert\">{{ message }}&lt;/div>\r\n        {% elif message.tags == 'error' %}\r\n              &lt;div class=\"error\" role=\"alert\">{{ message }}&lt;/div>\r\n        {% else %}\r\n              &lt;div class=\"message_else\" role=\"alert\">{{ message }}&lt;/div>\r\n        {% endif %}\r\n    {% endfor %}\r\n{% endif %}\r\n</code></pre>", "data": "2021-12-02T09:53:02.751Z", "update_data": "2021-12-06T14:56:05.836Z", "is_published": true, "image": "", "category": 3, "subcategory": 9, "slug": "flash-soobsheniya", "author": null}}, {"model": "home.topic", "pk": 39, "fields": {"title": "Кастомизация формы регистрации", "description": "", "content": "", "html_content": "<p>Кастомизирование формы происходит в файле <b>forms.py</b>, в нём необходимо импортировать класс b<b>UserCreationForm</b>, так же необходимо импортировать модель <b>User</b> из модуля <b>django.contrib.auth.models</b>. Дальше создаём свой класс, который будет наследовать класс <b>UserCreationForm</b> и здесь можно настраивать дополнительные поля при необходимости. В классе <b>Meta</b> укажем с какой моделью форма будет связанна и в каком порядке будут выводиться поля</p>\r\n<pre><code>\r\n    ---forms.py\r\n    from django.contrib.auth.models import User\r\n    from django.contrib.auth.forms import UserCreationForm\r\n\r\n    class UserReg(UserCreationForm):\r\n        username = forms.CharField(label='User_Name', \r\n                    widget=forms.TextInput(attrs={'class': 'style'}))\r\n        password1 = forms.CharField(label='Password', \r\n                    widget=forms.PasswordInput(attrs={'class': 'style'}))\r\n        password2 = forms.CharField(label='Repeat Password',\r\n                    widget=forms.PasswordInput(attrs={'class': 'style'}))\r\n        email = form.EmailField(label='Email', \r\n                    widget=forms.EmailInput(attrs={'class': 'style'}))\r\n\r\n        class Meta:\r\n            model = User\r\n            fields = ('username' 'email', 'password1', 'password2')\r\n</code></pre>\r\n<p class=\"description\">После небольшой кастомизации формы в функции представления необходимо будет уже наследовать новый созданный класс вместо <b>UserCreationForm</b>, предварительно импортировав его</p>\r\n<p class=\"description\">Что бы у поля была стока подсказывающая формат ввода поля можно использовать аттрибут <b>help_text='hint'</b> в качестве параметра для необходимого поля</p>", "data": "2021-12-02T09:53:23.821Z", "update_data": "2021-12-06T14:56:53.904Z", "is_published": true, "image": "", "category": 3, "subcategory": 9, "slug": "kastomizaciya-formy-registracii", "author": null}}, {"model": "home.topic", "pk": 40, "fields": {"title": "Авторизация", "description": "", "content": "", "html_content": "<p>Авторизация это процесс который разбит на несколько этапов, первый это аутентификация (проверка на наличие пользователя) и авторизация (подтверждения логина и пароля). Для авторизации можно воспользоваться готовой стандартной формой или создать свою собственную с помощью встроенных функций <b>authenticate</b> и <b>login</b> из модуля <b>django.contrib.auth</b></p>\r\n<p>Для аутентификации пользователя можно использовать модель <b>AuthenticationForm</b> из модуля <b>django.contrib.auth.forms</b>, эта форма избавляет от необходимости вызова функции <b>authenticate</b>. Дальше создадим класс, который будет наследовать импортированную модель и указываем два поля, которые отвечают за имя пользователя и пароль</p>\r\n<pre><code>\r\n    ---forms.py\r\n    class UserLog(AuthenticationForm):\r\n        username = forms.CharField(label='User_Name', \r\n                    widget=forms.TextInput(attrs={'class': 'style'}))\r\n        password = forms.CharField(label='Password', \r\n                    widget=forms.PasswordInput(attrs={'class': 'style'}))\r\n</code></pre>\r\n\r\n<p>В файле представления записываем функцию и условие, при котором если данные пришли методом <b>POST</b>, то мы создаём переменную, которая будет принимать данные из формы и валидировать их (аутентифицировать), затем нужно будет принять данные пользователя с помощью функции <b>get_user</b>, и дальше вызвать функцию <b>login</b> (первым параметром она принимает <b>request</b> (объект запроса), а вторым объект аутентифицированного пользователя <b>form.get_user</b>). Затем можем сделать перенаправление на пользовательскую страницу, или любую другую. В противном случае, если данные пришли иным способом, то создадим форму не связанную с данными</p>\r\n<pre><code>\r\n    ---views.py\r\n\r\n    from django.contrib.auth.forms import AuthenticationForm\r\n    from django.contrib.auth import login, logout\r\n\r\n    def log(request):\r\n        if request.method == 'POST'\r\n            form = UserLog(data=request.POST)\r\n            if form.is_valid:\r\n                user = form.get_user()\r\n                login(request, user)\r\n                return redirect('page.html')\r\n        else:\r\n            form = UserLog()\r\n            return render(request, 'path/page.html', {'form': form})\r\n</code></pre>\r\n<p class=\"description\">Для того, что бы после регистрации пользователя сразу же авторизовать, можно внести вправки в функцию представления регистрации, добавив метод <b>login</b> после сохранения пользователя</p>\r\n\r\n<p>Для представлений классов это будет выглядеть так:</p>\r\n<pre><code>\r\n    ---views.py\r\n\r\n    class LogUser(MyMixin, LoginView):\r\n        form_class = AuthenticationForm\r\n        template_name = 'path/file.html'\r\n\r\n        def get_success_url(self):\r\n            return reverse_lazy('home')\r\n\r\n</code></pre>\r\n<p>Для того, что бы пользователь после авторизации был переведён на нужную страницу необходимо создать специальный метод.</p>\r\n<pre><code>\r\n    ---views.py\r\n\r\n    class LogUser(MyMixin, LoginView):\r\n        . . .\r\n\r\n        deg get_success_url(self):\r\n            return reverse_lazy('url_name')\r\n</code></pre>\r\n<p class=\"description\">Есть еще один способ как перенаправлять пользователя на нужную страницу, он заключается в том, что потребуется прописать директиву <b>LOGIN_REDIRECT_URL</b> в файле конфигураций</p>\r\n\r\n<p>Шаблон можно создать по принципу создания шаблона для регистрации. Для того, что бы у авторизованного пользователя отображалась функция выхода из учётной записи, можно добавить условие <b>is_authenticated</b> и затем уже отображать всё необходимое. Для того, что бы создать возможность выхода, достаточно создать новый путь в файле <b>urls.py</b> и функцию, в которой просто вызовем функцию <b>logout</b> и передадим параметр <b>request</b>, и затем произведём редирект на нужную страницу</p>\r\n<pre><code>\r\n    ---views.py\r\n\r\n    def log_out(request):\r\n        logout(request)\r\n        return redirect('url_name')\r\n\r\n\r\n    ---template.html\r\n    {% if request.user.is_authenticated %}\r\n        Welcome, {{ user.username}} | &lt;a href=\"{% url 'logout' %}\"Logout&lt;/a>\r\n    {% else %}\r\n    &lt;a href=\"{% url 'register' %}\"Register&lt;/a> | &lt;a href=\"{% url 'login' %}\"Login&lt;/a>\r\n    {% endif %}\r\n</code></pre>\r\n<p>Для того, что бы после регистрации пользователь авторизовался автоматически, необходимо немного использовать метод <b>form_valid</b> для контролеров класа, он вызываеться когда форма регистрации прошла валидацию</p>\r\n<pre><code>\r\n    ---views.py\r\n\r\n    from django.contrib.auth.forms import UserCreationForm        \r\n\r\n    class RegUser(MyMixin, CreateView):\r\n        form_class - UserCreationForm\r\n        template_name = 'path/file.html'\r\n        success_url = reverse_lazy('login')\r\n\r\n        def form_valid(self, form):\r\n            user = form.save()\r\n            login(self.request, user)\r\n            return redirect('url_name')\r\n</code></pre>\r\n<p>Для контролера функции это выглядит так:</p>\r\n<code><pre>\r\n    def registration(request):\r\n    if request.method == 'POST':\r\n        form = RegisterUser(request.POST)\r\n        if form.is_valid():\r\n            user = request.user\r\n            login(request, user)\r\n            form.save()\r\n            messages.success(request, 'Successful registration!')\r\n            return redirect('home')\r\n        else:\r\n            messages.error(request, 'Unsuccessful registration!')\r\n    else:\r\n        form = RegisterUser()\r\n    return render(request, 'home/form.html', {'form': form, 'title': 'Registration'})\r\n</code></pre>\r\n\r\n\r\n<h3>Ограничения</h3>\r\n<p>Для того, что бы страница была доступна только определенному лицу (администратору) используется декоратор <b>login_required</b>, который импортируется из модуля <b>django.contrib.auth.decorators</b></p>\r\n<pre><code>\r\nfrom django.contrib.auth.decorators import login_required\r\n\r\n@login_required\r\ndef my_views(request):\r\n    if not request.user.is_authenticated:\r\n        return render(request, '/page.html')\r\n</code></pre>'\r\n\r\n\r\n<p>Можно ограничить доступ к целому блоку или ссылки для неавторизованных пользователей путём добавления следующей кода:</p>\r\n<pre><code>\r\n{% if request.user.is_authenticated %}\r\n--- block of content ---\r\n{% endif %}\r\n</code></pre>\r\n\r\n<p>Для того, что бы страница была доступна только определенному лицу (администратору) используется миксин <b>LoginRequiredMixin</b> из модуля <b>django.contrib.auth.mixins</b>. Теперь, если пользователь не авторизован (как админ или сотрудник), то ему будет отказан доступ к странице. Дополнительно можно определить параметр <b>login_url</b> и путь куда будет перенаправлен пользователь, или же можно возбудить сообщение об ошибке 404</p>\r\n<pre><code>\r\nfrom django.contrib.auth.mixins import LoginRequiredMixin\r\n\r\nclass MyView(LoginRequiredMixin, View):\r\n    login_url = reverse_lazy('login')\r\n    raise_exception = True\r\n</code></pre>", "data": "2021-12-02T09:54:03.555Z", "update_data": "2021-12-06T18:17:06.384Z", "is_published": true, "image": "", "category": 3, "subcategory": 9, "slug": "avtorizaciya", "author": null}}, {"model": "home.topic", "pk": 41, "fields": {"title": "Отправка писем на Email", "description": "", "content": "", "html_content": "<p>Для создания такого функционала потребуется для начала настроить директивы:\r\n    <br><b>EMAIL_HOST</b> - хост который будет использован, для отправки смс\r\n    <br><b>EMAIL_PORT</b> - подходящий порт, через который будет осуществлена связь, его необходимо уточнять\r\n    <br><b>EMAIL_HOST_USER</b> - здесь указывается имя пользователя для доступа к электронной почте\r\n    <br><b>EMAIL_HOST_PASSWORD</b> - пароль электронной почты с которой будет отправляться письмо\r\n    <br><b>EMAIL_USER_TLS</b> - тип защищенного порта, по умолчанию выставленное в <b>False, уточнять\r\n    </b><br><b>EMAIL_USE_SSL</b> - второй тип защищенного порта, по умолчанию выставленное в <b>False, уточнять</b></p>\r\n<pre><code>\r\n    ---settings.py\r\n\r\n    EMAIL_HOST = 'smtp.email.com'\r\n    EMAIL_PORT = num\r\n    EMAIL_HOST_USER = 'user_name@email.com'\r\n    EMAIL_HOST_PASSWORD = 'password'\r\n    EMAIL_USER_TLS = False\r\n    EMAIL_USER_SSL = False\r\n</code></pre>\r\n\r\n<p>Дальше необходимо создать контактную форму, через которую будут отправляться письма</p>\r\n<pre><code>\r\n    class SendEmail(forms.Form):\r\n        subjects = forms.CharField(label='Subject', \r\n                    widget=forms.TextInput(attrs={'class': 'style'}))\r\n        content = forms.CharField(label='Content', \r\n                    widget=forms.TextareaInput(attrs={'class': 'style', 'rows': 5}))\r\n</code></pre>\r\n\r\n<p>Далее в файле представлений страниц необходимо будет импортировать функцию <b>send_mail</b> из модуля <b>django.core.mail</b>. Эта функция имеет ряд необходимых параметров, таких как: тема, сообщение, отправитель, получатель, сообщение об ошибке. Далее создадим собственно форму и типичное условие</p>\r\n<pre><code>\r\n    from .forms import SendEmail\r\n    from django.core.mail import send_mail\r\n\r\n    def sendmail(request):\r\n        if request.method == 'POST'\r\n            form = SendEmail(request.POST)\r\n            if form.is_valid:\r\n                mail = send_mail(form.cleaned_data['subject'], form.cleaned_data['content'], 'user_name@email.com', ['user2_name@email.com'], fail_silently=False/True)\r\n                if mail:\r\n                    messages.success(request, 'Message sent successfully')\r\n                    return redirect('page.html')\r\n                else:\r\n                    messages.error(request, 'Message sent fail')\r\n            else:\r\n                messages.error(request, 'Fail validation')\r\n        else:\r\n            form = SendEmail()\r\n      return render(request, 'path/page.html', {'form': form})\r\n</code></pre>\r\n<pre><code>\r\n    ---template.html\r\n\r\n    &lt;form method='post'>\r\n    {% csrf_token%}\r\n    {{ form.as_p }}\r\n    &lt;button type='submit' class='style'>Send message&lt;/button>\r\n    &lt;/form>\r\n</code></pre>", "data": "2021-12-02T09:55:36.959Z", "update_data": "2021-12-07T17:54:04.233Z", "is_published": true, "image": "", "category": 3, "subcategory": 16, "slug": "otpravka-pisem-na-email", "author": null}}, {"model": "home.topic", "pk": 42, "fields": {"title": "Капча", "description": "", "content": "", "html_content": "<p>Капча это тест проверяющий является ли юзер ботом, для создания такого функционала установим пакет <b>simple captcha</b> с помощью команды <code>pip install django-simple-captcha</code>. Теперь необходимо произвести некоторые настройки, для того что бы всё заработало.\r\n    <br>Для начала добавим капчу в список установленный приложений\r\n    <br>Далее необходимо выполнить миграцию, так как капча использует БД\r\n    <br>Теперь в файле формы импортируем модель <b>CaptchaField</b> и определим в форме аттрибут <b>captcha</b> со значением модели</p>\r\n<p class=\"description\">Для формы связанной с моделью аттрибут <b>captcha</b> определятся в классе <b>Meta</b></p>\r\n<pre><code>\r\n    ---settings.py\r\n\r\n    INSTALLED_APPS = [\r\n        . . . \r\n        'captcha',\r\n    ]\r\n\r\n    ---urls.py\r\n    urlpatterns = [\r\n        path('captcha', include('captcha.urls')),\r\n    ]\r\n\r\n    ---forms\r\n    from captcha.fields import CaptchaField\r\n\r\n    class Form(forms.Form):\r\n        . . .\r\n        captcha = CaptchaField(widget=CustomCaptchaTextInput)\r\n</code></pre>\r\n<p class=\"description\">За дополнительной настройкой капчи можно обратиться по этой <a href=\"https://django-simple-captcha.readthedocs.io/en/latest/advanced.html#\">ссылке.</a> Здесь представлено большое количество конфигураций, которые настраиваются в файле <b>settings.py</b></p>\r\n\r\n<p>Для кастомизации каптчи используется особенный метод добавления виджета. Для этого необходимо импортировать дополнительную модель <b>CustomCaptchaTextInput</b>. Также создать класс, который будет наследовать модель <b>CustomCaptchaTextInput</b> и в котором необходимо определить аттрибут <b>template_name</b> с ссылкой на шаблон. И затем уже можно будет создать кастомный шаблон для капчи</p>\r\n<pre><code>\r\n    ---forms\r\n    from captcha.fields import CaptchaField, CustomCaptchaTextInput\r\n\r\n    class Form(forms.Form):\r\n        field = 'path/file.html'\r\n\r\n\r\n    class Form(forms.Form):\r\n        . . .\r\n        captcha = CaptchaField(widget=CustomCaptchaTextInput)\r\n</code></pre>", "data": "2021-12-02T09:55:56.741Z", "update_data": "2021-12-07T18:55:12.543Z", "is_published": true, "image": "", "category": 3, "subcategory": 17, "slug": "kapcha", "author": null}}, {"model": "home.topic", "pk": 43, "fields": {"title": "Визуальный редактор CKEditor", "description": "", "content": "", "html_content": "<p>Данный визуальный редактор позволит расширить функционал добавления контента, с помощью него пользователь сможет применять классические стили к тексту, а так же это еще и файловый менеджер, который может работать с изображениями и другими файлами.</p>\r\n<p>Для начала этот редактор нужно установить с помощью команды <b>pip install django-ckeditor</b>. Затем в файле настроек необходимо добавить этот пакет в директиву <b>INSTALLED_APPS</b>, так же должна быть настроена директива <b>STATIC_ROOT</b>, после чего необходимо выполнить команду <b>python manage.py collectstatic</b>. Далее необходимо добавить константу <b>CKEDITOR_UPLOAD_PATH = 'uploads/'</b>, она указывает куда редактор будет загружать изображения, и загружаться они будут в директорию <b>media</b>, которая должна быть так же настроена</p>\r\n<pre><code>\r\n    ---settings.py\r\n\r\n    INSTALLED_APPS = [\r\n        . . .\r\n        'ckeditor',\r\n        'ckeditor_uploader'\r\n    ]\r\n\r\n    . . .\r\n\r\n    CKEDITOR_UPLOAD_PATH = 'uploads/'\r\n</code></pre>\r\n<p class=\"description\">Если в настройках добавить базовую конфигурацию <b>CKEditor</b> (которую можно посмотреть по <a href=\"https://pypi.org/project/django-ckeditor/\">ссылке</a>) то можно расширить возможности редактора. Так же можно установить дополнительные <a href=\"https://ckeditor.com/docs/ckeditor4/latest/guide/dev_skins.html\">скины, которые изменят дизайн интерфейса</a></p>\r\n\r\n<p>В корневом файле <b>urls.py</b> необходимо добавить соответствующий маршрут</p>\r\n<pre><code>\r\n    ---urls.py\r\n\r\n    urlpatterns [\r\n        . . . \r\n        path('ckeditor/', include('ckeditor_uploader.urls')),\r\n    ]\r\n</code></pre>\r\n<p>Теперь можно приступить к встраиванию самого виджета. Настраивается это в файле <b>admin</b> и первым, что необходимо сделать, это импортировать <b>CKEditorWidget</b> (работа только с текстом) или <b>CKEditorUploadingWidget</b> (работа с текстом и файлом) и функцию <b>forms</b> из модуля <b>django</b>. Затем нужно создать класс, который будет наследовать класс <b>ModelForm</b>. Переопределим поле, которое будет редактируемо и передадим туда нужный виджет. Далее создадим класс <b>Meta</b> в котом будем описывать с какой моделью будет связь и какие поля из модели нужны</p>\r\n<pre><code>\r\n    from django import forms\r\n    from ckeditor_uploader.widgets import CKEditorUploadingWidget\r\n\r\n    class My_CKEditorAdminForm(forms.ModelForm)\r\n        content = forms.CharField(widget=CKEditorUploadingWidget())\r\n\r\n        class Meta:\r\n            model = Model\r\n            fields = '__all__'\r\n</code></pre>\r\n<p>После создания модели, её необходимо добавить в класс, в котором мы указывали настройку для админки. Делаться это с помощью аттрибута <b>form</b>, где мы указываем название созданной модели</p>", "data": "2021-12-02T09:56:18.583Z", "update_data": "2021-12-07T19:04:44.070Z", "is_published": true, "image": "", "category": 3, "subcategory": 18, "slug": "vizualnyj-redaktor-ckeditor", "author": null}}, {"model": "home.topic", "pk": 44, "fields": {"title": "Система кеширование Django", "description": "", "content": "", "html_content": "<p>Кеширование позволяет значительно снизить нагрузку на сайт. Кеш в Django представлен в нескольких видах, один из самых эффективных это <b>Memcached</b> (оперативная память), так же есть кеширование в БД, для этого создаться специальная таблица, для хранения кеша (менее эффективный и распространённый), и так же есть кеширование в файловую систему, где создаётся файл с кешем</p>\r\n\r\n<h3>Кеширование в файл</h3>\r\n<p>Для того, что бы работать с кешированием необходимо в файле <b>settings.py</b> настроить константу <b>CACHES</b>, куда передаётся словарь, в котором содержится ключ <b>default</b>, который представляет из себя словарь, в котором необходимо настроить ключи <b>BACKEND</b> (в котором укажем на вид кеширования) и <b>LOCATION</b> (указывается путь, где будет располагаться файл с кешем (необходимо создать директорию в корне проекта и указать её).</p>\r\n<p>Так же есть дополнительные параметры, для управления поведением кеширования, такие как например <b>TIMEOUT</b> (время устаревания кеша в секундах), больше можно посмотреть, перейдя по <a href=\"https://docs.djangoproject.com/en/3.2/topics/cache/\">ссылке</a>.</p>\r\n<pre><code>\r\n    ---settings.py\r\n\r\n    CACHES = {\r\n    'default': {\r\n        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',\r\n        'LOCATION': '/absolute/path/django_cache',\r\n    }\r\n}\r\n</code></pre>\r\n\r\n\r\n<h3>Кэширование на уровне представления</h3>\r\n<p>Для кэширование отдельных частей сайта, можно воспользоваться кэшированием на уровне представления, при использовании <b>контроллеров функции</b> в файле <b>views.py</b> импортируется декоратор <b>cache_page</b> (который принимает в качестве параметра время в секундах) из модуля <b>django.views.decorators.cache</b></p>\r\n<pre><code>\r\n    ---views.py\r\n\r\n    from django.views.decorators.cache import cache_page\r\n\r\n    @cache_page(60*15)\r\n    def my_page(request):\r\n        . . .\r\n</code></pre>\r\n<p>При использовании <b>контроллеров классов</b> кеш определяться на уровне представления <b>URLconf</b></p>\r\n<pre><code>\r\n    ---urls.py\r\n\r\n    from django.views.decorators.cache_page\r\n\r\n    urlpatterns = [\r\n        path('path/', cache_page(60*15)(def_view)), name='name')\r\n    ]\r\n</code></pre>\r\n\r\n\r\n<h3>Кеширование фрагмента шаблона</h3>\r\n<p>Для кэширования только части шаблона необходимо в шаблон подгрузить <b>{% load cache %}</b> и поместить необходимую область для кеширования в тег <b>cache</b>, который принимает параметр время в секундах и название блока</p>\r\n<pre><code>\r\n    ---template.html\r\n\r\n    {% load cache %}\r\n    {% cache 900 sidebar %}\r\n        {% block sidebar %}\r\n        {% endblock %}\r\n    {% endcache %}\r\n</code></pre>\r\n\r\n\r\n<h3>API для низкого уровня</h3>\r\n<p>Еще один метод кеширования, при котором мы записываем данные из БД в кеш с помощью функции <b>set</b>, которая принимает на себя такие параметры, как название ключа, данные которые туда сохраняются и время. Если в кеше уже записанные данные, то функция <b>get</b> их отобразит</p>\r\n<pre><code>\r\n    def view(request):\r\n        categories - cache.get('categories')\r\n    if not categories:\r\n        categories = Category.objects.all()\r\n        cache.set('categories', categories, 30)\r\n</code></pre>\r\n\r\n\r\n<h3>Кеширование всего сайта</h3>\r\n<p>Кеширование всего сайта осуществляется через настройку директивы <b>MIDDLEWARE</b> (релевантно использовать если ваш сайт обновляется редко)</p>\r\n<pre><code>\r\n    MIDDLEWARE = [\r\n        'django.middleware.cache.UpdateCacheMiddleware',\r\n        'django.middleware.common.CommonMiddleware',\r\n        'django.middleware.cache.FetchFromCacheMiddleware',\r\n    ]\r\n</code></pre>", "data": "2021-12-02T09:56:43.494Z", "update_data": "2021-12-07T20:22:33.108Z", "is_published": true, "image": "", "category": 3, "subcategory": 19, "slug": "sistema-keshirovanie-django", "author": null}}, {"model": "home.topic", "pk": 45, "fields": {"title": "Тонкая настройка (кастомизация) админки", "description": "", "content": "", "html_content": "<p>По умолчанию шаблон админки расположен по маршруту <b>/lib/python3.8/site-packages/django/contrib/admin/templates/admin/base.html</b>. Django предоставляет возможность собственноручно создать шаблон админки или изменить его, для этого необходимо в директории проекта создать папку под названием <b>admin</b> и в нём создать файл <b>base_site</b>. И теперь Django будет искать шаблон для админки именно по этому пути. Дальше можно скопировать содержимое <b>base_site</b> из админки и поместить в новый шаблон</p>\r\n<p>Для того, что бы подключить свои стили в базовом шаблоне админки <b>base,html</b> есть блок <b>extrastyle</b> в котором можно подключать свои файлы стилей. Для этого в каталоге <b>статик</b> создаётся папка <b>admin</b> и в неё папка <b>CSS</b></p>\r\n<pre><code>\r\n    ---my_base_site.html\r\n\r\n    {% load static %}\r\n    {% block extrastyle %}\r\n        &lt;link rel='stylesheet' href='{% static 'admin/css/admin.css' %}'>\r\n    {% endblock %}\r\n</code></pre>\r\n<p class='description'>Далее можно переназначать стили для тегов, узнать какие <b>CSS</b>-классы используются для тех или иных тегов можно просто открыв код страницы</p>\r\n<p>Так же в базовом шаблоне используются такие теги, как <b>site_title</b> и <b>site_header</b>, которые можно переопределить в файле admins.py таким образом:</p>\r\n<pre><code>\r\n    ---admins.py\r\n\r\n    admin.site.site_title = 'My Title'\r\n    admin.site.site_header = 'My Header'\r\n</code></pre>\r\n<p>Создание метода, который будет возвращать HTML код файла, например будет отображать картинку, вместо ссылки. Данный метод принимает обязательный аттрибут <b>self</b>, а также сам объект записи <b>obj</b>. Теперь для того, что бы отрабатывал HTML, этот метод должен возвращать функцию <b>mark_safe</b>, который помещает данную строку, как HTML код и никак не экранирует её.</p>\r\n<pre><code>\r\n    from django.utils.safestring import mark_safe\r\n\r\n\r\n    class AppsAdmin(admin.ModelAdmin):\r\n        . . . \r\n        . . .\r\n\r\n        def get_image(self, obj):\r\n            if obj.photo:\r\n                return mark_safe(f\"&lt;img src='{obj.photo.url}'>\")\r\n\r\n        get_image.short_description = 'my_name'\r\n</code></pre>\r\n<p class='description'>В атрибуте <b>short_description</b> описывается то, как будет называться тот или иной метод в админке</p>\r\n<p>В атрибуте <b>fields</b> настраиваются поля, которые будут представлены в админке внутри объекта. Здесь можно указать какие поля нужно отображать при редактировании объекта, и в каком порядке их выводить. При этом, если есть нередактируемые поля, типа даты публикации, то в таком случае необходимо будет указать какие поля буду нередактируемыми</p>\r\n<pre><code>\r\n    class AppsAdmin(admin.ModelAdmin):\r\n        . . . \r\n        . . .\r\n        fields = ('attribut1', 'attribut2', ... , 'get_image')\r\n        readonly_fields = ('attribute1', 'attribute2', 'get_image')\r\n</code></pre>", "data": "2021-12-02T09:57:22.736Z", "update_data": "2021-12-04T12:21:49.557Z", "is_published": true, "image": "", "category": 3, "subcategory": 20, "slug": "tonkaya-nastrojka-kastomizaciya-adminki", "author": null}}, {"model": "home.topic", "pk": 46, "fields": {"title": "Развёртывание сайта на хостинге", "description": "", "content": "", "html_content": "<p>Хостинг - это услуга, которая предоставляет возможность размерения своего проекта на реальный вед сервер. Существует множество платформ, которые арендуют место на сервере, здесь будет использоваться платформа <a href=\"https://beget.com/ru\">beget.com</a> в учебных целях. После регистрации будет доступна админ-панель сайта, в которой потребуется перейти во вкладку <b>FTP</b> и активировать <b>SSH</b>. Далее переходим во вкладку <b>CMS</b> в которой будет представлен каталог различных фреймворков для установки, это означает, что <b>Django</b> можно установить в автоматическом режиме, или же можно установить вручную (по инструкции представленной на этой <a href=\"https://beget.com/ru/kb/how-to/web-apps/python\">странице</a>)</p>\r\n<p>Для начала потребуется установить клиент <b>PuTTy</b>, который можно скачать с официального <a href=\"https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html\">сайта</a>. <b>PuTTy</b> это клиент <b>SSH-</b> и <b>Telnet</b>  (Telnet - тот же SSH, только без шифрованной передачи данных (пакетов)), т.е. программа для безопасного подключения к удаленному компьютеру (или к серверу) и выполнения на нем различных команд. PuTTY ведет логи, позволяет настраивать шрифты, цвета и разрешение консоли, допускает сохранение в своей памяти ключей аутентификации, поддерживает работу через прокси-сервер. При этом утилита является бесплатной.</p>\r\n<p>Что бы установить <b>PuTTy</b> на <b>Linux</b> воспользуемся командами:</p>\r\n<pre><code>\r\n---user$ sudo apt-get update\r\n\r\n---user$ sudo apt-get install putty\r\n\r\n---user$ putty\r\n#запуск приложения\r\n</pre></code>\r\n<p>После запуска <b>PuTTy</b> появиться окно, в котором в поле <b>Host Name or IP address</b> нужно ввести имя домена, который можно посмотреть в своей админке хост-сайта во вкладке <b>управления сайтом</b>. Порт оставляйте по умолчанию 22. В поле <b>Saved Sessions</b> введите любое имя сессии (коннекта), и нажмите <b>Save</b>. После этого нажмите <b>Open</b> и отобразиться консольное окно, в котором нужно будет ввести логин и пароль (они будут отправленны по почте после регистрации). После успешного входа в систему, будет открыт доступ к удаленному серверу, это означает, что теперь есть возможность удаленно выполнять команды на стороне арендуемого сервера</p>\r\n\r\n<h3>Локальная установка Python на удалённый сервер</h3>\r\n<p>Следующая команда позволит войти в <b>Docker</b>, для того, что бы иметь возможность запускать интерпретатор <b>Python</b> и устанавливать необходимые пакеты. Далее будем следовать представленным <a href=\"https://beget.com/ru/kb/how-to/web-apps/python\">инструкциям</a></p>\r\n<pre><code>\r\n    user$ ssh localhost -p222\r\n    user$ mkdir -p ~/.beget/tmp\r\n    user$ cd ~/.beget/tmp\r\n    . . . \r\n</code></pre>\r\n<p class='description'>Для того, что бы просматривать файлы которые находятся на удаленном сервере используется <b>FTP</b> протокол. Протокол FTP в «чистом виде», хоть и является стандартом де-факто для переноса файлов между удаленными компьютерами, имеет серьезные проблемы с безопасностью (пароль передается по сети в незашифрованном виде). Поэтому рекомендуется использовать безопасные протоколы <b>FTPS</b> или <b>SFTP</b>.</p>\r\n\r\n\r\n<h3>Установка зависимостей виртуального окружения</h3>\r\n<p>Разберём как установить все дополнительные модули, которые используются на проекте. Для того, что бы узнать какие модули и какие версии установлены в проекте локально, можно воспользоваться следующей командой (она сформирует файл со списком установленных модулей)</p>\r\n<pre><code>\r\n    pip freeze > name.txt\r\n</code></pre>\r\n<p>Далее скопируем этот файл на сервер и затем, что бы выполнить установку этих зависимостей потребуется <b>SSH</b>-клиент. После запуска докера через <b>PuTTy</b> активируем виртуальное окружение и выполняем команду:</p>\r\n<pre><code>\r\n    pip install -r name.txt\r\n</code></pre>\r\n<p class=\"description\">Дополнительно можем установить <b>SQL</b> командой <code>mysqlclient</code></p>\r\n<p>Далее необходимо просто перебросить все необходимые файлы и папки которые непосредственно связанны с проектом. Теперь всё готово к тому, что бы изменить параметр <b>DEBUG</b> в <b>False</b>, что будет свидетельствовать о том, что проект запушен на продакшн. Дополнительно нужно будет прописать допустимые хосты, в которые передать адресное название сайта</p>\r\n<p>Также необходимо изменить директиву <b>DATABASES</b> где укажем настройки доступа к базе данных. Так же, в корневом каталоге сервера необходимо выполнить команду <b>migrate</b> и <b>collect static</b></p>\r\n<p class=\"description\"><b>Beget</b> ищет статику и медиа файлы в корневом каталоге в папке <b>public_html</b></p>\r\n<p>Что бы перекинуть данные из одной БД в другую можно воспользоваться встроенной командой <b>Django</b> - <b>dumpdata</b>, помощью которой реализуется бэкап (экспорт) БД. После чего создастся файл формата <b>.json</b> (использует кодировку <b>windows1251</b>) в котором необходимо изменить кодировку на <b>UTF-8</b></p>\r\n<pre><code>\r\n    python manage.py dumpdata --exclude auth.permission --exclude contenttypes > db.json\r\n</code></pre>\r\n<p>Далее копируем этот файл на хостинг и затем через удалённый доступ выполняется команда</p>\r\n<pre><code>\r\n    (docker) my_site: python manage.py loaddata db.json\r\n</code></pre>", "data": "2021-12-02T09:57:46.744Z", "update_data": "2021-12-09T10:27:57.945Z", "is_published": true, "image": "", "category": 3, "subcategory": 21, "slug": "razvyortyvanie-sajta-na-hostinge", "author": null}}, {"model": "home.topic", "pk": 47, "fields": {"title": "HTML синтаксис", "description": "", "content": "", "html_content": "<p><b>HTML</b> (HyperText Markup Language) is the most basic building block of the Web. It defines the meaning and structure of web content. Other technologies besides HTML are generally used to describe a web page's appearance/presentation (CSS) or functionality/behavior (JavaScript).</p>\r\n    </article>\r\n\r\n\r\n    <article id='HTML_preamble'>\r\n      <h2>Here is an example of HTML preable</h2>\r\n      <pre class='code'>\r\n        <code>\r\n          &lt;<span id='gray'>!DOCTYPE html</span>>\r\n          &lt;<span id='red'>html</span>>\r\n            &lt;<span id='red'>head</span>>\r\n              &lt;<span id='red'>meta</span><span id='orange'> charset</span>=<span id='green'>\"utf-8\"</span>>\r\n              &lt;<span id='red'>title</span>> -- Some title --&lt;/<span id='red'>title</span>>\r\n            &lt;/<span id='red'>head&gt</span>>\r\n          &lt;<span id='red'>body</span>>\r\n          &lt;/<span id='red'>body</span>>\r\n          &lt;/<span id='red'>html</span>>\r\n        </code>\r\n      </pre>\r\n      <h3>The meaning of the following construction is:</h3>\r\n      <table>\r\n        <tr>\r\n          <td id='table_header'><code><b>&lt;<span id='gray'>!DOCTYPE html</span></b></code></td>\r\n          <td>It is a required preamble. In the mists of time, when HTML was young (around 1991/92),\r\n            doctypes were meant to act as links to a set of rules that the HTML page had to follow to be\r\n            considered good HTML, which could mean automatic error checking and other useful things.\r\n            However these days, they don't do much and are basically just needed to make sure your document\r\n            behaves correctly. That's all you need to know for now.</td>\r\n        </tr>\r\n        <tr>\r\n          <td id='table_header'><code>&lt;<span id='red'>html</span></code></td>\r\n          <td>The <code>&lt;<span id='red'>html</span>></code> element. This element wraps all the content on the entire page and is\r\n            sometimes known as the root element.</td>\r\n        </tr>\r\n        </tr>\r\n          <td id='table_header'><code>&lt;<span id='red'>head</span></code></td>\r\n          <td>The <code>&lt;<span id='red'>head</span>&gt;</code> element. This element acts as a container for all the stuff you want to\r\n            include on the HTML page that isn't the content you are showing to your page's viewers. This\r\n            includes things like keywords and a page description that you want to appear in search results,\r\n            CSS to style our content, character set declarations, and more.</td>\r\n        </tr>\r\n          <td id='table_header'><code>&lt;<span id='red'>meta</span><span id='orange'> charset</span>=<span id='green'>\"utf-8\"</span></code></td>\r\n          <td>This element sets the character set your document should use to <code><span id='green'>UTF-8</span></code> which includes most\r\n            characters from the vast majority of written languages. Essentially, it can now handle any textual\r\n            content you might put on it. There is no reason not to set this and it can help avoid some problems\r\n            later on.</td>\r\n        </tr>\r\n          <td id='table_header'><code>&lt;<span id='red'>title</span>. . .&lt;/<span id='red'>title</span></code></td>\r\n          <td>The <code>&lt;<span id='red'>title</span>&gt;</code> element. This sets the title of your page, which is the title that appears\r\n            in the browser tab the page is loaded in. It is also used to describe the page when you\r\n            bookmark/favorite it.</td>\r\n        </tr>\r\n          <td id='table_header'><code>&lt;<span id='red'>body</span></code></td>\r\n          <td>The <code>&lt;<span id='red'>body</span>&gt;</code> element. This contains all the content that you want to show to web users when\r\n            they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever\r\n            else</td>\r\n        </td>\r\n      </table>", "data": "2021-12-04T21:47:49.121Z", "update_data": "2021-12-08T09:04:31.980Z", "is_published": false, "image": "", "category": 1, "subcategory": 24, "slug": "html-synt", "author": null}}, {"model": "home.topic", "pk": 48, "fields": {"title": "Базовые теги", "description": "", "content": "", "html_content": "<h2>Semantic tags</h2>\r\n      <div class='tabl'>\r\n        <div>\r\n          <div><code>&lt;<span id='red'>h1</span>>header&lt;<span id='red'>h1</span>></code></div>\r\n          <div>(also h1, h2 … h6), the number convey the front-size)</div>\r\n        </div>\r\n        <div>\r\n          <div><code>&ltp&gtparagraph&lt/p&gt</code></div>\r\n          <div></div>\r\n        </div>\r\n        <div>\r\n          <div><b>&ltbr&gt</b>></div>\r\n          <div><small> (new line)</small></div>\r\n        </div>\r\n        <div>\r\n          <div><strong>&lta&gt</strong><i>anchor element</i><strong>&lt/a&gt</strong></div>\r\n          <div>and it's inherent attributes:</div>\r\n        </div>\r\n        <div>\r\n          <div class=\"sub\"><b>&lt href=“link”></b></div>\r\n          <div></div>\r\n        </div>\r\n        <div>\r\n          <div class=\"sub\"><b>&lt title=“some explanation”></b></div>\r\n          <div></div>\r\n        </div>\r\n        <div>\r\n          <div class=\"sub\"><b>&lt target=“blank”></b></div>\r\n          <div></div>\r\n        </div>\r\n        <div>\r\n          <div>&ltimg src=“image link&gt</div>\r\n          <div>attributes:</div>\r\n        </div>\r\n        <div>\r\n          <div class=\"sub\"><b>&lta width=“pxl”></b></div>\r\n          <div></div>\r\n        </div>\r\n        <div>\r\n          <div class=\"sub\"><b>&lta height=“pxl”>></b></div>\r\n          <div></div>\r\n        </div>\r\n        <div>\r\n          <div class=\"sub\">&lta alt=</div>\r\n          <div>descriptive text for those who can’t see the img</div>\r\n        </div>\r\n\r\n        <div>\r\n          <div>&lt;ul>unordered list&lt;/ul></div>\r\n          <div>commonly represents with dots</div>\r\n        </div>\r\n        <div>\r\n          <div>&lt;ol>ordered list&lt;/ol></div>\r\n          <div>commonly represents with ord number</div>\r\n        </div>\r\n        <div>\r\n          <div>&lt;li>ordered list&lt;/li></div>\r\n          <div>using for separate list item from each one. Attributes:</div>\r\n        </div>\r\n        <div>\r\n          <div class=\"sub\">&lt;li value=“num”></div>\r\n          <div>that means that the list item will start through that number</div>\r\n        </div>\r\n      </div>\r\n\r\n      <h2>Style tags:</h2>\r\n      <ul>\r\n        <li><code>&lt;em><em></code> emphasize text </em><code>&lt;/em></code></li>\r\n        <li><code>&lt;i><i></code> italic type </i><code>&lt;/i></code></li>\r\n        <li><code>&lt;strong / b><strong></code> get text bold </strong><code>&lt;/strong / b></code></li>\r\n        <li><code>&lt;small><small></code> get text smaller </small><code>&lt;/small></code></li>\r\n        <li><code>&lt;u><u></code> under-scope </u><code>&lt;/u></code></li>\r\n      </ul>", "data": "2021-12-05T11:54:37.902Z", "update_data": "2021-12-08T09:04:32.462Z", "is_published": false, "image": "", "category": 1, "subcategory": 24, "slug": "basic-tags", "author": null}}, {"model": "home.topic", "pk": 49, "fields": {"title": "HTML формы", "description": "", "content": "", "html_content": "<p><code id='red'>&lt;form></code> is a component of a web page that has form controls, such as text, buttons, checkboxes, range, or color picker controls. A user can interact with such a form, providing data that can then be sent to the server for further processing (e.g. returning the results of a search or calculation). No client-side scripting is needed in many cases, though an API is available so that scripts can augment the user experience or use forms for purposes other than submitting data to a server.</p>\r\n<p>Tag <code id='red'>&lt;form></code> is conteiner for different user inputs.\r\n        Tag <code id='red'>&lt;form></code> have it's inherent atribut <code id='orange'>action</code> that conteins an server adress\r\n        and atribut <code id='orange'>method</code> that defines transmission method of data, and has several properties:\r\n    <code id='green'>'get'</code> and <code id='green'>'post'</code> with it's inherent atribut <code id='orange'>enctype</code> \r\n    and it's property <code id='green'>'multipert/form-data'</code>\r\n\r\n    <pre class='code'><code>&lt;<span id='red'>form </span><span id='orange'>action</span>=\"<span id='green'>server adress</span>\" \r\n          <span id='orange'>method</span>=\"<span id='green'>get</span>/<span id='green'>post</span>\"\r\n          <span id='orange'>enctype</span>=\"<span id='green'>multipart</span>/<span id='green'>form-data</span>\" \r\n    </code></pre>\r\n\r\n    <p>The most used form element is <code id='red'>input</code>, that is an inline element<br>\r\n    The most important atribute of <code id='red'>input</code> tag is <code id='orange'>type</code> that defines method of\r\n        receiving data from user</p>\r\n\r\n    <p>Here we will observe common used type elements</p>\r\n\r\n\r\n    <div class='forms'><h2>Text field</h2>\r\n    <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>text</span>' <span id='orange'>name</span>='<span id='green'>name</span>' <span id='orange'>value</span>='<span id='green'>vaue</span>'></code>\r\n    <p>(default) Displays a single-line text input field</p>\r\n    <div>\r\n        <label for=\"fname\">Input name:</label>\r\n        <input placeholder=\"placeholder='First Name'\" type=\"text\" name='FirstName'>\r\n    </div>\r\n\r\n    <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>password</span>' <span id='orange'>name</span>='<span id='green'>name</span>' <span id='orange'>value</span>='<span id='green'>vaue</span>'></code>\r\n    <p>Displays hiden input</p>\r\n    <div>\r\n        <label for=\"pas\">Input password:</label>\r\n        <input type=\"password\" name='pas'>\r\n    </div>\r\n\r\n    <div>\r\n      <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>tel</span>' <span id='orange'>name</span>='<span id='green'>telnum</span>'></code>\r\n      <p>Displays a field for input a tel number</p>\r\n      <label for=\"telnum\">Enter a phone number :</label>\r\n        <input type=\"tel\" name=\"telnum\" placeholder=\"+38\" pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\" required>\r\n        <input type=\"submit\" value=\"Submit\">\r\n      </div>\r\n\r\n\r\n  <h3>Inputs restrictions:</h3>\r\n  <p>Argument <code id='orange'>pattern</code> specifies a regular expression to check the input value against</p>\r\n  <p>Argument <code id='orange'>required</code> specifies that an input field is required (must be filled out)</p>\r\n\r\n\r\n  <h2>Radio button and checkbox</h2>\r\n    <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>radio</span>' <span id='orange'>name</span>='<span id='green'>name</span>'></code>\r\n    <p>Displays a radio button (for selecting one of many choices)</p>\r\n    <div>\r\n        <label for=\"gender\">Gender</label><br>\r\n        <input type=\"radio\" name='gender' value=\"Man\">Man<br>\r\n        <input type=\"radio\" name='gender' value=\"Woman\">Woman<br>\r\n    </div>\r\n    <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>checkbox</span>' <span id='orange'>name</span>='<span id='green'>name</span>'></code>\r\n    <p>Displays a checkbox button (for selecting more then one choices)</p>\r\n    <div>\r\n        <label for=\"property\">Property:</label><br>\r\n        <input checked type=\"checkbox\" name='bake'>Bake <br>\r\n        <input type=\"checkbox\" name='car'>Car <br>\r\n        <input disabled type=\"checkbox\" name='home'>Home <br>\r\n    </div>\r\n    <h3>Inputs restrictions:</h3>\r\n    <p><code id='orange'>checked</code> used for pre-select value</p> \r\n    <p><code id='orange'>disabled</code> makes field disabled</p>\r\n    \r\n    \r\n    <h2>Button</h2>\r\n      <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>submit</span>' <span id='orange'>name</span>='<span id='green'>name</span>' <span id='orange'>value</span>='<span id='green'>vaue</span>'></code>\r\n      <p>Displays a submit button (for submitting the form)</p>\r\n      <div>\r\n          <label for=\"option\">Option</label>\r\n          <input type=\"submit\" name='option' value=\"Apply\">\r\n      </div>\r\n      \r\n      <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>button</span>' <span id='orange'>name</span>='<span id='green'>name</span>'></code>\r\n      <p>Displays a reset button (for reset the form)</p>\r\n      <div>\r\n          <label for=\"option\">Option</label>\r\n          <input type=\"reset\" name='option'>\r\n      </div>\r\n      \r\n      <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>button</span>' <span id='orange'>onclick</span>=\"<span id='purple'>alert</span>('<span id='green'>Hello World!</span>')\" <span id='orange'>value</span>='<span id='green'>Click Me!</span>'></code>\r\n\r\n      <p>Displays a button</p>\r\n      <div>\r\n          <label for=\"option\">Option</label>\r\n          <input type=\"button\" name='option' onclick=\"alert('Hello World!')\" value=\"Click Me!\">\r\n      </div>\r\n      <p>Atribut <code><span id='orange'>onclick</span>=\"<span id='purple'>alert</span>('<span id='green'>some description</span>')</code> opens a new\r\n      field on the page with confirmation masege</p>\r\n\r\n\r\n    <h2>Quantity and date fields</h2>\r\n    <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>number</span>' <span id='orange'>name</span>='<span id='green'>quantity</span>'></code>\r\n    <p>Displays a number input picker</p>\r\n    <div>\r\n        <label for=\"number\">Quantity:</label>\r\n        <input type=\"number\" max=\"10\" min='1' name=\"number\">\r\n        <input type=\"submit\" value=\"Submit\">\r\n    </div>\r\n\r\n    <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>range</span>' <span id='orange'>min</span>='<span id='green'>num</span>' <span id='orange'>max</span>='<span id='green'>num</span>'></code>\r\n        <p>Displays a range list with slider control. For default it starts fron 0 to 100</p>\r\n    <div>\r\n        <label for=\"vol\">Volume (between 0 and 50):</label><br>\r\n        <input type=\"range\" name=\"vol\" min=\"0\" max=\"50\">\r\n        <input type=\"submit\" value=\"Submit\">\r\n    </div>\r\n\r\n    <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>date</span>' <span id='orange'>name</span>='<span id='green'>birthday</span>'></code>\r\n    <p>Displays a dete picker</p>\r\n    <div>\r\n      <label for=\"birthday\">Birthday:</label>\r\n      <input type=\"date\" max=\"1979-12-31\" name=\"birthday\">\r\n      <input type=\"submit\" value=\"Submit\">\r\n  </div>\r\n\r\n  <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>time</span>' <span id='orange'>name</span>='<span id='green'>time</span>'></code>\r\n      <p>Displays a time scope</p>\r\n      <div>\r\n      <label for=\"alarm\">Set alarm clock</label>\r\n        <input type=\"time\" name=\"alarm\" value=\"08:00\">\r\n        <input type=\"submit\" value=\"Submit\">\r\n      </div>\r\n  <h3>Inputs restrictions:</h3>\r\n  <p>Property <code id='orange'>min/max</code>used to add restrictions to dates</p>\r\n\r\n\r\n    <h2>Other types</h2>\r\n    <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>color</span>' <span id='orange'>name</span>='<span id='green'>favcolor</span> <span id='orange'>value</span>='<span id='green'>color</span>'></code>\r\n    <p>Displays a color picker</p>\r\n    <div>\r\n        <label for=\"option\">Choose your favorite color</label>\r\n        <input type=\"color\" name=\"favcolor\" value='#E76F51' style='padding: 1px; height: 30px; width: 75px;'>\r\n    </div>\r\n\r\n    <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>email</span>' <span id='orange'>name</span>='<span id='green'>email</span>'></code>\r\n    <p>Displays a container for writing e-mail address</p>\r\n    <div>\r\n        <label for=\"e-mail\">Enter youe e-mail</label>\r\n        <input input type=\"email\" id=\"email\" name=\"email\">\r\n        <input type=\"submit\" value=\"Submit\">\r\n    </div>\r\n\r\n    <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>url</span>' <span id='orange'>name</span>='<span id='green'>url</span>'></code>\r\n        <p>Displays a url field</p>\r\n        <div>\r\n        <label for=\"url\">Set an url adress</label>\r\n          <input type=\"url\" name=\"url\">\r\n          <input type=\"submit\" value=\"Submit\">\r\n        </div>\r\n\r\n        <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>search</span>' <span id='orange'>name</span>='<span id='green'>search</span>'></code>\r\n        <p>Displays a search field</p>\r\n        <div>\r\n        <label for=\"search\">Google search :</label>\r\n          <input type=\"search\" name=\"search\">\r\n          <input type=\"submit\" value=\"Submit\">\r\n        </div>\r\n        \r\n    <code>&lt;<span id='red'>input</span> <span id='orange'>type</span>='<span id='green'>file</span>' <span id='orange'>name</span>='<span id='green'>file</span>'></code>\r\n    <p>Displays a file-select field and a 'Browse' buttton for file upploads</p>\r\n    <div>\r\n        <label for=\"file\">Add photo</label>\r\n        <input type=\"file\" name='file'> \r\n    </div>\r\n    <p>Attribut <code id='orange'>multiple</code> allows enter more then one value</p>\r\n\r\n\r\n    <h3>Other inputs restrictions:</h3>\r\n    <P>For every following types we can add <code id='orange'>disebled</code> atribute that, \r\n        makes field blocked, dim and not-usable</P>\r\n    <p>Atttribut <code id='orange'>pattern</code> specifies a regular expression that the user input checked against</p>\r\n    <p><code id='orange'>readonly</code> allows only reading the input</p>\r\n    <p><code id='orange'>step</code> specifies the legal number intervals for an input field</p>\r\n    <p><code id='orange'>readonly</code> declare the default value</p>\r\n    <p><code id='orange'>autofocus</code> make fields focus when the page loads</p>\r\n\r\n    <h2>Forms in action</h2>\r\n    <p>Ich <code id='orange'>input</code> element must have a <code id='orange'>name</code> atribut</p> \r\n    <p><code id='orange'>input</code> element has also a <code id='orange'>value</code> atribut that conteins a default value</p> \r\n      <div class=\"form_example\">  \r\n        <div>\r\n        <div>\r\n            <label for=\"fname\">First name:</label>\r\n            <input placeholder='First Name' type=\"text\" name='FirstName'>\r\n        </div>\r\n        <div>\r\n            <label for=\"sname\">Second Name</label>\r\n            <input placeholder='Second Name' type=\"text\" name='sname'>\r\n        </div>\r\n        <div>\r\n            <label for=\"pas\">Password</label>\r\n            <input type=\"password\" name='pas'>\r\n        </div>\r\n        <div>\r\n            <label for=\"tel\">Tel number</label>\r\n            <input type=\"tel\" name='tel' value=\"+38 \">\r\n        </div>\r\n        </div>\r\n        \r\n        <div class=\"example\">\r\n        <div>\r\n            <label for=\"gender\">Gender</label><br>\r\n            <input type=\"radio\" name='gender' value=\"Man\">Man<br>\r\n            <input type=\"radio\" name='gender' value=\"Woman\">Woman<br>\r\n        </div>\r\n        <div>\r\n            <label for=\"property\">Property:</label><br>\r\n            <input checked type=\"checkbox\" name='bake'>Bake <br>\r\n            <input type=\"checkbox\" name='car'>Car <br>\r\n            <input disabled type=\"checkbox\" name='home'>Home <br>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <div>\r\n            <label for=\"add\">Additional information</label><br>\r\n            <textarea name=\"add\" id=\"#\" cols=\"30\" rows=\"10\"></textarea>\r\n          </div>\r\n\r\n          <div>\r\n            <label for=\"file\">Add photo</label><br>\r\n            <input type=\"file\" name='file'> \r\n          </div>\r\n          <div>\r\n            <label for=\"color\">Favorite color</label>\r\n            <select name='color'>\r\n                <option value=\"red\">Red</option>\r\n                <option value=\"green\">Green</option>\r\n                <option selected value=\"blue\">Blue</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n              <label for=\"option\">Option:</label>\r\n              <input type=\"button\" name='option' value=\"Apply\">\r\n              <input type=\"reset\" name='reset'>\r\n          </div>\r\n        </div>", "data": "2021-12-05T12:01:47.163Z", "update_data": "2021-12-08T09:04:33.070Z", "is_published": false, "image": "image/2021/12/Yoshida_Hiroshi_artwork_Japanese_painting_mountains_Grand_Canyon-16165.jpg", "category": 1, "subcategory": 24, "slug": "html-forms", "author": null}}, {"model": "home.topic", "pk": 50, "fields": {"title": "CSS синтаксис", "description": "", "content": "", "html_content": "<section id='CSS'>\r\n  <article id='CSS anatomy'>\r\n    <h2>Anatomy of the CSS Rule</h2>\r\n    <p>CSS works by associating rules with HTML elements. These rules govern how the content of\r\n      specified elements should be displayed. And while styling an entire web page could be\r\n      a pretty complex process, defining a simple CSS rule is fairly straightforward. So, let's go over that.</p>\r\n    <h2> Element, Class and ID Selectors</h2>\r\n    <h3><em>Element</em> Selector</h3>\r\n    <p>First element selector, the element selector is just you specifying the element name. For example,\r\n      in this case, p for paragraph says that every paragraph in our HTML document should be colored blue.\r\n    <p> p {<br>&emsp;color: blue;<br>}</p>\r\n    <h3><em>class</em> Selector</h3>\r\n    <p>.blue {<br>&emsp;color: blue;<br>}</p>\r\n    <p>The class selector always specified in a stylesheat in a head scope. To apply this class style use:</p>\r\n    <p>&lt;p class='blue'>&lt/p></p>\r\n    <p>. . .</p>\r\n    <p>&lt;div class='blue'>&lt/div></p>\r\n    <h3><em>id</em> Selector</h3>\r\n    <p>#name {<br>&emsp;color<br>}</p>\r\n    <p>To apply id selector use:</p>\r\n    <p>&lt;div id='name'>&lt/div></p>\r\n    </article>\r\n\r\n<article>\r\n<h3>Grouping Selector</h3>\r\n<p>CSS allows to group several selectors into one CSS rule seperated by comma.</p>\r\n <p>div, .blue {<br>&emsp;color: blue;<br>}</p>\r\n<h3>Combining Selectors</h3>\r\n<p>Element with class Selector</p>\r\n<p>p.big {<br>&emsp;font-size: 20px;<br>}</p>\r\n<p>&lt;!- - Every p element with class=“big”accept font-size: 20px- -></p>\r\n<p>Here is an example how that construction behaves:</p>\r\n<p>&lt;p class=“big”>text size 20px&lt;/p></p>\r\n<p>&lt;div class=“big”>unaffected text&lt;/div</p>\r\n</article>\r\n<article>\r\n<h3>Child Selector</h3>\r\n<pre>\r\n<code>\r\n  >sds<\r\n  sd\r\n      <b>sd</b>\r\n        sd < sd:\r\n\r\n</code>\r\n</pre>\r\n<p>article > p {&emsp;color: blue;&emsp;}</p>\r\n<p>It means that every <b>p</b> element that is a direct child of article will have the CSS style</p>\r\n<p>&lt;article>. . . <br>&emsp;&ltp>. . . blue text . . .&lt/p><br>&lt;/article><br>. . .<br>&ltp>. . . unaffected text . . .&lt;/p><br>&lt;article>. . .<br>&lt;div>&ltp>. . . unaffected text . . .&lt;/p&lt;/div><br>&lt;/article></p>\r\n<h3>Descendant Selector</h3>\r\n<p>article  p {&emsp;color: blue;&emsp;}</p>\r\n<p>The syntax of its, selector spae another selector, and as a previous case, the CSS style will apply all <b>p elevent</p>\r\n<p>&lt;article>. . . <br>&ltp>. . . blue text . . .&lt/p><br>&lt;/article><br>. . .<br>&lt;p>. . . unaffected text . . .&lt;/p><br>&lt;article>. . .<br>&lt;div>&ltp>. . . blue text . . .&lt;/p&lt;/div><br>&lt;/article></p>\r\n</article>\r\n</section>", "data": "2021-12-05T12:02:27.271Z", "update_data": "2021-12-08T09:04:33.524Z", "is_published": false, "image": "image/2021/12/Yoshida_Hiroshi_artwork_Japanese_painting_mountains_Grand_Canyon-16165_RUrkv0k.jpg", "category": 2, "subcategory": 25, "slug": "css-synt", "author": null}}, {"model": "home.topic", "pk": 51, "fields": {"title": "Работа с текстом", "description": "", "content": "", "html_content": "<h3><code>font-family</code></h3><p>Responsible for the font family</p>\r\n    <div class=\"fonttabl\">\r\n    \r\n        <div class='text'>\r\n            <p style=\"font-family: Georgia, 'Times New Roman', Times, serif;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"font-family:'Courier New', Courier, monospace\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n        p {\r\n            font-family: Georgia, serif;\r\n        }\r\n\r\n\r\n        p {\r\n            font-family: 'Courier New', Courier, monospace;\r\n        }\r\n\r\n\r\n\r\n        p {\r\n            font-family: -apple-system, BlinkMacSystemFont, \r\n                            'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\r\n        }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <h3><code>font-size</code></h3><p>Responsible for the font sizing</p>\r\n    <div class=\"fonttabl\">\r\n    \r\n        <div class='text'>\r\n            <p style=\"font-size: smaller\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"font-size: 18px;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"font-size: larger;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n        p {\r\n            font-size: smaller;\r\n        }\r\n\r\n\r\n        p {\r\n            font-size: 18px;\r\n        }\r\n\r\n\r\n\r\n\r\n        p {\r\n            font-size: larger;\r\n        }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <h3><code>font-style</code></h3><p>Definds font style</p>\r\n    <div class=\"fonttabl\">\r\n    \r\n        <div class='text'>\r\n            <p style=\"font-style: italic;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"font-style: oblique\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"font-style: initial;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n        p {\r\n            font-style: italic;\r\n        }\r\n\r\n\r\n        p {\r\n            font-family: style: oblique;\r\n        }\r\n\r\n\r\n        p {\r\n            font-style: initial;;\r\n        }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <h3><code>font-weight</code></h3><p>Sets the weight of the font</p>\r\n    <div class=\"fonttabl\">\r\n    \r\n        <div class='text'>\r\n            <p style=\"font-weight: bolder\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"font-weight: lighter\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n        p {\r\n            font-weight: bolder;\r\n        }\r\n\r\n\r\n        p {\r\n            font-weight: lighter;\r\n        }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n    <h3><code>color</code></h3><p>Spesify the color of the text</p>\r\n    <div class=\"fonttabl\">\r\n    \r\n        <div class='text'>\r\n            <p style=\"color: teal;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"color: rgb(114, 9, 9);\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n                <p style=\"color: #C87C56\">\r\n                    Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n        p {\r\n            color: teal;\r\n        }\r\n\r\n\r\n        p {\r\n            color: rgb(114, 9, 9);\r\n        }\r\n\r\n\r\n        p {\r\n            color: #C87C56\r\n        }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <h3><code>text-align</code></h3><p>Spesify font aligment</p>\r\n    <div class=\"fonttabl\">\r\n    \r\n        <div class='text'>\r\n            <p style=\"text-align: normal;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"text-align: justify;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"text-align: center;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"text-align: end;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n        p {\r\n            text-align: normal;\r\n        }\r\n\r\n\r\n        p {\r\n            text-align: justify;\r\n        }\r\n\r\n\r\n        p {\r\n            text-align: center;\r\n        }\r\n\r\n\r\n        p {\r\n            text-align: end;\r\n        }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n    <h3><code>text-decoration</code></h3><p>Adds underlines</p>\r\n    <div class=\"fonttabl\">\r\n    \r\n        <div class='text'>\r\n            <p style=\"text-decoration: overline;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"text-decoration: line-through;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"text-decoration: underline;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n        p {\r\n            text-decoration: overline;\r\n        }\r\n\r\n\r\n        p {\r\n            ext-decoration: line-through;\r\n        }\r\n\r\n\r\n        p {\r\n            text-decoration: underline;\r\n        }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n    <h3><code>text-shadow</code></h3><p>Applys shadow to the text</p>\r\n    <div class=\"fonttabl\" style=\" padding-bottom: 75px;\">\r\n    \r\n        <div class='text'\">\r\n            <p style=\"text-shadow: 3px 3px 2px black;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"text-shadow: 0px 75px 1px black;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n                \r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n        p {\r\n            text-shadow: 3px 3px 2px black;\r\n        }\r\n\r\n\r\n        p {\r\n            text-shadow: 0px 75px 1px black;\r\n        }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n    <h3><code>text-transform</code></h3><p>Responsible for upper or lower cases</p>\r\n    <div class=\"fonttabl\">\r\n    \r\n        <div class='text'>\r\n            <p style=\"text-transform: capitalize;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"text-transform: uppercase;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"text-transform: lowercase;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n        p {\r\n            text-transform: capitalize;\r\n        }\r\n\r\n\r\n        p {\r\n            text-transform: uppercase;\r\n        }\r\n\r\n\r\n        p {\r\n            text-transform: lowercase;\r\n        }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n    <h3><code>text-ident</code></h3><p>Setts width of indent</p>\r\n    <div class=\"fonttabl\">\r\n    \r\n        <div class='text'>\r\n            <p style=\"text-indent: 25px;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n        p {\r\n            text-indent: 25px;\r\n        }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n    <h3><code>letter-spacing</code></h3><p>Specify spacing between the symbols</p>\r\n    <div class=\"fonttabl\" style=\"padding-bottom: 35px;\">\r\n    \r\n        <div class='text'>\r\n            <p style=\"letter-spacing: 5px;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n\r\n        p {\r\n            letter-spacing: 5px;\r\n        }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n    <h3><code>word-spacing</code></h3><p>Specify spacing between the words</p>\r\n    <div class=\"fonttabl\">\r\n    \r\n        <div class='text'>\r\n            <p style=\"word-spacing: 15px;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n        p {\r\n            word-spacing: 15px;\r\n        }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <h3><code>line-height</code></h3><p>Sets interlinear indent of text</p>\r\n    <div class=\"fonttabl\">\r\n    \r\n        <div class='text'>\r\n            <p style=\"line-height: 30px;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n      \r\n        p {\r\n            font-style: italic;;\r\n        }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n</div>", "data": "2021-12-05T12:06:16.050Z", "update_data": "2021-12-08T09:04:34.034Z", "is_published": false, "image": "", "category": 2, "subcategory": 25, "slug": "font-and-text", "author": null}}, {"model": "home.topic", "pk": 52, "fields": {"title": "Блоки", "description": "", "content": "", "html_content": "<p><code>border</code> borger suround element</p>\r\n    <p>Takes such parameters as <code>border: thickness style color (2px solid/dashed/dotted #color)</code></p>\r\n    <p><code>border-radius</code> set radius rounding of the border <br>\r\n        Recordered: <code>border-radius: 10px 10px 10px 10px;</code></p> \r\n    <span style='border: 4px dotted red; \r\n                 padding: 3px; \r\n                 font-size: large;'> <code>border</code></span>\r\n\r\n    <p><code>outline</code> external span of the block</p>\r\n    <span style='outline: 3px solid red; \r\n                border: 2px dashed; \r\n                padding: 2px; \r\n                font-size: large;'><code>outline</code></span><br>\r\n\r\n    <p><code>box-shadow</code> add a shadow to the element</p>\r\n    <p>Takes such parameters as:</p>\r\n    <div style='box-shadow: 3px 3px 5px 3px black; \r\n                padding: 5px 15px; \r\n                border-radius: 10px; \r\n                width: 315px; font-size: \r\n                large;'>\r\n        <pre><code>box-shadow: (horizontal shift)px \r\n            (vertical shift)px \r\n            (shadow radius)px \r\n            (distant)px #color</code></pre></div>\r\n\r\n    <p><code>opacity</code> determines the transparency level from 0.0 to 1</p>\r\n    <pre>\r\n        <code style='opacity:0.1'>opacity</code>\r\n        <code style='opacity:0.3'> opacity</code>\r\n        <code style='opacity:0.6'>  opacity</code>\r\n        <code style='opacity:0.9'>   opacity</code>\r\n    </pre>\r\n\r\n    <p><code>visibility</code> intendede for dislpay(default) or hiding elements</p>\r\n    <p><code>overflow</code> intendede for dislpay(default) or hiding external scope of the block</p>\r\n    <img src=\"img/channels4_profile.jpg\" alt=\"#\" style=\"border-radius: 50px; overflow: hidden; width: 10%; min-width: 5%;\">\r\n\r\n\r\n    <h2><code>background</code></h2>\r\n    \r\n    <div class='body'>\r\n        <div class=\"back\">\r\n            <h3><code>background-color</code></h3>\r\n            <h3><code>background-image</code></h3>\r\n            <h3><code>background-attachment</code></h3>\r\n        </div>\r\n        <div class=\"back\">\r\n            <div class=\"background\" style=\"background: rgba(232, 234, 236, 0.541);\"><p>#Page</p></div>\r\n            <div class=\"background\" style=\"background: url(img/background39.png)\"><p>#Page</p></div>\r\n            <div class=\"background\" style=\"background: url(img/tile.png) 0 0/ auto auto; color: rgb(255, 252, 242);\"><p>#Page</p><br><br><br></div>\r\n        </div>\r\n        <div class=\"code\">\r\n            <div>\r\n                <pre>\r\n                    <code>\r\nbody {\r\n    background: color;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\nbody {\r\n    background: url(path/img);\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\nbody {\r\n    background-size: 0 0/ auto auto;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n        </div>\r\n<h2><code>padding</code></h2>\r\n    <p>Internal indent of block tags. <code>padding</code> can be writen in different ways:</p>\r\n    <pre><code>\r\n        padding: top right bottom left;\r\n        padding: top right & left bottom;\r\n        padding: tod & bottom right & left;\r\n        padding: all four paddings value\r\n    </code>\r\n    </pre>\r\n    <div class='body'>\r\n        <div class=\"block\">\r\n            <div>\r\n                <p style=\"padding: 15px;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, id!</p>\r\n            </div>\r\n            <div>\r\n                <p style=\"padding: 10px 20px;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, id!</p>\r\n            </div>\r\n            <div>\r\n                <p style=\"padding: 0px 10px 20px;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, id!</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"code\">\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    padding: 15px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    padding: 10px 20px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    padding: 0px 10px 20px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n        </div>\r\n   </div>\r\n\r\n\r\n   <h2><code>margin</code></h2>\r\n    <p>External indent of block tags. <code>margin</code> can be writen in different ways:</p>\r\n    <pre><code>\r\n        margin: top right bottom left;\r\n        margin: top right & left bottom;\r\n        margin: tod & bottom right & left;\r\n        margin: all four paddings value\r\n    </code>\r\n    </pre>\r\n    <div class='body'>\r\n        <div class=\"block\">\r\n            <div>\r\n                <p style=\"margin: 10px;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, id!</p>\r\n            </div>\r\n            <div>\r\n                <p style=\"margin: 25px 10px;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, id!</p>\r\n            </div>\r\n            <div>\r\n                <p style=\"margin: 0px 10px 20px;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, id!</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"code\">\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    padding: 10px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    padding: 25px 10px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    padding: 0px 10px 20px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n        </div>\r\n        <h3><code>mardin: auto;</code></h3>\r\n        <p class=\"margin\">Sets the element in the center within it's container.</p>\r\n        <div class=\"margin\">\r\n            <pre>\r\n                <code>\r\n    div {\r\n    padding: 0px 10px 20px;\r\n    }\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <h2><code>width</code></h2>\r\n    <p>Sets the width of block tags and some in-line elements as <code>img</code>.</p>\r\n    <div class='body'>\r\n        <div class=\"block\">\r\n            <div>\r\n                <p style=\"width: 100px;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, id!</p>\r\n            </div>\r\n            <div>\r\n                <p style=\"width: 75%;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, id!</p>\r\n            </div>\r\n            <div>\r\n                <p style=\"width: 210px;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, id!</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"code\">\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    width: 100px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    width: 75%;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    width: 210px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n        </div>\r\n        \r\n        <h3><code>max-width</code></h3>\r\n        <p>Sets the max-width of the block tags.</p>\r\n        <div class=\"block\">\r\n            <div style=\"width: 60%;\">\r\n                <p style=\"max-width: 400px;\">If the content is larger than the maximum width, it will automatically change the height of the element.</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"code\">\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    max-width: 400px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        <h3><code>min-width</code></h3>\r\n        <p>Sets the max-width of the block tags.</p>\r\n        <div class=\"block\">\r\n            <div style=\"width: 60%;\">\r\n                <p style=\"min-width: 550px;\">If the content is larger than the maximum width, it will automatically change the height of the element.</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"code\">\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    min-width: 550px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n        </div>\r\n        <p>If the content is larger than the maximum width, it will automatically change the height of the element.</p>\r\n    </div>\r\n\r\n\r\n    <h2><code>height</code></h2>\r\n    <p>Sets the height of block tags and some in-line elements as <code>img</code>.</p>\r\n    <div class='body'>\r\n        <div class=\"block\">\r\n            <div>\r\n                <p style=\"height: 100px;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, id!</p>\r\n            </div>\r\n            <div>\r\n                <p style=\"height: 75%;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, id!</p>\r\n            </div>\r\n            <div>\r\n                <p style=\"height: 40px;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, id!</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"code\">\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    height: 100px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    height: 75%;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    height: 40px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n        </div>\r\n        \r\n        <h3><code>max-height</code></h3>\r\n        <p>Sets the max-height of the block tags.</p>\r\n        <div class=\"block\">\r\n            <div style=\"height: 50%;\">\r\n                <p style=\"max-height: 150px;\">If the content is larger than the maximum width, it will automatically change the height of the element.</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"code\">\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    max-height: 150px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        <h3><code>min-height</code></h3>\r\n        <p>Sets the min-height of the block tags.</p>\r\n        <div class=\"block\">\r\n            <div style=\"width: 30%;\">\r\n                <p style=\"min-height: 60px;\">If the content is larger than the maximum width, it will automatically change the height of the element.</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"code\">\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    min-height: 60px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n        </div>\r\n        <p>Useful script for changing the default width calculation</p>\r\n        <div class=\"code\">\r\n            <div>\r\n                <pre>\r\n                    <code>\r\n*,*: before,*: after {\r\n    -moz-box-sizing: border-box;\r\n    webkit-box-sizing: border-box;\r\n    box-sizing: border-box;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <h2><code>oveflow</code></h2>\r\n    <p>Maneges the display of content of the block element</p>\r\n    <div class='body'>\r\n        <div class=\"block\">\r\n            <div>\r\n                <p style=\"overflow: visible; height: 35px;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, id!</p>\r\n            </div>\r\n            <div>\r\n                <p style=\"overflow: hidden; height: 62px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Corporis odio fugiat suscipit! Quo ipsum delectus natus minima enim est dicta.</p>\r\n            </div>\r\n            <div>\r\n                <p style=\"overflow: auto; height: 70px;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. At recusandae quis dolorem blanditiis placeat voluptatum laborum, vel aut enim atque!</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"code\">\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    overflow: visible; \r\n    height: 35px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    overflow: hidden; \r\n    height: 62px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\ndiv {\r\n    overflow: auto; \r\n    height: 70px;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n    <h2><code>background</code></h2>\r\n    \r\n    <div class='body'>\r\n        <div class=\"back\">\r\n            <h3><code>background-color</code></h3>\r\n            <h3><code>background-image</code></h3>\r\n            <h3><code>background-attachment</code></h3>\r\n        </div>\r\n        <div class=\"back\">\r\n            <div class=\"background\" style=\"background: rgba(232, 234, 236, 0.541);\"><p>#Page</p></div>\r\n            <div class=\"background\" style=\"background: url(img/background39.png)\"><p>#Page</p></div>\r\n            <div class=\"background\" style=\"background: url(img/tile.png) 0 0/ auto auto; color: rgb(255, 252, 242);\"><p>#Page</p><br><br><br></div>\r\n        </div>\r\n        <div class=\"code\">\r\n            <div>\r\n                <pre>\r\n                    <code>\r\nbody {\r\n    background: color;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\nbody {\r\n    background: url(path/img);\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <pre>\r\n                    <code>\r\nbody {\r\n    background-size: 0 0/ auto auto;\r\n}\r\n                    </code>\r\n                </pre>\r\n            </div>\r\n        </div>\r\n<h2 style=\"font-size: 30px\">Positioning</h2>\r\n<h2><code>position</code></h2>\r\n<p>Sets the type of element position</p>\r\n        <div class=\"position\">\r\n            <ul class=\"head\">\r\n                <li><pre>\r\n                    <code>\r\n.block {\r\n    position: <b>static</b>;\r\n    font-size: 120%;\r\n}\r\n\r\n<small>&lt;!--installed by defaut--></small>\r\n\r\n                    </code>\r\n                </pre></li>\r\n                <li><pre>\r\n                    <code>\r\n.block{\r\n    position: <b>relative</b>;\r\n    left/right: Npx;\r\n    top/bottom: Npx;\r\n}\r\n<small>&lt;!--the position sets \r\nrelative to its parent--></small>\r\n                    </code>\r\n                </pre></li>\r\n                <li><pre>\r\n                    <code>\r\n.block{\r\n    position: <b>absolute</b>;\r\n    left: 0;\r\n    bottom: 0;\r\n}\r\n<small>&lt;!--the position sets relative \r\nto its nearest positioned ansestor--></small>\r\n                    </code>\r\n                </pre></li>\r\n            </ul>\r\n            <ul class=\"foot\">\r\n                <li><pre>\r\n                    <code>\r\n.block{\r\n    position: <b>fixed</b>;\r\n    top: 10px;\r\n}\r\n<small>&lt;!--the position sets relative \r\nto viewport--></small>\r\n                    </code>\r\n                </pre></li>\r\n                <li><pre>\r\n                    <code>\r\n.block{\r\n    position: sticky;\r\n}\r\n<small>&lt;!--the position sets relative \r\n    to user's scroll</code>\r\n                </pre></li>\r\n                <li><pre>\r\n                    <code>\r\n.block{\r\n    position: relative;\r\n    right: 40px;\r\n    top: 30px;\r\n    <b>z-index</b>: 1;\r\n}\r\n<small>&lt;!--controls the overlap of elements\r\nvalue z-index responds for priority--></small>\r\n                    </code>\r\n                </pre></li>\r\n            </ul>\r\n        </div>\r\n        </div>", "data": "2021-12-05T12:06:24.885Z", "update_data": "2021-12-08T09:04:34.383Z", "is_published": false, "image": "", "category": 2, "subcategory": 25, "slug": "css-block", "author": null}}, {"model": "home.topic", "pk": 53, "fields": {"title": "Псевдо-классы", "description": "", "content": "", "html_content": "<h2>Pseudo-<b>class</b> Selector</h2>\r\n<p>Pseudo-class selectors address targeting only the structures that can be targeted by simple combinations of regular selectors, or targeting the ability to style based on user interaction with the page. </p>\r\n<h3><code>:hover</code></h3>\r\n    <p>Fires on hover over the element</p>\r\n    <div class=\"ul\">\r\n        <ul>\r\n            <li class=\"li1\"><pre><code>\r\n.link:hover {\r\n    color: #color;\r\n    border-bottom: 3px solid;\r\n    font-size: 102%;\r\n}\r\n            </code></pre></li>\r\n            <li class=\"li2\"><pre><code>\r\n.link:hover {\r\n    font-size: 105%;\r\n    border-radius: 10px;\r\n    overflow: hidden;\r\n}\r\n            </code></pre></li>\r\n            <li class=\"li3\"><pre><code>\r\n.link:hover {\r\n    color: #color;\r\n    border-radius: 10px;\r\n    box-shadow: 0 0 5px #color;\r\n}\r\n            </code></pre></li>\r\n        </ul>\r\n    </div>\r\n    <h2><code>:visited</code></h2>\r\n    <p>Fires on visited links</p>\r\n    <div class=\"ul\">\r\n        <ul>\r\n            <a href=\"https://www.google.com/\" target=\"blank\" class=\"li1\"><li><pre><code>\r\n.link:visited {\r\n    color: #color;\r\n}\r\n            </code></pre></li></a>\r\n        </ul>\r\n    </div>\r\n\r\n    <h3><code>:active</code></h3>\r\n    <p>Fires with clicking on an element</p>\r\n    <div class=\"ul\">\r\n        <ul>\r\n            <a href=\"https://www.google.com/\" target=\"blank\" class=\"li1\"><li><pre><code>\r\n.link:active {\r\n    color: #color;\r\n}\r\n            </code></pre></li></a>\r\n        </ul>\r\n    </div>\r\n\r\n    <h3><code>:focus</code></h3>\r\n    <p>Fires when the element recives focus</p>\r\n    <div>\r\n        <form action=\"#\">\r\n            <input type=\"text\" class='focus'><br>\r\n            <input type=\"submit\">\r\n        </form>\r\n    </div>\r\n    <h2><code>:firt/last-child</code></h2>\r\n    <p>Applies to the numeric element in block</p>\r\n    <div class=\"ul\">\r\n        <ul>\r\n            <li><pre><code>\r\n<span style='color: rgb(85, 83, 83);'> &lt;!-  text1 -></span>\r\n                \r\nli:first-child {\r\n    color: rgb(95, 47, 47);\r\n}\r\n            </code></pre></li>\r\n            <li><pre><code>\r\n<span style='color: rgb(85, 83, 83);'> &lt;!-  text2 -></span>\r\n\r\nli:nth-child(2) {\r\n    color: seagreen;  \r\n}\r\n            </code></pre></li>\r\n            <li><pre><code>\r\n<span style='color: rgb(85, 83, 83);'> &lt;!-  text3 -></span>\r\n\r\nli:last-child {\r\n    color: slateblue;\r\n}\r\n            </code></pre></li>\r\n        </ul>\r\n    </div>\r\n\r\n\r\n<h2>Pseudo-elements</h2>\r\n<h3>::first-line / ::first-letter</h3>\r\n<p>Sets the style to only the first line or letter</p>\r\n<div class='psel'>\r\n    \r\n    <div><pre><code> \r\n        element::first-line{\r\n            color: rgb(255, 145, 0);\r\n        }\r\n    </code></pre>\r\n    <pre><code> \r\n        element::first-letter{\r\n            color: rgb(124, 0, 0);\r\n            font-size: 150%;\r\n            font-weight: bold;\r\n        }\r\n    </code></pre>\r\n    </div>\r\n    <div>\r\n        <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Corrupti, fugiat sunt nulla neque laudantium aut, maiores perferendis et voluptatem veniam quidem reiciendis, incidunt eius itaque aliquam. Consequuntur ab libero reprehenderit?</p><br>\r\n        <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Architecto alias quaerat a minus? Enim error doloribus animi quod a. Atque nesciunt nemo beatae enim ad cupiditate laborum a quia tempora.</p>\r\n    </div>\r\n</div>\r\n\r\n<h3>::before / ::after</h3>\r\n<p>Applies for displaing desired content before/after tag content to witch it appears</p>\r\n<div class='psel'>\r\n    \r\n    <div><pre><code> \r\n        element::before{\r\n            content: '';\r\n            width: 15px;\r\n            height: 15px;\r\n            border-radius: 50%;\r\n            background-color: #color;\r\n            display: inline-block;\r\n            margin-right: 8px;\r\n        }\r\n    </code></pre>\r\n    <pre><code> \r\n        element::after{\r\n            content: ' ~';\r\n        }\r\n    </code></pre>\r\n    <pre><code> \r\n        element:hover:before{\r\n            background-color: salmon;\r\n        }\r\n    </code></pre>\r\n    </div>\r\n    <div>\r\n        <ul>\r\n            <li>text</li>\r\n            <li>text</li>\r\n            <li>text</li>\r\n            <li>text</li>\r\n            <li>text</li>\r\n            <li>text</li>\r\n            <li>text</li>\r\n            <li>text</li>\r\n            <li>text</li>\r\n        </ul>\r\n    </div>\r\n</div>", "data": "2021-12-05T13:39:40.470Z", "update_data": "2021-12-08T09:04:34.881Z", "is_published": false, "image": "", "category": 2, "subcategory": 25, "slug": "pseudo-class-selector", "author": null}}, {"model": "home.topic", "pk": 54, "fields": {"title": "Обнуление", "description": "", "content": "", "html_content": "<h2>CSS reset</h2>\r\n    <div class=\"fonttabl\">\r\n    \r\n        <div class='text'>\r\n            <p style=\"color: teal;\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n            <p style=\"color: rgb(114, 9, 9);\">\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n                <p style=\"color: #C87C56\">\r\n                    Lorem ipsum dolor, sit amet consectetur adipisicing elit. Recusandae, quaerat!</p>\r\n        </div>\r\n        <div class='code'>\r\n            <pre>\r\n                <code>\r\n        *{\r\n            padding: 0;\r\n            margin: 0;\r\n            border: 0;\r\n        }\r\n        *,*:before, *:after{\r\n            -moz-box-sizing: border-box;\r\n            -webkit-box-sizing: border-box;\r\n            box-sizing: border-box;\r\n        }\r\n        :focus, :active{\r\n            outline: none;\r\n        }\r\n        a:focus, a:active {\r\n            outline: none;\r\n        }\r\n\r\n        nav, footer, header, aside {\r\n            display: block\r\n        }\r\n\r\n        html, body {\r\n            height: 100%;\r\n            width: 100%;\r\n            font-size: 100%;\r\n            line-height: 1;\r\n            font-size: 14px;\r\n            -ms-text-size-adjust: 100%;\r\n            -moz-text-size-adjust: 100%;\r\n            -webkit-text-size-adjust: 100%;\r\n        }\r\n        input, button, textarea {\r\n            font-family: inherit;\r\n        }\r\n        input:: -ms-clear{display: none;}\r\n        button{cursor: pointer;}\r\n        button::-moz-focus-inner {padding: 0; \r\n                                  border:0;}\r\n        a, a:visited{text-decoration: none;}\r\n        ul li {list-style: none;}\r\n        img{vertical-align: top}\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </div>", "data": "2021-12-07T20:28:17.852Z", "update_data": "2021-12-08T09:04:35.229Z", "is_published": false, "image": "", "category": 2, "subcategory": 25, "slug": "zeroing", "author": null}}, {"model": "home.topic", "pk": 55, "fields": {"title": "Test 1", "description": "", "content": "", "html_content": "", "data": "2021-12-07T20:37:33.452Z", "update_data": "2021-12-12T18:47:59.519Z", "is_published": true, "image": "", "category": 3, "subcategory": 22, "slug": "test1", "author": 2}}, {"model": "home.topic", "pk": 61, "fields": {"title": "test2", "description": "", "content": "", "html_content": "", "data": "2021-12-12T18:47:40.314Z", "update_data": "2021-12-12T18:47:40.320Z", "is_published": true, "image": "", "category": 3, "subcategory": 22, "slug": "test2", "author": 1}}, {"model": "home.category", "pk": 1, "fields": {"title": "HTML", "image": "image/2021/11/html_logo.png", "slug": "html"}}, {"model": "home.category", "pk": 2, "fields": {"title": "CSS", "image": "image/2021/11/css_logo.png", "slug": "css"}}, {"model": "home.category", "pk": 3, "fields": {"title": "Django", "image": "image/2021/11/django_rG8fiLQ_MsxNBI0.png", "slug": "django"}}, {"model": "home.category", "pk": 4, "fields": {"title": "Python", "image": "image/2021/11/html_logo_Lmx802F.png", "slug": "python"}}, {"model": "home.category", "pk": 5, "fields": {"title": "GIT", "image": "image/2021/11/css_logo_X2QrGkq.png", "slug": "git"}}, {"model": "home.category", "pk": 6, "fields": {"title": "OOP", "image": "image/2021/11/django_rG8fiLQ.png", "slug": "oop"}}, {"model": "home.category", "pk": 7, "fields": {"title": "Другое", "image": "image/2021/12/Yoshida_Hiroshi_artwork_Japanese_painting_mountains_Grand_Canyon-16165_lA3SFV4.jpg", "slug": "drugo"}}, {"model": "home.subcategory", "pk": 2, "fields": {"title": "URL-links", "category": 3, "slug": "url-links", "order": 2}}, {"model": "home.subcategory", "pk": 3, "fields": {"title": "Models", "category": 3, "slug": "models", "order": 3}}, {"model": "home.subcategory", "pk": 5, "fields": {"title": "Views & Templates", "category": 3, "slug": "views-templates", "order": 5}}, {"model": "home.subcategory", "pk": 6, "fields": {"title": "Формы", "category": 3, "slug": "formy", "order": 6}}, {"model": "home.subcategory", "pk": 7, "fields": {"title": "Контролеры класса CBVs", "category": 3, "slug": "kontrolery-klassa-cbvs", "order": 7}}, {"model": "home.subcategory", "pk": 8, "fields": {"title": "ORM", "category": 3, "slug": "orm", "order": 10}}, {"model": "home.subcategory", "pk": 9, "fields": {"title": "Регистрация и Авторизация", "category": 3, "slug": "registraciya-i-avtorizaciya", "order": 13}}, {"model": "home.subcategory", "pk": 11, "fields": {"title": "Админка", "category": 3, "slug": "admink", "order": 4}}, {"model": "home.subcategory", "pk": 12, "fields": {"title": "SQL", "category": 3, "slug": "sql", "order": 8}}, {"model": "home.subcategory", "pk": 13, "fields": {"title": "Shell", "category": 3, "slug": "shell", "order": 9}}, {"model": "home.subcategory", "pk": 14, "fields": {"title": "Django DEBUG Toolbar", "category": 3, "slug": "django-debug-toolbar", "order": 11}}, {"model": "home.subcategory", "pk": 15, "fields": {"title": "Постраничная навигация (pagination)", "category": 3, "slug": "postranichnaya-navigaciya-pagination", "order": 12}}, {"model": "home.subcategory", "pk": 16, "fields": {"title": "Отправка писем на Email", "category": 3, "slug": "tpravka-pisem-na-email", "order": 14}}, {"model": "home.subcategory", "pk": 17, "fields": {"title": "Капча", "category": 3, "slug": "kapch", "order": 15}}, {"model": "home.subcategory", "pk": 18, "fields": {"title": "Визуальный редактор CKEditor", "category": 3, "slug": "vizualnyj-redaktor-ckeditor", "order": 16}}, {"model": "home.subcategory", "pk": 19, "fields": {"title": "Система кеширование Django", "category": 3, "slug": "sistema-keshirovanie-django", "order": 17}}, {"model": "home.subcategory", "pk": 20, "fields": {"title": "Тонкая настройка (кастомизация) админки", "category": 3, "slug": "tonkaya-nastrojka-kastomizaciya-adminki", "order": 18}}, {"model": "home.subcategory", "pk": 21, "fields": {"title": "Развёртывание сайта на хостинге", "category": 3, "slug": "azvyortyvanie-sajta-na-hosting", "order": 19}}, {"model": "home.subcategory", "pk": 22, "fields": {"title": "User's post", "category": 3, "slug": "drugo", "order": -2}}, {"model": "home.subcategory", "pk": 23, "fields": {"title": "What is Django", "category": 3, "slug": "django", "order": -1}}, {"model": "home.subcategory", "pk": 24, "fields": {"title": "HTML синтаксис", "category": 1, "slug": "html-sintaksis", "order": null}}, {"model": "home.subcategory", "pk": 25, "fields": {"title": "CSS синтаксис", "category": 2, "slug": "css-synt", "order": null}}]